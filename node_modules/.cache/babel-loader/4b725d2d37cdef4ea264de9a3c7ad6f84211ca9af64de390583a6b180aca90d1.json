{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$3 = require('../../overlay/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../focus-trap/index.js');\nvar dialogContent = require('./dialog-content2.js');\nvar constants = require('./constants.js');\nvar dialog = require('./dialog.js');\nvar useDialog = require('./use-dialog.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-deprecated/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar index$2 = require('../../../hooks/use-same-target/index.js');\nvar focusTrap = require('../../focus-trap/src/focus-trap.js');\nconst _hoisted_1 = [\"aria-label\", \"aria-labelledby\", \"aria-describedby\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElDialog\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: dialog.dialogProps,\n  emits: dialog.dialogEmits,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const slots = vue.useSlots();\n    index.useDeprecated({\n      scope: \"el-dialog\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/dialog.html#slots\"\n    }, vue.computed(() => !!slots.title));\n    index.useDeprecated({\n      scope: \"el-dialog\",\n      from: \"custom-class\",\n      replacement: \"class\",\n      version: \"2.3.0\",\n      ref: \"https://element-plus.org/en-US/component/dialog.html#attributes\",\n      type: \"Attribute\"\n    }, vue.computed(() => !!props.customClass));\n    const ns = index$1.useNamespace(\"dialog\");\n    const dialogRef = vue.ref();\n    const headerRef = vue.ref();\n    const dialogContentRef = vue.ref();\n    const {\n      visible,\n      titleId,\n      bodyId,\n      style,\n      overlayDialogStyle,\n      rendered,\n      zIndex,\n      afterEnter,\n      afterLeave,\n      beforeLeave,\n      handleClose,\n      onModalClick,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      onCloseRequested,\n      onFocusoutPrevented\n    } = useDialog.useDialog(props, dialogRef);\n    vue.provide(constants.dialogInjectionKey, {\n      dialogRef,\n      headerRef,\n      bodyId,\n      ns,\n      rendered,\n      style\n    });\n    const overlayEvent = index$2.useSameTarget(onModalClick);\n    const draggable = vue.computed(() => props.draggable && !props.fullscreen);\n    expose({\n      visible,\n      dialogContentRef\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.Teleport, {\n        to: _ctx.appendTo,\n        disabled: _ctx.appendTo !== \"body\" ? false : !_ctx.appendToBody\n      }, [vue.createVNode(vue.Transition, {\n        name: \"dialog-fade\",\n        onAfterEnter: vue.unref(afterEnter),\n        onAfterLeave: vue.unref(afterLeave),\n        onBeforeLeave: vue.unref(beforeLeave),\n        persisted: \"\"\n      }, {\n        default: vue.withCtx(() => [vue.withDirectives(vue.createVNode(vue.unref(index$3.ElOverlay), {\n          \"custom-mask-event\": \"\",\n          mask: _ctx.modal,\n          \"overlay-class\": _ctx.modalClass,\n          \"z-index\": vue.unref(zIndex)\n        }, {\n          default: vue.withCtx(() => [vue.createElementVNode(\"div\", {\n            role: \"dialog\",\n            \"aria-modal\": \"true\",\n            \"aria-label\": _ctx.title || void 0,\n            \"aria-labelledby\": !_ctx.title ? vue.unref(titleId) : void 0,\n            \"aria-describedby\": vue.unref(bodyId),\n            class: vue.normalizeClass(`${vue.unref(ns).namespace.value}-overlay-dialog`),\n            style: vue.normalizeStyle(vue.unref(overlayDialogStyle)),\n            onClick: _cache[0] || (_cache[0] = (...args) => vue.unref(overlayEvent).onClick && vue.unref(overlayEvent).onClick(...args)),\n            onMousedown: _cache[1] || (_cache[1] = (...args) => vue.unref(overlayEvent).onMousedown && vue.unref(overlayEvent).onMousedown(...args)),\n            onMouseup: _cache[2] || (_cache[2] = (...args) => vue.unref(overlayEvent).onMouseup && vue.unref(overlayEvent).onMouseup(...args))\n          }, [vue.createVNode(vue.unref(focusTrap[\"default\"]), {\n            loop: \"\",\n            trapped: vue.unref(visible),\n            \"focus-start-el\": \"container\",\n            onFocusAfterTrapped: vue.unref(onOpenAutoFocus),\n            onFocusAfterReleased: vue.unref(onCloseAutoFocus),\n            onFocusoutPrevented: vue.unref(onFocusoutPrevented),\n            onReleaseRequested: vue.unref(onCloseRequested)\n          }, {\n            default: vue.withCtx(() => [vue.unref(rendered) ? (vue.openBlock(), vue.createBlock(dialogContent[\"default\"], vue.mergeProps({\n              key: 0,\n              ref_key: \"dialogContentRef\",\n              ref: dialogContentRef\n            }, _ctx.$attrs, {\n              \"custom-class\": _ctx.customClass,\n              center: _ctx.center,\n              \"align-center\": _ctx.alignCenter,\n              \"close-icon\": _ctx.closeIcon,\n              draggable: vue.unref(draggable),\n              fullscreen: _ctx.fullscreen,\n              \"show-close\": _ctx.showClose,\n              title: _ctx.title,\n              \"aria-level\": _ctx.headerAriaLevel,\n              onClose: vue.unref(handleClose)\n            }), vue.createSlots({\n              header: vue.withCtx(() => [!_ctx.$slots.title ? vue.renderSlot(_ctx.$slots, \"header\", {\n                key: 0,\n                close: vue.unref(handleClose),\n                titleId: vue.unref(titleId),\n                titleClass: vue.unref(ns).e(\"title\")\n              }) : vue.renderSlot(_ctx.$slots, \"title\", {\n                key: 1\n              })]),\n              default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"default\")]),\n              _: 2\n            }, [_ctx.$slots.footer ? {\n              name: \"footer\",\n              fn: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"footer\")])\n            } : void 0]), 1040, [\"custom-class\", \"center\", \"align-center\", \"close-icon\", \"draggable\", \"fullscreen\", \"show-close\", \"title\", \"aria-level\", \"onClose\"])) : vue.createCommentVNode(\"v-if\", true)]),\n            _: 3\n          }, 8, [\"trapped\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onFocusoutPrevented\", \"onReleaseRequested\"])], 46, _hoisted_1)]),\n          _: 3\n        }, 8, [\"mask\", \"overlay-class\", \"z-index\"]), [[vue.vShow, vue.unref(visible)]])]),\n        _: 3\n      }, 8, [\"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"to\", \"disabled\"]);\n    };\n  }\n});\nvar Dialog = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue\"]]);\nexports[\"default\"] = Dialog;","map":{"version":3,"names":["name","inheritAttrs","slots","vue","useSlots","index","useDeprecated","scope","from","replacement","version","ref","computed","title","type","props","customClass","ns","index$1","useNamespace","dialogRef","headerRef","dialogContentRef","visible","titleId","bodyId","style","overlayDialogStyle","rendered","zIndex","afterEnter","afterLeave","beforeLeave","handleClose","onModalClick","onOpenAutoFocus","onCloseAutoFocus","onCloseRequested","onFocusoutPrevented","useDialog","provide","constants","dialogInjectionKey","overlayEvent","index$2","useSameTarget","draggable","fullscreen","expose"],"sources":["../../../../../../packages/components/dialog/src/dialog.vue"],"sourcesContent":["<template>\n  <teleport\n    :to=\"appendTo\"\n    :disabled=\"appendTo !== 'body' ? false : !appendToBody\"\n  >\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          role=\"dialog\"\n          aria-modal=\"true\"\n          :aria-label=\"title || undefined\"\n          :aria-labelledby=\"!title ? titleId : undefined\"\n          :aria-describedby=\"bodyId\"\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          :style=\"overlayDialogStyle\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-focus-trap\n            loop\n            :trapped=\"visible\"\n            focus-start-el=\"container\"\n            @focus-after-trapped=\"onOpenAutoFocus\"\n            @focus-after-released=\"onCloseAutoFocus\"\n            @focusout-prevented=\"onFocusoutPrevented\"\n            @release-requested=\"onCloseRequested\"\n          >\n            <el-dialog-content\n              v-if=\"rendered\"\n              ref=\"dialogContentRef\"\n              v-bind=\"$attrs\"\n              :custom-class=\"customClass\"\n              :center=\"center\"\n              :align-center=\"alignCenter\"\n              :close-icon=\"closeIcon\"\n              :draggable=\"draggable\"\n              :fullscreen=\"fullscreen\"\n              :show-close=\"showClose\"\n              :title=\"title\"\n              :aria-level=\"headerAriaLevel\"\n              @close=\"handleClose\"\n            >\n              <template #header>\n                <slot\n                  v-if=\"!$slots.title\"\n                  name=\"header\"\n                  :close=\"handleClose\"\n                  :title-id=\"titleId\"\n                  :title-class=\"ns.e('title')\"\n                />\n                <slot v-else name=\"title\" />\n              </template>\n              <slot />\n              <template v-if=\"$slots.footer\" #footer>\n                <slot name=\"footer\" />\n              </template>\n            </el-dialog-content>\n          </el-focus-trap>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, useSlots } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDeprecated, useNamespace, useSameTarget } from '@element-plus/hooks'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogInjectionKey } from './constants'\nimport { dialogEmits, dialogProps } from './dialog'\nimport { useDialog } from './use-dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(dialogProps)\ndefineEmits(dialogEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'custom-class',\n    replacement: 'class',\n    version: '2.3.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#attributes',\n    type: 'Attribute',\n  },\n  computed(() => !!props.customClass)\n)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement>()\nconst headerRef = ref<HTMLElement>()\nconst dialogContentRef = ref()\n\nconst {\n  visible,\n  titleId,\n  bodyId,\n  style,\n  overlayDialogStyle,\n  rendered,\n  zIndex,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  handleClose,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onCloseRequested,\n  onFocusoutPrevented,\n} = useDialog(props, dialogRef)\n\nprovide(dialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  bodyId,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\ndefineExpose({\n  /** @description whether the dialog is visible */\n  visible,\n  dialogContentRef,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;uCAsFc;EACZA,IAAM;EACNC,YAAc;AAChB;;;;;;;;;IAIA,MAAMC,KAAA,GAAQC,GAAA,CAAAC,QAAS;IAGrBC,KAAA,CAAAC,aAAA;MACEC,KAAO;MACPC,IAAM;MACNC,WAAa;MACbC,OAAS;MACTC,GAAK;IAAA,GAEPR,GAAA,CAAAS,QAAS,OAAM,CAAC,CAACV,KAAA,CAAMW,KAAK,CAC9B;IAGER,KAAA,CAAAC,aAAA;MACEC,KAAO;MACPC,IAAM;MACNC,WAAa;MACbC,OAAS;MACTC,GAAK;MACLG,IAAM;IAAA,GAERX,GAAA,CAAAS,QAAS,OAAM,CAAC,CAACG,KAAA,CAAMC,WAAW,CACpC;IAEM,MAAAC,EAAA,GAAKC,OAAA,CAAAC,YAAA,CAAa,QAAQ;IAChC,MAAMC,SAAA,GAAYjB,GAAA,CAAAQ,GAAiB;IACnC,MAAMU,SAAA,GAAYlB,GAAA,CAAAQ,GAAiB;IACnC,MAAMW,gBAAA,GAAmBnB,GAAA,CAAAQ,GAAI;IAEvB;MACJY,OAAA;MACAC,OAAA;MACAC,MAAA;MACAC,KAAA;MACAC,kBAAA;MACAC,QAAA;MACAC,MAAA;MACAC,UAAA;MACAC,UAAA;MACAC,WAAA;MACAC,WAAA;MACAC,YAAA;MACAC,eAAA;MACAC,gBAAA;MACAC,gBAAA;MACAC;IAAA,CACE,GAAAC,SAAA,CAAAA,SAAA,CAAUxB,KAAA,EAAOK,SAAS;IAE9BjB,GAAA,CAAAqC,OAAA,CAAQC,SAAA,CAAAC,kBAAoB;MAC1BtB,SAAA;MACAC,SAAA;MACAI,MAAA;MACAR,EAAA;MACAW,QAAA;MACAF;IAAA,CACD;IAEK,MAAAiB,YAAA,GAAeC,OAAA,CAAAC,aAAA,CAAcX,YAAY;IAE/C,MAAMY,SAAA,GAAY3C,GAAA,CAAAS,QAAS,OAAMG,KAAA,CAAM+B,SAAa,KAAC/B,KAAA,CAAMgC,UAAU;IAExDC,MAAA;MAEXzB,OAAA;MACAD;IAAA,CACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}