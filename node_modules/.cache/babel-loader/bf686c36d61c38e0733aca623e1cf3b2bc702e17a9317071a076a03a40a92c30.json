{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar descriptionsCell = require('./descriptions-cell.js');\nvar token = require('./token.js');\nvar descriptionsRow = require('./descriptions-row.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nconst _hoisted_1 = {\n  key: 1\n};\nconst __default__ = vue.defineComponent({\n  name: \"ElDescriptionsRow\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: descriptionsRow.descriptionsRowProps,\n  setup(__props) {\n    const descriptions = vue.inject(token.descriptionsKey, {});\n    return (_ctx, _cache) => {\n      return vue.unref(descriptions).direction === \"vertical\" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n        key: 0\n      }, [vue.createElementVNode(\"tr\", null, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.row, (cell, _index) => {\n        return vue.openBlock(), vue.createBlock(vue.unref(descriptionsCell[\"default\"]), {\n          key: `tr1-${_index}`,\n          cell,\n          tag: \"th\",\n          type: \"label\"\n        }, null, 8, [\"cell\"]);\n      }), 128))]), vue.createElementVNode(\"tr\", null, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.row, (cell, _index) => {\n        return vue.openBlock(), vue.createBlock(vue.unref(descriptionsCell[\"default\"]), {\n          key: `tr2-${_index}`,\n          cell,\n          tag: \"td\",\n          type: \"content\"\n        }, null, 8, [\"cell\"]);\n      }), 128))])], 64)) : (vue.openBlock(), vue.createElementBlock(\"tr\", _hoisted_1, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.row, (cell, _index) => {\n        return vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n          key: `tr3-${_index}`\n        }, [vue.unref(descriptions).border ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n          key: 0\n        }, [vue.createVNode(vue.unref(descriptionsCell[\"default\"]), {\n          cell,\n          tag: \"td\",\n          type: \"label\"\n        }, null, 8, [\"cell\"]), vue.createVNode(vue.unref(descriptionsCell[\"default\"]), {\n          cell,\n          tag: \"td\",\n          type: \"content\"\n        }, null, 8, [\"cell\"])], 64)) : (vue.openBlock(), vue.createBlock(vue.unref(descriptionsCell[\"default\"]), {\n          key: 1,\n          cell,\n          tag: \"td\",\n          type: \"both\"\n        }, null, 8, [\"cell\"]))], 64);\n      }), 128))]));\n    };\n  }\n});\nvar ElDescriptionsRow = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/descriptions-row.vue\"]]);\nexports[\"default\"] = ElDescriptionsRow;","map":{"version":3,"names":["name","descriptions","vue","inject","token","descriptionsKey"],"sources":["../../../../../../packages/components/descriptions/src/descriptions-row.vue"],"sourcesContent":["<template>\n  <template v-if=\"descriptions.direction === 'vertical'\">\n    <tr>\n      <template v-for=\"(cell, _index) in row\" :key=\"`tr1-${_index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"th\" type=\"label\" />\n      </template>\n    </tr>\n    <tr>\n      <template v-for=\"(cell, _index) in row\" :key=\"`tr2-${_index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n    </tr>\n  </template>\n  <tr v-else>\n    <template v-for=\"(cell, _index) in row\" :key=\"`tr3-${_index}`\">\n      <template v-if=\"descriptions.border\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"label\" />\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n      <el-descriptions-cell v-else :cell=\"cell\" tag=\"td\" type=\"both\" />\n    </template>\n  </tr>\n</template>\n\n<script lang=\"ts\" setup>\nimport { inject } from 'vue'\n\nimport ElDescriptionsCell from './descriptions-cell'\nimport { descriptionsKey } from './token'\nimport { descriptionsRowProps } from './descriptions-row'\n\nimport type { IDescriptionsInject } from './descriptions.type'\n\ndefineOptions({\n  name: 'ElDescriptionsRow',\n})\n\ndefineProps(descriptionsRowProps)\n\nconst descriptions = inject(descriptionsKey, {} as IDescriptionsInject)\n</script>\n"],"mappings":";;;;;;;;;;;;;uCAiCc;EACZA,IAAM;AACR;;;;;IAIA,MAAMC,YAAe,GAAAC,GAAA,CAAAC,MAAA,CAAOC,KAAA,CAAAC,eAAiB,IAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}