{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../utils/index.js');\nvar shared = require('@vue/shared');\nconst isTriggerType = (trigger, type) => {\n  if (shared.isArray(trigger)) {\n    return trigger.includes(type);\n  }\n  return trigger === type;\n};\nconst whenTrigger = (trigger, type, handler) => {\n  return e => {\n    isTriggerType(vue.unref(trigger), type) && handler(e);\n  };\n};\nexports.isTriggerType = isTriggerType;\nexports.whenTrigger = whenTrigger;","map":{"version":3,"names":["isTriggerType","trigger","type","shared","isArray","includes","whenTrigger","handler","e","vue","unref"],"sources":["../../../../../../packages/components/tooltip/src/utils.ts"],"sourcesContent":["import { unref } from 'vue'\nimport { isArray } from '@element-plus/utils'\nimport type { Arrayable } from '@element-plus/utils'\nimport type { Ref } from 'vue'\nimport type { TooltipTriggerType } from './trigger'\n\nexport const isTriggerType = (\n  trigger: Arrayable<TooltipTriggerType>,\n  type: TooltipTriggerType\n) => {\n  if (isArray(trigger)) {\n    return trigger.includes(type)\n  }\n  return trigger === type\n}\n\nexport const whenTrigger = (\n  trigger: Ref<Arrayable<TooltipTriggerType>>,\n  type: TooltipTriggerType,\n  handler: (e: Event) => void\n) => {\n  return (e: Event) => {\n    isTriggerType(unref(trigger), type) && handler(e)\n  }\n}\n"],"mappings":";;;;;;;;AAEY,MAACA,aAAa,GAAGA,CAACC,OAAO,EAAEC,IAAI,KAAK;EAC9C,IAAIC,MAAA,CAAAC,OAAO,CAACH,OAAO,CAAC,EAAE;IACpB,OAAOA,OAAO,CAACI,QAAQ,CAACH,IAAI,CAAC;EACjC;EACE,OAAOD,OAAO,KAAKC,IAAI;AACzB;AACY,MAACI,WAAW,GAAGA,CAACL,OAAO,EAAEC,IAAI,EAAEK,OAAO,KAAK;EACrD,OAAQC,CAAC,IAAK;IACZR,aAAa,CAACS,GAAA,CAAAC,KAAK,CAACT,OAAO,CAAC,EAAEC,IAAI,CAAC,IAAIK,OAAO,CAACC,CAAC,CAAC;EACrD,CAAG;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}