{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../virtual-list/index.js');\nrequire('../../../utils/index.js');\nrequire('./components/index.js');\nvar tokens = require('./tokens.js');\nvar grid = require('./grid.js');\nvar utils = require('./utils.js');\nvar shared = require('@vue/shared');\nvar types = require('../../../utils/types.js');\nvar dynamicSizeGrid = require('../../virtual-list/src/components/dynamic-size-grid.js');\nvar fixedSizeGrid = require('../../virtual-list/src/components/fixed-size-grid.js');\nvar header = require('./components/header.js');\nconst COMPONENT_NAME = \"ElTableV2Grid\";\nconst useTableGrid = props => {\n  const headerRef = vue.ref();\n  const bodyRef = vue.ref();\n  const totalHeight = vue.computed(() => {\n    const {\n      data,\n      rowHeight,\n      estimatedRowHeight\n    } = props;\n    if (estimatedRowHeight) {\n      return;\n    }\n    return data.length * rowHeight;\n  });\n  const fixedRowHeight = vue.computed(() => {\n    const {\n      fixedData,\n      rowHeight\n    } = props;\n    return ((fixedData == null ? void 0 : fixedData.length) || 0) * rowHeight;\n  });\n  const headerHeight = vue.computed(() => utils.sum(props.headerHeight));\n  const gridHeight = vue.computed(() => {\n    const {\n      height\n    } = props;\n    return Math.max(0, height - vue.unref(headerHeight) - vue.unref(fixedRowHeight));\n  });\n  const hasHeader = vue.computed(() => {\n    return vue.unref(headerHeight) + vue.unref(fixedRowHeight) > 0;\n  });\n  const itemKey = ({\n    data,\n    rowIndex\n  }) => data[rowIndex][props.rowKey];\n  function onItemRendered({\n    rowCacheStart,\n    rowCacheEnd,\n    rowVisibleStart,\n    rowVisibleEnd\n  }) {\n    var _a;\n    (_a = props.onRowsRendered) == null ? void 0 : _a.call(props, {\n      rowCacheStart,\n      rowCacheEnd,\n      rowVisibleStart,\n      rowVisibleEnd\n    });\n  }\n  function resetAfterRowIndex(index, forceUpdate2) {\n    var _a;\n    (_a = bodyRef.value) == null ? void 0 : _a.resetAfterRowIndex(index, forceUpdate2);\n  }\n  function scrollTo(leftOrOptions, top) {\n    const header$ = vue.unref(headerRef);\n    const body$ = vue.unref(bodyRef);\n    if (!header$ || !body$) return;\n    if (shared.isObject(leftOrOptions)) {\n      header$.scrollToLeft(leftOrOptions.scrollLeft);\n      body$.scrollTo(leftOrOptions);\n    } else {\n      header$.scrollToLeft(leftOrOptions);\n      body$.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top\n      });\n    }\n  }\n  function scrollToTop(scrollTop) {\n    var _a;\n    (_a = vue.unref(bodyRef)) == null ? void 0 : _a.scrollTo({\n      scrollTop\n    });\n  }\n  function scrollToRow(row, strategy) {\n    var _a;\n    (_a = vue.unref(bodyRef)) == null ? void 0 : _a.scrollToItem(row, 1, strategy);\n  }\n  function forceUpdate() {\n    var _a, _b;\n    (_a = vue.unref(bodyRef)) == null ? void 0 : _a.$forceUpdate();\n    (_b = vue.unref(headerRef)) == null ? void 0 : _b.$forceUpdate();\n  }\n  return {\n    bodyRef,\n    forceUpdate,\n    fixedRowHeight,\n    gridHeight,\n    hasHeader,\n    headerHeight,\n    headerRef,\n    totalHeight,\n    itemKey,\n    onItemRendered,\n    resetAfterRowIndex,\n    scrollTo,\n    scrollToTop,\n    scrollToRow\n  };\n};\nconst TableGrid = vue.defineComponent({\n  name: COMPONENT_NAME,\n  props: grid.tableV2GridProps,\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const {\n      ns\n    } = vue.inject(tokens.TableV2InjectionKey);\n    const {\n      bodyRef,\n      fixedRowHeight,\n      gridHeight,\n      hasHeader,\n      headerRef,\n      headerHeight,\n      totalHeight,\n      forceUpdate,\n      itemKey,\n      onItemRendered,\n      resetAfterRowIndex,\n      scrollTo,\n      scrollToTop,\n      scrollToRow\n    } = useTableGrid(props);\n    expose({\n      forceUpdate,\n      totalHeight,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n      resetAfterRowIndex\n    });\n    const getColumnWidth = () => props.bodyWidth;\n    return () => {\n      const {\n        cache,\n        columns,\n        data,\n        fixedData,\n        useIsScrolling,\n        scrollbarAlwaysOn,\n        scrollbarEndGap,\n        scrollbarStartGap,\n        style,\n        rowHeight,\n        bodyWidth,\n        estimatedRowHeight,\n        headerWidth,\n        height,\n        width,\n        getRowHeight,\n        onScroll\n      } = props;\n      const isDynamicRowEnabled = types.isNumber(estimatedRowHeight);\n      const Grid = isDynamicRowEnabled ? dynamicSizeGrid[\"default\"] : fixedSizeGrid[\"default\"];\n      const _headerHeight = vue.unref(headerHeight);\n      return vue.createVNode(\"div\", {\n        \"role\": \"table\",\n        \"class\": [ns.e(\"table\"), props.class],\n        \"style\": style\n      }, [vue.createVNode(Grid, {\n        \"ref\": bodyRef,\n        \"data\": data,\n        \"useIsScrolling\": useIsScrolling,\n        \"itemKey\": itemKey,\n        \"columnCache\": 0,\n        \"columnWidth\": isDynamicRowEnabled ? getColumnWidth : bodyWidth,\n        \"totalColumn\": 1,\n        \"totalRow\": data.length,\n        \"rowCache\": cache,\n        \"rowHeight\": isDynamicRowEnabled ? getRowHeight : rowHeight,\n        \"width\": width,\n        \"height\": vue.unref(gridHeight),\n        \"class\": ns.e(\"body\"),\n        \"role\": \"rowgroup\",\n        \"scrollbarStartGap\": scrollbarStartGap,\n        \"scrollbarEndGap\": scrollbarEndGap,\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"onScroll\": onScroll,\n        \"onItemRendered\": onItemRendered,\n        \"perfMode\": false\n      }, {\n        default: params => {\n          var _a;\n          const rowData = data[params.rowIndex];\n          return (_a = slots.row) == null ? void 0 : _a.call(slots, {\n            ...params,\n            columns,\n            rowData\n          });\n        }\n      }), vue.unref(hasHeader) && vue.createVNode(header[\"default\"], {\n        \"ref\": headerRef,\n        \"class\": ns.e(\"header-wrapper\"),\n        \"columns\": columns,\n        \"headerData\": data,\n        \"headerHeight\": props.headerHeight,\n        \"fixedHeaderData\": fixedData,\n        \"rowWidth\": headerWidth,\n        \"rowHeight\": rowHeight,\n        \"width\": width,\n        \"height\": Math.min(_headerHeight + vue.unref(fixedRowHeight), height)\n      }, {\n        dynamic: slots.header,\n        fixed: slots.row\n      })]);\n    };\n  }\n});\nexports[\"default\"] = TableGrid;","map":{"version":3,"names":["COMPONENT_NAME","headerRef","vue","ref","bodyRef","totalHeight","computed","data","rowHeight","estimatedRowHeight","props","length","fixedData","headerHeight","utils","sum","gridHeight","height","Math","max","unref","fixedRowHeight","hasHeader","itemKey","rowIndex","onItemRendered","rowCacheStart","rowCacheEnd","rowVisibleStart","_a","onRowsRendered","call","rowVisibleEnd","resetAfterRowIndex","index","forceUpdate2","value","header$","body$","shared","isObject","leftOrOptions","scrollToLeft","scrollLeft","scrollTo","scrollTop","top","scrollToTop","scrollToRow","row","strategy","scrollToItem","forceUpdate","$forceUpdate","_b","TableGrid","defineComponent","grid","tableV2GridProps","setup","slots","expose","ns","inject","tokens","TableV2InjectionKey","useTableGrid","getColumnWidth","bodyWidth","cache","columns","scrollbarAlwaysOn","scrollbarEndGap","scrollbarStartGap","style","headerWidth","getRowHeight","onScroll","isDynamicRowEnabled","types","isNumber","Grid","dynamicSizeGrid","fixedSizeGrid","_headerHeight","e","class","createVNode","useIsScrolling","width","default","params","rowData","header","min","dynamic","fixed"],"sources":["../../../../../../packages/components/table-v2/src/table-grid.tsx"],"sourcesContent":["import { computed, defineComponent, inject, ref, unref } from 'vue'\nimport {\n  DynamicSizeGrid,\n  FixedSizeGrid,\n} from '@element-plus/components/virtual-list'\nimport { isNumber, isObject } from '@element-plus/utils'\nimport { Header } from './components'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2GridProps } from './grid'\nimport { sum } from './utils'\n\nimport type { UnwrapRef } from 'vue'\nimport type {\n  DynamicSizeGridInstance,\n  GridDefaultSlotParams,\n  GridItemKeyGetter,\n  GridItemRenderedEvtParams,\n  GridScrollOptions,\n  ResetAfterIndex,\n  Alignment as ScrollStrategy,\n} from '@element-plus/components/virtual-list'\nimport type { TableV2HeaderInstance } from './components'\nimport type { TableV2GridProps } from './grid'\n\nconst COMPONENT_NAME = 'ElTableV2Grid'\n\nconst useTableGrid = (props: TableV2GridProps) => {\n  const headerRef = ref<TableV2HeaderInstance>()\n  const bodyRef = ref<DynamicSizeGridInstance>()\n\n  const totalHeight = computed(() => {\n    const { data, rowHeight, estimatedRowHeight } = props\n\n    if (estimatedRowHeight) {\n      return\n    }\n\n    return data.length * (rowHeight as number)\n  })\n\n  const fixedRowHeight = computed(() => {\n    const { fixedData, rowHeight } = props\n\n    return (fixedData?.length || 0) * (rowHeight as number)\n  })\n\n  const headerHeight = computed(() => sum(props.headerHeight))\n\n  const gridHeight = computed(() => {\n    const { height } = props\n    return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight))\n  })\n\n  const hasHeader = computed(() => {\n    return unref(headerHeight) + unref(fixedRowHeight) > 0\n  })\n\n  const itemKey: GridItemKeyGetter = ({ data, rowIndex }) =>\n    data[rowIndex][props.rowKey]\n\n  function onItemRendered({\n    rowCacheStart,\n    rowCacheEnd,\n    rowVisibleStart,\n    rowVisibleEnd,\n  }: GridItemRenderedEvtParams) {\n    props.onRowsRendered?.({\n      rowCacheStart,\n      rowCacheEnd,\n      rowVisibleStart,\n      rowVisibleEnd,\n    })\n  }\n\n  function resetAfterRowIndex(index: number, forceUpdate: boolean) {\n    bodyRef.value?.resetAfterRowIndex(index, forceUpdate)\n  }\n\n  function scrollTo(x: number, y: number): void\n  function scrollTo(options: GridScrollOptions): void\n  function scrollTo(leftOrOptions: number | GridScrollOptions, top?: number) {\n    const header$ = unref(headerRef)\n    const body$ = unref(bodyRef)\n\n    if (!header$ || !body$) return\n\n    if (isObject(leftOrOptions)) {\n      header$.scrollToLeft(leftOrOptions.scrollLeft)\n      body$.scrollTo(leftOrOptions)\n    } else {\n      header$.scrollToLeft(leftOrOptions)\n      body$.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top,\n      })\n    }\n  }\n\n  function scrollToTop(scrollTop: number) {\n    unref(bodyRef)?.scrollTo({\n      scrollTop,\n    })\n  }\n\n  function scrollToRow(row: number, strategy: ScrollStrategy) {\n    unref(bodyRef)?.scrollToItem(row, 1, strategy)\n  }\n\n  function forceUpdate() {\n    unref(bodyRef)?.$forceUpdate()\n    unref(headerRef)?.$forceUpdate()\n  }\n\n  return {\n    bodyRef,\n    forceUpdate,\n    fixedRowHeight,\n    gridHeight,\n    hasHeader,\n    headerHeight,\n    headerRef,\n    totalHeight,\n\n    itemKey,\n    onItemRendered,\n    resetAfterRowIndex,\n    scrollTo,\n    scrollToTop,\n    scrollToRow,\n  }\n}\n\nconst TableGrid = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2GridProps,\n  setup(props, { slots, expose }) {\n    const { ns } = inject(TableV2InjectionKey)!\n\n    const {\n      bodyRef,\n      fixedRowHeight,\n      gridHeight,\n      hasHeader,\n      headerRef,\n      headerHeight,\n      totalHeight,\n\n      forceUpdate,\n      itemKey,\n      onItemRendered,\n      resetAfterRowIndex,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n    } = useTableGrid(props)\n\n    expose({\n      forceUpdate,\n      /**\n       * @description fetch total height\n       */\n      totalHeight,\n      /**\n       * @description scroll to a position\n       */\n      scrollTo,\n      /**\n       * @description scroll vertically to position y\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n      /**\n       * @description reset rendered state after row index\n       */\n      resetAfterRowIndex,\n    })\n\n    const getColumnWidth = () => props.bodyWidth\n\n    return () => {\n      const {\n        cache,\n        columns,\n        data,\n        fixedData,\n        useIsScrolling,\n        scrollbarAlwaysOn,\n        scrollbarEndGap,\n        scrollbarStartGap,\n        style,\n        rowHeight,\n        bodyWidth,\n        estimatedRowHeight,\n        headerWidth,\n        height,\n        width,\n\n        getRowHeight,\n        onScroll,\n      } = props\n\n      const isDynamicRowEnabled = isNumber(estimatedRowHeight)\n      const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid\n      const _headerHeight = unref(headerHeight)\n\n      return (\n        <div role=\"table\" class={[ns.e('table'), props.class]} style={style}>\n          <Grid\n            ref={bodyRef}\n            // special attrs\n            data={data}\n            useIsScrolling={useIsScrolling}\n            itemKey={itemKey}\n            // column attrs\n            columnCache={0}\n            columnWidth={isDynamicRowEnabled ? getColumnWidth : bodyWidth}\n            totalColumn={1}\n            // row attrs\n            totalRow={data.length}\n            rowCache={cache}\n            rowHeight={isDynamicRowEnabled ? getRowHeight : rowHeight}\n            // DOM attrs\n            width={width}\n            height={unref(gridHeight)}\n            class={ns.e('body')}\n            role=\"rowgroup\"\n            scrollbarStartGap={scrollbarStartGap}\n            scrollbarEndGap={scrollbarEndGap}\n            scrollbarAlwaysOn={scrollbarAlwaysOn}\n            // handlers\n            onScroll={onScroll}\n            onItemRendered={onItemRendered}\n            perfMode={false}\n          >\n            {{\n              default: (params: GridDefaultSlotParams) => {\n                const rowData = data[params.rowIndex]\n                return slots.row?.({\n                  ...params,\n                  columns,\n                  rowData,\n                })\n              },\n            }}\n          </Grid>\n          {unref(hasHeader) && (\n            <Header\n              ref={headerRef}\n              class={ns.e('header-wrapper')}\n              columns={columns}\n              headerData={data}\n              headerHeight={props.headerHeight}\n              fixedHeaderData={fixedData}\n              rowWidth={headerWidth}\n              rowHeight={rowHeight}\n              width={width}\n              height={Math.min(_headerHeight + unref(fixedRowHeight), height)}\n            >\n              {{\n                dynamic: slots.header,\n                fixed: slots.row,\n              }}\n            </Header>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableGrid\n\nexport type TableGridRowSlotParams = {\n  columns: TableV2GridProps['columns']\n  rowData: any\n} & GridDefaultSlotParams\n\nexport type TableGridInstance = InstanceType<typeof TableGrid> &\n  UnwrapRef<{\n    forceUpdate: () => void\n    /**\n     * @description fetch total height\n     */\n    totalHeight: number\n\n    /**\n     * @description scrollTo a position\n     * @param { number | ScrollToOptions } arg1\n     * @param { number } arg2\n     */\n    scrollTo(leftOrOptions: number | GridScrollOptions, top?: number): void\n\n    /**\n     * @description scroll vertically to position y\n     */\n    scrollToTop(scrollTop: number): void\n    /**\n     * @description scroll to a given row\n     * @params row {Number} which row to scroll to\n     * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n     */\n    scrollToRow(row: number, strategy: ScrollStrategy): void\n    /**\n     * @description reset rendered state after row index\n     * @param { number } rowIndex\n     * @param { boolean } forceUpdate\n     */\n    resetAfterRowIndex: ResetAfterIndex\n  }>\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}