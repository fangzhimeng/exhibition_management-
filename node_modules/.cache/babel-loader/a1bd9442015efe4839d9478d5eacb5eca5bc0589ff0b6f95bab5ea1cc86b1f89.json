{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$1 = require('../../scrollbar/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../../utils/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar index = require('../../icon/index.js');\nvar node = require('./node2.js');\nvar types = require('./types.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index$2 = require('../../../hooks/use-namespace/index.js');\nvar index$3 = require('../../../hooks/use-locale/index.js');\nvar rand = require('../../../utils/rand.js');\nconst _sfc_main = vue.defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    Loading: iconsVue.Loading,\n    ElIcon: index.ElIcon,\n    ElScrollbar: index$1.ElScrollbar,\n    ElCascaderNode: node[\"default\"]\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const instance = vue.getCurrentInstance();\n    const ns = index$2.useNamespace(\"cascader-menu\");\n    const {\n      t\n    } = index$3.useLocale();\n    const id = rand.generateId();\n    let activeNode = null;\n    let hoverTimer = null;\n    const panel = vue.inject(types.CASCADER_PANEL_INJECTION_KEY);\n    const hoverZone = vue.ref(null);\n    const isEmpty = vue.computed(() => !props.nodes.length);\n    const isLoading = vue.computed(() => !panel.initialLoaded);\n    const menuId = vue.computed(() => `cascader-menu-${id}-${props.index}`);\n    const handleExpand = e => {\n      activeNode = e.target;\n    };\n    const handleMouseMove = e => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        const el = instance.vnode.el;\n        const {\n          left\n        } = el.getBoundingClientRect();\n        const {\n          offsetWidth,\n          offsetHeight\n        } = el;\n        const startX = e.clientX - left;\n        const top = activeNode.offsetTop;\n        const bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `;\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_cascader_node = vue.resolveComponent(\"el-cascader-node\");\n  const _component_loading = vue.resolveComponent(\"loading\");\n  const _component_el_icon = vue.resolveComponent(\"el-icon\");\n  const _component_el_scrollbar = vue.resolveComponent(\"el-scrollbar\");\n  return vue.openBlock(), vue.createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    class: vue.normalizeClass(_ctx.ns.b()),\n    \"wrap-class\": _ctx.ns.e(\"wrap\"),\n    \"view-class\": [_ctx.ns.e(\"list\"), _ctx.ns.is(\"empty\", _ctx.isEmpty)],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    default: vue.withCtx(() => {\n      var _a;\n      return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.nodes, node => {\n        return vue.openBlock(), vue.createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 0,\n        class: vue.normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [vue.createVNode(_component_el_icon, {\n        size: \"14\",\n        class: vue.normalizeClass(_ctx.ns.is(\"loading\"))\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(_component_loading)]),\n        _: 1\n      }, 8, [\"class\"]), vue.createTextVNode(\" \" + vue.toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)], 2)) : _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 1,\n        class: vue.normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, vue.toDisplayString(_ctx.t(\"el.cascader.noData\")), 3)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (vue.openBlock(), vue.createElementBlock(\"svg\", {\n        key: 2,\n        ref: \"hoverZone\",\n        class: vue.normalizeClass(_ctx.ns.e(\"hover-zone\"))\n      }, null, 2)) : vue.createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"wrap-class\", \"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\nvar ElCascaderMenu = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/menu.vue\"]]);\nexports[\"default\"] = ElCascaderMenu;","map":{"version":3,"names":["_sfc_main","vue","defineComponent","name","components","Loading","iconsVue","ElIcon","index","ElScrollbar","index$1","ElCascaderNode","node","props","nodes","type","Array","required","Number","setup","instance","getCurrentInstance","ns","index$2","useNamespace","t","index$3","useLocale","id","rand","generateId","activeNode","hoverTimer","panel","inject","types","CASCADER_PANEL_INJECTION_KEY","hoverZone","ref","isEmpty","computed","length","isLoading","initialLoaded","menuId","handleExpand","e","target","handleMouseMove","isHoverMenu","value","contains","clearHoverTimer","el","vnode","left","getBoundingClientRect","offsetWidth","offsetHeight","startX","clientX","top","offsetTop","bottom","innerHTML","window","setTimeout","clearHoverZone","config","hoverThreshold","clearTimeout","createBlock","_component_el_scrollbar","key","_ctx","tag","role","class","normalizeClass","b","is","onMousemove","onMouseleave","_a","openBlock","createElementBlock","Fragment","renderList","_component_el_cascader_node","uid","createVNode","_component_el_icon","size","default","withCtx","_","createTextVNode","toDisplayString"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    :class=\"ns.b()\"\n    :wrap-class=\"ns.e('wrap')\"\n    :view-class=\"[ns.e('list'), ns.is('empty', isEmpty)]\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" :class=\"ns.e('empty-text')\">\n      <el-icon size=\"14\" :class=\"ns.is('loading')\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" :class=\"ns.e('empty-text')\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      :class=\"ns.e('hover-zone')\"\n    />\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { generateId } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const ns = useNamespace('cascader-menu')\n\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<number> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const isLoading = computed(() => !panel.initialLoaded)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;AAiDA,MAAKA,SAAA,GAAaC,GAAA,CAAAC,eAAa;EAC7BC,IAAM;EAENC,UAAY;IAAAC,OAAA,EACVC,QAAA,CAAAD,OAAA;IAAAE,MAAA,EACAC,KAAA,CAAAD,MAAA;IAAAE,WAAA,EACAC,OAAA,CAAAD,WAAA;IAAAE,cAAA,EACAC,IAAA;EAAA,CACF;EAEAC,KAAO;IACLC,KAAO;MACLC,IAAM,EAAAC,KAAA;MACNC,QAAU;IAAA,CACZ;IACAT,KAAO;MACLO,IAAM,EAAAG,MAAA;MACND,QAAU;IAAA;EACZ,CACF;EAEAE,MAAMN,KAAO;IACX,MAAMO,QAAA,GAAWnB,GAAA,CAAAoB,kBAAmB;IAC9B,MAAAC,EAAA,GAAKC,OAAA,CAAAC,YAAA,CAAa,eAAe;IAEjC;MAAEC;IAAA,IAAMC,OAAA,CAAAC,SAAU;IACxB,MAAMC,EAAA,GAAKC,IAAA,CAAAC,UAAW;IACtB,IAAIC,UAAoC;IACxC,IAAIC,UAA+B;IAE7B,MAAAC,KAAA,GAAQhC,GAAA,CAAAiC,MAAA,CAAOC,KAAA,CAAAC,4BAA4B;IAE3C,MAAAC,SAAA,GAAYpC,GAAA,CAAAqC,GAAA,CAA0B,IAAI;IAEhD,MAAMC,OAAA,GAAUtC,GAAA,CAAAuC,QAAS,OAAM,CAAC3B,KAAA,CAAMC,KAAA,CAAM2B,MAAM;IAClD,MAAMC,SAAY,GAAAzC,GAAA,CAAAuC,QAAA,CAAS,MAAM,CAACP,KAAA,CAAMU,aAAa;IACrD,MAAMC,MAAA,GAAS3C,GAAA,CAAAuC,QAAS,OAAuB,iBAAAZ,EAAA,IAAMf,KAAA,CAAML,KAAO;IAE5D,MAAAqC,YAAA,GAAgBC,CAAkB;MACtCf,UAAA,GAAae,CAAE,CAAAC,MAAA;IAAA,CACjB;IAEM,MAAAC,eAAA,GAAmBF,CAAkB;MACzC,IAAI,CAACb,KAAM,CAAAgB,WAAA,IAAe,CAAClB,UAAA,IAAc,CAACM,SAAU,CAAAa,KAAA,EAAO;MAE3D,IAAInB,UAAW,CAAAoB,QAAA,CAASL,CAAE,CAAAC,MAAqB,CAAG;QAChCK,eAAA;QAEV,MAAAC,EAAA,GAAKjC,QAAA,CAASkC,KAAM,CAAAD,EAAA;QACpB;UAAEE;QAAS,IAAAF,EAAA,CAAGG,qBAAsB;QACpC;UAAEC,WAAA;UAAaC;QAAiB,IAAAL,EAAA;QAChC,MAAAM,MAAA,GAASb,CAAA,CAAEc,OAAU,GAAAL,IAAA;QAC3B,MAAMM,GAAA,GAAM9B,UAAW,CAAA+B,SAAA;QACjB,MAAAC,MAAA,GAASF,GAAA,GAAM9B,UAAW,CAAA2B,YAAA;QAEhCrB,SAAA,CAAUa,KAAA,CAAMc,SAAY;AAAA,uEACmCL,MAAA,IAAUE,GAAA,KAAQJ,WAAkB,OAAAI,GAAA;AAAA,uEACpCF,MAAA,IAAUI,MAAW,KAAAN,WAAA,IAAeC,YAAiB,KAAAK,MAAA;AAAA;MAAA,CAEtH,UAAW,CAAC/B,UAAY;QACtBA,UAAA,GAAaiC,MAAO,CAAAC,UAAA,CAClBC,cACA,EAAAlC,KAAA,CAAMmC,MAAA,CAAOC,cACf;MAAA;IACF,CACF;IAEA,MAAMjB,eAAA,GAAkBA,CAAA,KAAM;MAC5B,IAAI,CAACpB,UAAA,EAAY;MACjBsC,YAAA,CAAatC,UAAU;MACVA,UAAA;IAAA,CACf;IAEA,MAAMmC,cAAA,GAAiBA,CAAA,KAAM;MAC3B,IAAI,CAAC9B,SAAU,CAAAa,KAAA,EAAO;MACtBb,SAAA,CAAUa,KAAA,CAAMc,SAAY;MACZZ,eAAA;IAAA,CAClB;IACO;MACL9B,EAAA;MACAW,KAAA;MACAI,SAAA;MACAE,OAAA;MACAG,SAAA;MACAE,MAAA;MACAnB,CAAA;MACAoB,YAAA;MACAG,eAAA;MACAmB;IAAA,CACF;EAAA;AAEJ,CAAC;;;;;;0BA3IClE,GAAA,CAAAsE,WA+Be,CAAAC,uBAAA;IA9BZC,GAAK,EAAAC,IAAA,CAAA9B,MAAA;IACN+B,GAAI;IACJC,IAAK;IACJC,KAAA,EAAK5E,GAAA,CAAA6E,cAAE,CAAAJ,IAAA,CAAApD,EAAA,CAAGyD,CAAC;IACX,cAAYL,IAAA,CAAApD,EAAA,CAAGwB,CAAC;IAChB,cAAU,CAAG4B,IAAG,CAAApD,EAAA,CAAAwB,CAAA,CAAC,SAAU4B,IAAG,CAAApD,EAAA,CAAA0D,EAAA,CAAE,SAAUN,IAAO,CAAAnC,OAAA;IACjD0C,WAAW,EAAAP,IAAA,CAAA1B,eAAA;IACXkC,YAAY,EAAAR,IAAA,CAAAP;EAAA;yBAGX,MAAqB;MAAA,IAAAgB,EAAA;eAKrBlF,GAAA,CAAAmF,SAJW,QAAAnF,GAAA,CAAAoF,kBAAA,CAAApF,GAAA,CAAAqF,QAAA,QAAArF,GAAA,CAAAsF,UAAA,CAAAb,IAAA,CAAA5D,KAAA,EAAAF,IAAA;QACV,OAAAX,GAAA,CAAAmF,SAAA,IAAAnF,GAAA,CAAAsE,WAAA,CAAAiB,2BAAA;UACSf,GAAA,EAAA7D,IAAA,CAAA6E,GAAA;UACD7E,IAAA;UAAA,WAAA8D,IAAA,CAAA9B,MAAA;;QAEA,8BAKL;MAAA,WALiB8B,IAAK,CAAAhC,SAAA,IAAAzC,GAAA,CAAAmF,SAAA,IAAMnF,GAAA,CAAAoF,kBAAA;QAAAZ,GAAA;QAGtBI,KAAA,EAAA5E,GAAA,CAAA6E,cAAA,CAAAJ,IAAA,CAAApD,EAAA,CAAAwB,CAAA;MAAA,GAFI,CAAM7C,GAAA,CAAAyF,WAAO,CAAAC,kBAAG,EAAE;QAAAC,IAAA;iCACnB,CAAAlB,IAAA,CAAApD,EAAA,CAAA0D,EAAA;MAAA;QAAAa,OAAA,EAAA5F,GAAA,CAAA6F,OAAA,Q;QACHC,CAAA;MACN,kBAIA9F,GAAA,CAAA+F,eAAA,OAAA/F,GAAA,CAAAgG,eAAA,CAAAvB,IAAA,CAAAjD,CAAA,6BAFyB,QAAAiD,IAAA,CAAAnC,OAAA,IAAAtC,GAAA,CAAAmF,SAAM,IAAAnF,GAAA,CAAAoF,kBAAA;QAAAZ,GAAA;QAOnCI,KAAA,EAAA5E,GAAA,CAAA6E,cAAA,CAAAJ,IAAA,CAAApD,EAAA,CAAAwB,CAAA;OAFI,EAAA7C,GAAA,CAAAgG,eAAA,CAAAvB,IAAA,CAAAjD,CAAA,iCAAA0D,EAAA,GAAAT,IAAA,CAAAzC,KAAA,qBAAAkD,EAAA,CAAAlC,WAAA,KAAAhD,GAAA,CAAAmF,SAAA,IAAAnF,GAAA,CAAAoF,kBAAA;QACHZ,GAAA,EAAK,CAAE;QAAInC,GAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}