{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../hooks/index.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst _sfc_main = vue.defineComponent({\n  name: \"ElTreeNodeContent\",\n  props: {\n    node: {\n      type: Object,\n      required: true\n    },\n    renderContent: Function\n  },\n  setup(props) {\n    const ns = index.useNamespace(\"tree\");\n    const nodeInstance = vue.inject(\"NodeInstance\");\n    const tree = vue.inject(\"RootTree\");\n    return () => {\n      const node = props.node;\n      const {\n        data,\n        store\n      } = node;\n      return props.renderContent ? props.renderContent(vue.h, {\n        _self: nodeInstance,\n        node,\n        data,\n        store\n      }) : vue.renderSlot(tree.ctx.slots, \"default\", {\n        node,\n        data\n      }, () => [vue.h(\"span\", {\n        class: ns.be(\"node\", \"label\")\n      }, [node.label])]);\n    };\n  }\n});\nvar NodeContent = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree-node-content.vue\"]]);\nexports[\"default\"] = NodeContent;","map":{"version":3,"names":["_sfc_main","vue","defineComponent","name","props","node","type","Object","required","renderContent","Function","setup","ns","index","useNamespace","nodeInstance","inject","tree","data","store","h","_self","renderSlot","ctx","slots","class","be","label"],"sources":["../../../../../../packages/components/tree/src/tree-node-content.vue"],"sourcesContent":["<script lang=\"ts\">\n// @ts-nocheck\nimport { defineComponent, h, inject, renderSlot } from 'vue'\n\nimport { useNamespace } from '@element-plus/hooks'\nimport type { ComponentInternalInstance } from 'vue'\nimport type { RootTreeType } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNodeContent',\n  props: {\n    node: {\n      type: Object,\n      required: true,\n    },\n    renderContent: Function,\n  },\n  setup(props) {\n    const ns = useNamespace('tree')\n    const nodeInstance = inject<ComponentInternalInstance>('NodeInstance')\n    const tree = inject<RootTreeType>('RootTree')\n    return () => {\n      const node = props.node\n      const { data, store } = node\n      return props.renderContent\n        ? props.renderContent(h, { _self: nodeInstance, node, data, store })\n        : renderSlot(tree.ctx.slots, 'default', { node, data }, () => [\n            h('span', { class: ns.be('node', 'label') }, [node.label]),\n          ])\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;AAQA,MAAKA,SAAA,GAAaC,GAAA,CAAAC,eAAa;EAC7BC,IAAM;EACNC,KAAO;IACLC,IAAM;MACJC,IAAM,EAAAC,MAAA;MACNC,QAAU;IAAA,CACZ;IACAC,aAAe,EAAAC;EAAA,CACjB;EACAC,MAAMP,KAAO;IACL,MAAAQ,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,MAAM;IACxB,MAAAC,YAAA,GAAed,GAAA,CAAAe,MAAA,CAAkC,cAAc;IAC/D,MAAAC,IAAA,GAAOhB,GAAA,CAAAe,MAAA,CAAqB,UAAU;IAC5C,OAAO,MAAM;MACX,MAAMX,IAAA,GAAOD,KAAM,CAAAC,IAAA;MACb;QAAEa,IAAA;QAAMC;MAAU,IAAAd,IAAA;MACjB,OAAAD,KAAA,CAAMK,aAAA,GACTL,KAAM,CAAAK,aAAA,CAAcR,GAAA,CAAAmB,CAAA,EAAG;QAAEC,KAAA,EAAON,YAAc;QAAAV,IAAA;QAAMa,IAAM;QAAAC;MAAA,CAAO,CACjE,GAAAlB,GAAA,CAAAqB,UAAA,CAAWL,IAAA,CAAKM,GAAI,CAAAC,KAAA,EAAO,WAAW;QAAEnB,IAAA;QAAMa;MAAK,GAAG,MAAM,CAC1DjB,GAAA,CAAAmB,CAAE,SAAQ;QAAEK,KAAA,EAAOb,EAAG,CAAAc,EAAA,CAAG,MAAQ,SAAO;MAAE,GAAG,CAACrB,IAAA,CAAKsB,KAAK,CAAC,EAC1D;IAAA,CACP;EAAA;AAEJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}