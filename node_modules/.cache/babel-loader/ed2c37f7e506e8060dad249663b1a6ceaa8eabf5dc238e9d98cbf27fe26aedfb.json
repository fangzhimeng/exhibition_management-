{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nrequire('../../../../directives/index.js');\nvar index$1 = require('../../../scrollbar/index.js');\nvar index$2 = require('../../../icon/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nrequire('../../../../hooks/index.js');\nrequire('../../../../utils/index.js');\nvar constants = require('../constants.js');\nvar utils = require('../utils.js');\nvar basicTimeSpinner = require('../props/basic-time-spinner.js');\nvar useTimePicker = require('../composables/use-time-picker.js');\nvar pluginVue_exportHelper = require('../../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../../hooks/use-namespace/index.js');\nvar style = require('../../../../utils/dom/style.js');\nvar index$3 = require('../../../../directives/repeat-click/index.js');\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onMouseenter\"];\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  __name: \"basic-time-spinner\",\n  props: basicTimeSpinner.basicTimeSpinnerProps,\n  emits: [\"change\", \"select-range\", \"set-option\"],\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = index.useNamespace(\"time\");\n    const {\n      getHoursList,\n      getMinutesList,\n      getSecondsList\n    } = useTimePicker.getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);\n    let isScrolling = false;\n    const currentScrollbar = vue.ref();\n    const listHoursRef = vue.ref();\n    const listMinutesRef = vue.ref();\n    const listSecondsRef = vue.ref();\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    const spinnerItems = vue.computed(() => {\n      return props.showSeconds ? constants.timeUnits : constants.timeUnits.slice(0, 2);\n    });\n    const timePartials = vue.computed(() => {\n      const {\n        spinnerDate\n      } = props;\n      const hours = spinnerDate.hour();\n      const minutes = spinnerDate.minute();\n      const seconds = spinnerDate.second();\n      return {\n        hours,\n        minutes,\n        seconds\n      };\n    });\n    const timeList = vue.computed(() => {\n      const {\n        hours,\n        minutes\n      } = vue.unref(timePartials);\n      return {\n        hours: getHoursList(props.role),\n        minutes: getMinutesList(hours, props.role),\n        seconds: getSecondsList(hours, minutes, props.role)\n      };\n    });\n    const arrowControlTimeList = vue.computed(() => {\n      const {\n        hours,\n        minutes,\n        seconds\n      } = vue.unref(timePartials);\n      return {\n        hours: utils.buildTimeList(hours, 23),\n        minutes: utils.buildTimeList(minutes, 59),\n        seconds: utils.buildTimeList(seconds, 59)\n      };\n    });\n    const debouncedResetScroll = lodashUnified.debounce(type => {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    const getAmPmFlag = hour => {\n      const shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      const isCapital = props.amPmMode === \"A\";\n      let content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n    const emitSelectRange = type => {\n      let range;\n      switch (type) {\n        case \"hours\":\n          range = [0, 2];\n          break;\n        case \"minutes\":\n          range = [3, 5];\n          break;\n        case \"seconds\":\n          range = [6, 8];\n          break;\n      }\n      const [left, right] = range;\n      emit(\"select-range\", left, right);\n      currentScrollbar.value = type;\n    };\n    const adjustCurrentSpinner = type => {\n      adjustSpinner(type, vue.unref(timePartials)[type]);\n    };\n    const adjustSpinners = () => {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n    const getScrollbarElement = el => el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return;\n      const scrollbar = vue.unref(listRefsMap[type]);\n      if (scrollbar && scrollbar.$el) {\n        getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n    const typeItemHeight = type => {\n      const scrollbar = vue.unref(listRefsMap[type]);\n      const listItem = scrollbar == null ? void 0 : scrollbar.$el.querySelector(\"li\");\n      if (listItem) {\n        return Number.parseFloat(style.getStyle(listItem, \"height\")) || 0;\n      }\n      return 0;\n    };\n    const onIncrement = () => {\n      scrollDown(1);\n    };\n    const onDecrement = () => {\n      scrollDown(-1);\n    };\n    const scrollDown = step => {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n      const label = currentScrollbar.value;\n      const now = vue.unref(timePartials)[label];\n      const total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      const next = findNextUnDisabled(label, now, step, total);\n      modifyDateField(label, next);\n      adjustSpinner(label, next);\n      vue.nextTick(() => emitSelectRange(label));\n    };\n    const findNextUnDisabled = (type, now, step, total) => {\n      let next = (now + step + total) % total;\n      const list = vue.unref(timeList)[type];\n      while (list[next] && next !== now) {\n        next = (next + step + total) % total;\n      }\n      return next;\n    };\n    const modifyDateField = (type, value) => {\n      const list = vue.unref(timeList)[type];\n      const isDisabled = list[value];\n      if (isDisabled) return;\n      const {\n        hours,\n        minutes,\n        seconds\n      } = vue.unref(timePartials);\n      let changeTo;\n      switch (type) {\n        case \"hours\":\n          changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);\n          break;\n        case \"minutes\":\n          changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);\n          break;\n        case \"seconds\":\n          changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);\n          break;\n      }\n      emit(\"change\", changeTo);\n    };\n    const handleClick = (type, {\n      value,\n      disabled\n    }) => {\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n    const handleScroll = type => {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      const value = Math.min(Math.round((getScrollbarElement(vue.unref(listRefsMap[type]).$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n    const scrollBarHeight = type => {\n      return vue.unref(listRefsMap[type]).$el.offsetHeight;\n    };\n    const bindScrollEvent = () => {\n      const bindFunction = type => {\n        const scrollbar = vue.unref(listRefsMap[type]);\n        if (scrollbar && scrollbar.$el) {\n          getScrollbarElement(scrollbar.$el).onscroll = () => {\n            handleScroll(type);\n          };\n        }\n      };\n      bindFunction(\"hours\");\n      bindFunction(\"minutes\");\n      bindFunction(\"seconds\");\n    };\n    vue.onMounted(() => {\n      vue.nextTick(() => {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type].value = scrollbar;\n    };\n    emit(\"set-option\", [`${props.role}_scrollDown`, scrollDown]);\n    emit(\"set-option\", [`${props.role}_emitSelectRange`, emitSelectRange]);\n    vue.watch(() => props.spinnerDate, () => {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        class: vue.normalizeClass([vue.unref(ns).b(\"spinner\"), {\n          \"has-seconds\": _ctx.showSeconds\n        }])\n      }, [!_ctx.arrowControl ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, {\n        key: 0\n      }, vue.renderList(vue.unref(spinnerItems), item => {\n        return vue.openBlock(), vue.createBlock(vue.unref(index$1.ElScrollbar), {\n          key: item,\n          ref_for: true,\n          ref: scrollbar => setRef(scrollbar, item),\n          class: vue.normalizeClass(vue.unref(ns).be(\"spinner\", \"wrapper\")),\n          \"wrap-style\": \"max-height: inherit;\",\n          \"view-class\": vue.unref(ns).be(\"spinner\", \"list\"),\n          noresize: \"\",\n          tag: \"ul\",\n          onMouseenter: $event => emitSelectRange(item),\n          onMousemove: $event => adjustCurrentSpinner(item)\n        }, {\n          default: vue.withCtx(() => [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(timeList)[item], (disabled, key) => {\n            return vue.openBlock(), vue.createElementBlock(\"li\", {\n              key,\n              class: vue.normalizeClass([vue.unref(ns).be(\"spinner\", \"item\"), vue.unref(ns).is(\"active\", key === vue.unref(timePartials)[item]), vue.unref(ns).is(\"disabled\", disabled)]),\n              onClick: $event => handleClick(item, {\n                value: key,\n                disabled\n              })\n            }, [item === \"hours\" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n              key: 0\n            }, [vue.createTextVNode(vue.toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + vue.toDisplayString(getAmPmFlag(key)), 1)], 64)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n              key: 1\n            }, [vue.createTextVNode(vue.toDisplayString((\"0\" + key).slice(-2)), 1)], 64))], 10, _hoisted_1);\n          }), 128))]),\n          _: 2\n        }, 1032, [\"class\", \"view-class\", \"onMouseenter\", \"onMousemove\"]);\n      }), 128)) : vue.createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, {\n        key: 1\n      }, vue.renderList(vue.unref(spinnerItems), item => {\n        return vue.openBlock(), vue.createElementBlock(\"div\", {\n          key: item,\n          class: vue.normalizeClass([vue.unref(ns).be(\"spinner\", \"wrapper\"), vue.unref(ns).is(\"arrow\")]),\n          onMouseenter: $event => emitSelectRange(item)\n        }, [vue.withDirectives((vue.openBlock(), vue.createBlock(vue.unref(index$2.ElIcon), {\n          class: vue.normalizeClass([\"arrow-up\", vue.unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.ArrowUp))]),\n          _: 1\n        }, 8, [\"class\"])), [[vue.unref(index$3.vRepeatClick), onDecrement]]), vue.withDirectives((vue.openBlock(), vue.createBlock(vue.unref(index$2.ElIcon), {\n          class: vue.normalizeClass([\"arrow-down\", vue.unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.ArrowDown))]),\n          _: 1\n        }, 8, [\"class\"])), [[vue.unref(index$3.vRepeatClick), onIncrement]]), vue.createElementVNode(\"ul\", {\n          class: vue.normalizeClass(vue.unref(ns).be(\"spinner\", \"list\"))\n        }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(arrowControlTimeList)[item], (time, key) => {\n          return vue.openBlock(), vue.createElementBlock(\"li\", {\n            key,\n            class: vue.normalizeClass([vue.unref(ns).be(\"spinner\", \"item\"), vue.unref(ns).is(\"active\", time === vue.unref(timePartials)[item]), vue.unref(ns).is(\"disabled\", vue.unref(timeList)[item][time])])\n          }, [typeof time === \"number\" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n            key: 0\n          }, [item === \"hours\" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n            key: 0\n          }, [vue.createTextVNode(vue.toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + vue.toDisplayString(getAmPmFlag(time)), 1)], 64)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n            key: 1\n          }, [vue.createTextVNode(vue.toDisplayString((\"0\" + time).slice(-2)), 1)], 64))], 64)) : vue.createCommentVNode(\"v-if\", true)], 2);\n        }), 128))], 2)], 42, _hoisted_2);\n      }), 128)) : vue.createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\nvar TimeSpinner = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue\"]]);\nexports[\"default\"] = TimeSpinner;","map":{"version":3,"names":["ns","index","useNamespace","getHoursList","getMinutesList","getSecondsList","useTimePicker","getTimeLists","props","disabledHours","disabledMinutes","disabledSeconds","isScrolling","currentScrollbar","vue","ref","listHoursRef","listMinutesRef","listSecondsRef","listRefsMap","hours","minutes","seconds","spinnerItems","computed","showSeconds","constants","timeUnits","slice","timePartials","spinnerDate","hour","minute","second","timeList","unref","role","arrowControlTimeList","utils","buildTimeList","debouncedResetScroll","lodashUnified","debounce","type","adjustCurrentSpinner","getAmPmFlag","shouldShowAmPm","amPmMode","isCapital","content","toUpperCase","emitSelectRange","range","left","right","emit","value","adjustSpinner","adjustSpinners","getScrollbarElement","el","querySelector","namespace","arrowControl","scrollbar","$el","scrollTop","Math","max","typeItemHeight","listItem","Number","parseFloat","style","getStyle","onIncrement","scrollDown","onDecrement","step","label","now","total","next","findNextUnDisabled","modifyDateField","nextTick","list","isDisabled","changeTo","handleClick","disabled","handleScroll","min","round","scrollBarHeight","offsetHeight","bindScrollEvent","bindFunction","onscroll","onMounted","setRef","watch"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b('spinner'), { 'has-seconds': showSeconds }]\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scrollbar: unknown) => setRef(scrollbar as any, item)\"\n        :class=\"ns.be('spinner', 'wrapper')\"\n        wrap-style=\"max-height: inherit;\"\n        :view-class=\"ns.be('spinner', 'list')\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in timeList[item]\"\n          :key=\"key\"\n          :class=\"[\n            ns.be('spinner', 'item'),\n            ns.is('active', key === timePartials[item]),\n            ns.is('disabled', disabled),\n          ]\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :class=\"[ns.be('spinner', 'wrapper'), ns.is('arrow')]\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecrement\"\n          :class=\"['arrow-up', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncrement\"\n          :class=\"['arrow-down', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul :class=\"ns.be('spinner', 'list')\">\n          <li\n            v-for=\"(time, key) in arrowControlTimeList[item]\"\n            :key=\"key\"\n            :class=\"[\n              ns.be('spinner', 'item'),\n              ns.is('active', time === timePartials[item]),\n              ns.is('disabled', timeList[item][time!]),\n            ]\"\n          >\n            <template v-if=\"typeof time === 'number'\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, unref, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { vRepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { getStyle } from '@element-plus/utils'\nimport { timeUnits } from '../constants'\nimport { buildTimeList } from '../utils'\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner'\nimport { getTimeLists } from '../composables/use-time-picker'\n\nimport type { Ref } from 'vue'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type { TimeUnit } from '../constants'\nimport type { TimeList } from '../utils'\n\nconst props = defineProps(basicTimeSpinnerProps)\nconst emit = defineEmits(['change', 'select-range', 'set-option'])\n\nconst ns = useNamespace('time')\n\nconst { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n  props.disabledHours,\n  props.disabledMinutes,\n  props.disabledSeconds\n)\n\n// data\nlet isScrolling = false\n\nconst currentScrollbar = ref<TimeUnit>()\nconst listHoursRef = ref<ScrollbarInstance>()\nconst listMinutesRef = ref<ScrollbarInstance>()\nconst listSecondsRef = ref<ScrollbarInstance>()\nconst listRefsMap: Record<TimeUnit, Ref<ScrollbarInstance | undefined>> = {\n  hours: listHoursRef,\n  minutes: listMinutesRef,\n  seconds: listSecondsRef,\n}\n\n// computed\nconst spinnerItems = computed(() => {\n  return props.showSeconds ? timeUnits : timeUnits.slice(0, 2)\n})\n\nconst timePartials = computed<Record<TimeUnit, number>>(() => {\n  const { spinnerDate } = props\n  const hours = spinnerDate.hour()\n  const minutes = spinnerDate.minute()\n  const seconds = spinnerDate.second()\n  return { hours, minutes, seconds }\n})\n\nconst timeList = computed(() => {\n  const { hours, minutes } = unref(timePartials)\n  return {\n    hours: getHoursList(props.role),\n    minutes: getMinutesList(hours, props.role),\n    seconds: getSecondsList(hours, minutes, props.role),\n  }\n})\n\nconst arrowControlTimeList = computed<Record<TimeUnit, TimeList>>(() => {\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  return {\n    hours: buildTimeList(hours, 23),\n    minutes: buildTimeList(minutes, 59),\n    seconds: buildTimeList(seconds, 59),\n  }\n})\n\nconst debouncedResetScroll = debounce((type) => {\n  isScrolling = false\n  adjustCurrentSpinner(type)\n}, 200)\n\nconst getAmPmFlag = (hour: number) => {\n  const shouldShowAmPm = !!props.amPmMode\n  if (!shouldShowAmPm) return ''\n  const isCapital = props.amPmMode === 'A'\n  // todo locale\n  let content = hour < 12 ? ' am' : ' pm'\n  if (isCapital) content = content.toUpperCase()\n  return content\n}\n\nconst emitSelectRange = (type: TimeUnit) => {\n  let range\n\n  switch (type) {\n    case 'hours':\n      range = [0, 2]\n      break\n    case 'minutes':\n      range = [3, 5]\n      break\n    case 'seconds':\n      range = [6, 8]\n      break\n  }\n  const [left, right] = range\n\n  emit('select-range', left, right)\n  currentScrollbar.value = type\n}\n\nconst adjustCurrentSpinner = (type: TimeUnit) => {\n  adjustSpinner(type, unref(timePartials)[type])\n}\n\nconst adjustSpinners = () => {\n  adjustCurrentSpinner('hours')\n  adjustCurrentSpinner('minutes')\n  adjustCurrentSpinner('seconds')\n}\n\nconst getScrollbarElement = (el: HTMLElement) =>\n  el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`) as HTMLElement\n\nconst adjustSpinner = (type: TimeUnit, value: number) => {\n  if (props.arrowControl) return\n  const scrollbar = unref(listRefsMap[type])\n  if (scrollbar && scrollbar.$el) {\n    getScrollbarElement(scrollbar.$el).scrollTop = Math.max(\n      0,\n      value * typeItemHeight(type)\n    )\n  }\n}\n\nconst typeItemHeight = (type: TimeUnit): number => {\n  const scrollbar = unref(listRefsMap[type])\n  const listItem = scrollbar?.$el.querySelector('li')\n  if (listItem) {\n    return Number.parseFloat(getStyle(listItem, 'height')) || 0\n  }\n  return 0\n}\n\nconst onIncrement = () => {\n  scrollDown(1)\n}\n\nconst onDecrement = () => {\n  scrollDown(-1)\n}\n\nconst scrollDown = (step: number) => {\n  if (!currentScrollbar.value) {\n    emitSelectRange('hours')\n  }\n\n  const label = currentScrollbar.value!\n  const now = unref(timePartials)[label]\n  const total = currentScrollbar.value === 'hours' ? 24 : 60\n  const next = findNextUnDisabled(label, now, step, total)\n\n  modifyDateField(label, next)\n  adjustSpinner(label, next)\n  nextTick(() => emitSelectRange(label))\n}\n\nconst findNextUnDisabled = (\n  type: TimeUnit,\n  now: number,\n  step: number,\n  total: number\n) => {\n  let next = (now + step + total) % total\n  const list = unref(timeList)[type]\n  while (list[next] && next !== now) {\n    next = (next + step + total) % total\n  }\n  return next\n}\n\nconst modifyDateField = (type: TimeUnit, value: number) => {\n  const list = unref(timeList)[type]\n  const isDisabled = list[value]\n  if (isDisabled) return\n\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  let changeTo\n  switch (type) {\n    case 'hours':\n      changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds)\n      break\n    case 'minutes':\n      changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds)\n      break\n    case 'seconds':\n      changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value)\n      break\n  }\n  emit('change', changeTo)\n}\n\nconst handleClick = (\n  type: TimeUnit,\n  { value, disabled }: { value: number; disabled: boolean }\n) => {\n  if (!disabled) {\n    modifyDateField(type, value)\n    emitSelectRange(type)\n    adjustSpinner(type, value)\n  }\n}\n\nconst handleScroll = (type: TimeUnit) => {\n  isScrolling = true\n  debouncedResetScroll(type)\n  const value = Math.min(\n    Math.round(\n      (getScrollbarElement(unref(listRefsMap[type])!.$el).scrollTop -\n        (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n        3) /\n        typeItemHeight(type)\n    ),\n    type === 'hours' ? 23 : 59\n  )\n  modifyDateField(type, value)\n}\n\nconst scrollBarHeight = (type: TimeUnit) => {\n  return unref(listRefsMap[type])!.$el.offsetHeight\n}\n\nconst bindScrollEvent = () => {\n  const bindFunction = (type: TimeUnit) => {\n    const scrollbar = unref(listRefsMap[type])\n    if (scrollbar && scrollbar.$el) {\n      getScrollbarElement(scrollbar.$el).onscroll = () => {\n        // TODO: scroll is emitted when set scrollTop programmatically\n        // should find better solutions in the future!\n        handleScroll(type)\n      }\n    }\n  }\n  bindFunction('hours')\n  bindFunction('minutes')\n  bindFunction('seconds')\n}\n\nonMounted(() => {\n  nextTick(() => {\n    !props.arrowControl && bindScrollEvent()\n    adjustSpinners()\n    // set selection on the first hour part\n    if (props.role === 'start') emitSelectRange('hours')\n  })\n})\n\nconst setRef = (scrollbar: ScrollbarInstance, type: TimeUnit) => {\n  listRefsMap[type].value = scrollbar\n}\n\nemit('set-option', [`${props.role}_scrollDown`, scrollDown])\nemit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\nwatch(\n  () => props.spinnerDate,\n  () => {\n    if (isScrolling) return\n    adjustSpinners()\n  }\n)\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}