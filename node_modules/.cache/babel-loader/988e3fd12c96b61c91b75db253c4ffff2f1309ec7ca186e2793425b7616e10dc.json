{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nvar icon = require('./icon.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar types = require('../../../utils/types.js');\nvar style = require('../../../utils/dom/style.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElIcon\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: icon.iconProps,\n  setup(__props) {\n    const props = __props;\n    const ns = index.useNamespace(\"icon\");\n    const style$1 = vue.computed(() => {\n      const {\n        size,\n        color\n      } = props;\n      if (!size && !color) return {};\n      return {\n        fontSize: types.isUndefined(size) ? void 0 : style.addUnit(size),\n        \"--color\": color\n      };\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"i\", vue.mergeProps({\n        class: vue.unref(ns).b(),\n        style: vue.unref(style$1)\n      }, _ctx.$attrs), [vue.renderSlot(_ctx.$slots, \"default\")], 16);\n    };\n  }\n});\nvar Icon = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/icon/src/icon.vue\"]]);\nexports[\"default\"] = Icon;","map":{"version":3,"names":["name","inheritAttrs","ns","index","useNamespace","style$1","vue","computed","size","color","props","fontSize","types","isUndefined","style","addUnit"],"sources":["../../../../../../packages/components/icon/src/icon.vue"],"sourcesContent":["<template>\n  <i :class=\"ns.b()\" :style=\"style\" v-bind=\"$attrs\">\n    <slot />\n  </i>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { addUnit, isUndefined } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { iconProps } from './icon'\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElIcon',\n  inheritAttrs: false,\n})\nconst props = defineProps(iconProps)\nconst ns = useNamespace('icon')\n\nconst style = computed<CSSProperties>(() => {\n  const { size, color } = props\n  if (!size && !color) return {}\n\n  return {\n    fontSize: isUndefined(size) ? undefined : addUnit(size),\n    '--color': color,\n  }\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;uCAac;EACZA,IAAM;EACNC,YAAc;AAChB;;;;;;IAEM,MAAAC,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,MAAM;IAExB,MAAAC,OAAA,GAAQC,GAAA,CAAAC,QAAA,CAAwB,MAAM;MACpC;QAAEC,IAAA;QAAMC;MAAU,IAAAC,KAAA;MACpB,KAACF,IAAA,IAAQ,CAACC,KAAA,EAAO,OAAO,EAAC;MAEtB;QACLE,QAAA,EAAUC,KAAA,CAAAC,WAAY,CAAAL,IAAI,CAAI,YAAYM,KAAA,CAAAC,OAAA,CAAQP,IAAI;QACtD,SAAW,EAAAC;MAAA,CACb;IAAA,CACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}