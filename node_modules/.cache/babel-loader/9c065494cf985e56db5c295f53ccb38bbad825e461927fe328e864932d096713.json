{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../utils/index.js');\nrequire('../../constants/index.js');\nvar aria = require('../../constants/aria.js');\nvar core = require('@vueuse/core');\nlet registeredEscapeHandlers = [];\nconst cachedHandler = e => {\n  const event = e;\n  if (event.key === aria.EVENT_CODE.esc) {\n    registeredEscapeHandlers.forEach(registeredHandler => registeredHandler(event));\n  }\n};\nconst useEscapeKeydown = handler => {\n  vue.onMounted(() => {\n    if (registeredEscapeHandlers.length === 0) {\n      document.addEventListener(\"keydown\", cachedHandler);\n    }\n    if (core.isClient) registeredEscapeHandlers.push(handler);\n  });\n  vue.onBeforeUnmount(() => {\n    registeredEscapeHandlers = registeredEscapeHandlers.filter(registeredHandler => registeredHandler !== handler);\n    if (registeredEscapeHandlers.length === 0) {\n      if (core.isClient) document.removeEventListener(\"keydown\", cachedHandler);\n    }\n  });\n};\nexports.useEscapeKeydown = useEscapeKeydown;","map":{"version":3,"names":["registeredEscapeHandlers","cachedHandler","e","event","key","aria","EVENT_CODE","esc","forEach","registeredHandler","useEscapeKeydown","handler","vue","onMounted","length","document","addEventListener","core","isClient","push","onBeforeUnmount","filter","removeEventListener"],"sources":["../../../../../packages/hooks/use-escape-keydown/index.ts"],"sourcesContent":["import { onBeforeUnmount, onMounted } from 'vue'\nimport { isClient } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\n\nlet registeredEscapeHandlers: ((e: KeyboardEvent) => void)[] = []\n\nconst cachedHandler = (e: Event) => {\n  const event = e as KeyboardEvent\n  if (event.key === EVENT_CODE.esc) {\n    registeredEscapeHandlers.forEach((registeredHandler) =>\n      registeredHandler(event)\n    )\n  }\n}\n\nexport const useEscapeKeydown = (handler: (e: KeyboardEvent) => void) => {\n  onMounted(() => {\n    if (registeredEscapeHandlers.length === 0) {\n      document.addEventListener('keydown', cachedHandler)\n    }\n    if (isClient) registeredEscapeHandlers.push(handler)\n  })\n\n  onBeforeUnmount(() => {\n    registeredEscapeHandlers = registeredEscapeHandlers.filter(\n      (registeredHandler) => registeredHandler !== handler\n    )\n    if (registeredEscapeHandlers.length === 0) {\n      if (isClient) document.removeEventListener('keydown', cachedHandler)\n    }\n  })\n}\n"],"mappings":";;;;;;;;;;;AAGA,IAAIA,wBAAwB,GAAG,EAAE;AACjC,MAAMC,aAAa,GAAIC,CAAC,IAAK;EAC3B,MAAMC,KAAK,GAAGD,CAAC;EACf,IAAIC,KAAK,CAACC,GAAG,KAAKC,IAAA,CAAAC,UAAU,CAACC,GAAG,EAAE;IAChCP,wBAAwB,CAACQ,OAAO,CAAEC,iBAAiB,IAAKA,iBAAiB,CAACN,KAAK,CAAC,CAAC;EACrF;AACA,CAAC;AACW,MAACO,gBAAgB,GAAIC,OAAO,IAAK;EAC3CC,GAAA,CAAAC,SAAS,CAAC,MAAM;IACd,IAAIb,wBAAwB,CAACc,MAAM,KAAK,CAAC,EAAE;MACzCC,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEf,aAAa,CAAC;IACzD;IACI,IAAIgB,IAAA,CAAAC,QAAQ,EACVlB,wBAAwB,CAACmB,IAAI,CAACR,OAAO,CAAC;EAC5C,CAAG,CAAC;EACFC,GAAA,CAAAQ,eAAe,CAAC,MAAM;IACpBpB,wBAAwB,GAAGA,wBAAwB,CAACqB,MAAM,CAAEZ,iBAAiB,IAAKA,iBAAiB,KAAKE,OAAO,CAAC;IAChH,IAAIX,wBAAwB,CAACc,MAAM,KAAK,CAAC,EAAE;MACzC,IAAIG,IAAA,CAAAC,QAAQ,EACVH,QAAQ,CAACO,mBAAmB,CAAC,SAAS,EAAErB,aAAa,CAAC;IAC9D;EACA,CAAG,CAAC;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}