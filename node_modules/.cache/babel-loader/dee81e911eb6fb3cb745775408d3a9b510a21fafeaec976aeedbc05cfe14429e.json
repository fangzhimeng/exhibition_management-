{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../../utils/index.js');\nvar virtualTree = require('../virtual-tree.js');\nvar useCheck = require('./useCheck.js');\nvar useFilter = require('./useFilter.js');\nvar shared = require('@vue/shared');\nfunction useTree(props, emit) {\n  const expandedKeySet = vue.ref(new Set(props.defaultExpandedKeys));\n  const currentKey = vue.ref();\n  const tree = vue.shallowRef();\n  vue.watch(() => props.currentNodeKey, key => {\n    currentKey.value = key;\n  }, {\n    immediate: true\n  });\n  vue.watch(() => props.data, data => {\n    setData(data);\n  }, {\n    immediate: true\n  });\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys\n  } = useCheck.useCheck(props, tree);\n  const {\n    doFilter,\n    hiddenNodeKeySet,\n    isForceHiddenExpandIcon\n  } = useFilter.useFilter(props, tree);\n  const valueKey = vue.computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.value) || virtualTree.TreeOptionsEnum.KEY;\n  });\n  const childrenKey = vue.computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.children) || virtualTree.TreeOptionsEnum.CHILDREN;\n  });\n  const disabledKey = vue.computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.disabled) || virtualTree.TreeOptionsEnum.DISABLED;\n  });\n  const labelKey = vue.computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.label) || virtualTree.TreeOptionsEnum.LABEL;\n  });\n  const flattenTree = vue.computed(() => {\n    const expandedKeys = expandedKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const flattenNodes = [];\n    const nodes = tree.value && tree.value.treeNodes || [];\n    function traverse() {\n      const stack = [];\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        stack.push(nodes[i]);\n      }\n      while (stack.length) {\n        const node = stack.pop();\n        if (!node) continue;\n        if (!hiddenKeys.has(node.key)) {\n          flattenNodes.push(node);\n        }\n        if (expandedKeys.has(node.key)) {\n          const children = node.children;\n          if (children) {\n            const length = children.length;\n            for (let i = length - 1; i >= 0; --i) {\n              stack.push(children[i]);\n            }\n          }\n        }\n      }\n    }\n    traverse();\n    return flattenNodes;\n  });\n  const isNotEmpty = vue.computed(() => {\n    return flattenTree.value.length > 0;\n  });\n  function createTree(data) {\n    const treeNodeMap = /* @__PURE__ */new Map();\n    const levelTreeNodeMap = /* @__PURE__ */new Map();\n    let maxLevel = 1;\n    function traverse(nodes, level = 1, parent = void 0) {\n      var _a;\n      const siblings = [];\n      for (const rawNode of nodes) {\n        const value = getKey(rawNode);\n        const node = {\n          level,\n          key: value,\n          data: rawNode\n        };\n        node.label = getLabel(rawNode);\n        node.parent = parent;\n        const children = getChildren(rawNode);\n        node.disabled = getDisabled(rawNode);\n        node.isLeaf = !children || children.length === 0;\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node);\n        }\n        siblings.push(node);\n        treeNodeMap.set(value, node);\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, []);\n        }\n        (_a = levelTreeNodeMap.get(level)) == null ? void 0 : _a.push(node);\n      }\n      if (level > maxLevel) {\n        maxLevel = level;\n      }\n      return siblings;\n    }\n    const treeNodes = traverse(data);\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes\n    };\n  }\n  function filter(query) {\n    const keys = doFilter(query);\n    if (keys) {\n      expandedKeySet.value = keys;\n    }\n  }\n  function getChildren(node) {\n    return node[childrenKey.value];\n  }\n  function getKey(node) {\n    if (!node) {\n      return \"\";\n    }\n    return node[valueKey.value];\n  }\n  function getDisabled(node) {\n    return node[disabledKey.value];\n  }\n  function getLabel(node) {\n    return node[labelKey.value];\n  }\n  function toggleExpand(node) {\n    const expandedKeys = expandedKeySet.value;\n    if (expandedKeys.has(node.key)) {\n      collapseNode(node);\n    } else {\n      expandNode(node);\n    }\n  }\n  function setExpandedKeys(keys) {\n    expandedKeySet.value = new Set(keys);\n  }\n  function handleNodeClick(node, e) {\n    emit(virtualTree.NODE_CLICK, node.data, node, e);\n    handleCurrentChange(node);\n    if (props.expandOnClickNode) {\n      toggleExpand(node);\n    }\n    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true);\n    }\n  }\n  function handleCurrentChange(node) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key;\n      emit(virtualTree.CURRENT_CHANGE, node.data, node);\n    }\n  }\n  function handleNodeCheck(node, checked) {\n    toggleCheckbox(node, checked);\n  }\n  function expandNode(node) {\n    const keySet = expandedKeySet.value;\n    if (tree.value && props.accordion) {\n      const {\n        treeNodeMap\n      } = tree.value;\n      keySet.forEach(key => {\n        const treeNode = treeNodeMap.get(key);\n        if (node && node.level === (treeNode == null ? void 0 : treeNode.level)) {\n          keySet.delete(key);\n        }\n      });\n    }\n    keySet.add(node.key);\n    emit(virtualTree.NODE_EXPAND, node.data, node);\n  }\n  function collapseNode(node) {\n    expandedKeySet.value.delete(node.key);\n    emit(virtualTree.NODE_COLLAPSE, node.data, node);\n  }\n  function isExpanded(node) {\n    return expandedKeySet.value.has(node.key);\n  }\n  function isDisabled(node) {\n    return !!node.disabled;\n  }\n  function isCurrent(node) {\n    const current = currentKey.value;\n    return current !== void 0 && current === node.key;\n  }\n  function getCurrentNode() {\n    var _a, _b;\n    if (!currentKey.value) return void 0;\n    return (_b = (_a = tree.value) == null ? void 0 : _a.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;\n  }\n  function getCurrentKey() {\n    return currentKey.value;\n  }\n  function setCurrentKey(key) {\n    currentKey.value = key;\n  }\n  function setData(data) {\n    vue.nextTick(() => tree.value = createTree(data));\n  }\n  function getNode(data) {\n    var _a;\n    const key = shared.isObject(data) ? getKey(data) : data;\n    return (_a = tree.value) == null ? void 0 : _a.treeNodeMap.get(key);\n  }\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isExpanded,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeCheck,\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData,\n    getNode,\n    expandNode,\n    collapseNode,\n    setExpandedKeys\n  };\n}\nexports.useTree = useTree;","map":{"version":3,"names":["useTree","props","emit","expandedKeySet","vue","ref","Set","defaultExpandedKeys","currentKey","tree","shallowRef","watch","currentNodeKey","key","value","immediate","data","setData","isIndeterminate","isChecked","toggleCheckbox","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","useCheck","doFilter","hiddenNodeKeySet","isForceHiddenExpandIcon","useFilter","valueKey","computed","_a","virtualTree","TreeOptionsEnum","KEY","childrenKey","children","CHILDREN","disabledKey","disabled","DISABLED","labelKey","label","LABEL","flattenTree","expandedKeys","hiddenKeys","flattenNodes","nodes","treeNodes","traverse","stack","i","length","push","node","pop","has","isNotEmpty","createTree","treeNodeMap","Map","levelTreeNodeMap","maxLevel","level","parent","siblings","rawNode","getKey","getLabel","getChildren","getDisabled","isLeaf","set","get","filter","query","keys","toggleExpand","collapseNode","expandNode","setExpandedKeys","handleNodeClick","e","NODE_CLICK","handleCurrentChange","expandOnClickNode","showCheckbox","checkOnClickNode","isCurrent","CURRENT_CHANGE","handleNodeCheck","checked","keySet","accordion","forEach","treeNode","delete","add","NODE_EXPAND","NODE_COLLAPSE","isExpanded","isDisabled","current","getCurrentNode","_b","getCurrentKey","setCurrentKey","nextTick","getNode","shared","isObject"],"sources":["../../../../../../../packages/components/tree-v2/src/composables/useTree.ts"],"sourcesContent":["import { computed, nextTick, ref, shallowRef, watch } from 'vue'\nimport { isObject } from '@element-plus/utils'\nimport {\n  CURRENT_CHANGE,\n  NODE_CLICK,\n  NODE_COLLAPSE,\n  NODE_EXPAND,\n  TreeOptionsEnum,\n} from '../virtual-tree'\nimport { useCheck } from './useCheck'\nimport { useFilter } from './useFilter'\nimport type { SetupContext } from 'vue'\nimport type { treeEmits } from '../virtual-tree'\nimport type { CheckboxValueType } from '@element-plus/components/checkbox'\nimport type {\n  Tree,\n  TreeData,\n  TreeKey,\n  TreeNode,\n  TreeNodeData,\n  TreeProps,\n} from '../types'\n\nexport function useTree(\n  props: TreeProps,\n  emit: SetupContext<typeof treeEmits>['emit']\n) {\n  const expandedKeySet = ref<Set<TreeKey>>(new Set(props.defaultExpandedKeys))\n  const currentKey = ref<TreeKey | undefined>()\n  const tree = shallowRef<Tree | undefined>()\n\n  watch(\n    () => props.currentNodeKey,\n    (key) => {\n      currentKey.value = key\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    () => props.data,\n    (data: TreeData) => {\n      setData(data)\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n  } = useCheck(props, tree)\n\n  const { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon } = useFilter(\n    props,\n    tree\n  )\n\n  const valueKey = computed(() => {\n    return props.props?.value || TreeOptionsEnum.KEY\n  })\n  const childrenKey = computed(() => {\n    return props.props?.children || TreeOptionsEnum.CHILDREN\n  })\n  const disabledKey = computed(() => {\n    return props.props?.disabled || TreeOptionsEnum.DISABLED\n  })\n  const labelKey = computed(() => {\n    return props.props?.label || TreeOptionsEnum.LABEL\n  })\n\n  const flattenTree = computed(() => {\n    const expandedKeys = expandedKeySet.value\n    const hiddenKeys = hiddenNodeKeySet.value\n    const flattenNodes: TreeNode[] = []\n    const nodes = (tree.value && tree.value.treeNodes) || []\n    function traverse() {\n      const stack: TreeNode[] = []\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        stack.push(nodes[i])\n      }\n      while (stack.length) {\n        const node = stack.pop()\n        if (!node) continue\n        if (!hiddenKeys.has(node.key)) {\n          flattenNodes.push(node)\n        }\n        // Only \"visible\" nodes will be rendered\n        if (expandedKeys.has(node.key)) {\n          const children = node.children\n          if (children) {\n            const length = children.length\n            for (let i = length - 1; i >= 0; --i) {\n              stack.push(children[i])\n            }\n          }\n        }\n      }\n    }\n    traverse()\n    return flattenNodes\n  })\n\n  const isNotEmpty = computed(() => {\n    return flattenTree.value.length > 0\n  })\n\n  function createTree(data: TreeData): Tree {\n    const treeNodeMap: Map<TreeKey, TreeNode> = new Map()\n    const levelTreeNodeMap: Map<number, TreeNode[]> = new Map()\n    let maxLevel = 1\n    function traverse(\n      nodes: TreeData,\n      level = 1,\n      parent: TreeNode | undefined = undefined\n    ) {\n      const siblings: TreeNode[] = []\n      for (const rawNode of nodes) {\n        const value = getKey(rawNode)\n        const node: TreeNode = {\n          level,\n          key: value,\n          data: rawNode,\n        }\n        node.label = getLabel(rawNode)\n        node.parent = parent\n        const children = getChildren(rawNode)\n        node.disabled = getDisabled(rawNode)\n        node.isLeaf = !children || children.length === 0\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node)\n        }\n        siblings.push(node)\n        treeNodeMap.set(value, node)\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, [])\n        }\n        levelTreeNodeMap.get(level)?.push(node)\n      }\n      if (level > maxLevel) {\n        maxLevel = level\n      }\n      return siblings\n    }\n    const treeNodes: TreeNode[] = traverse(data)\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes,\n    }\n  }\n\n  function filter(query: string) {\n    const keys = doFilter(query)\n    if (keys) {\n      expandedKeySet.value = keys\n    }\n  }\n\n  function getChildren(node: TreeNodeData): TreeNodeData[] {\n    return node[childrenKey.value]\n  }\n\n  function getKey(node: TreeNodeData): TreeKey {\n    if (!node) {\n      return ''\n    }\n    return node[valueKey.value]\n  }\n\n  function getDisabled(node: TreeNodeData): boolean {\n    return node[disabledKey.value]\n  }\n\n  function getLabel(node: TreeNodeData): string {\n    return node[labelKey.value]\n  }\n\n  function toggleExpand(node: TreeNode) {\n    const expandedKeys = expandedKeySet.value\n    if (expandedKeys.has(node.key)) {\n      collapseNode(node)\n    } else {\n      expandNode(node)\n    }\n  }\n\n  function setExpandedKeys(keys: TreeKey[]) {\n    expandedKeySet.value = new Set(keys)\n  }\n\n  function handleNodeClick(node: TreeNode, e: MouseEvent) {\n    emit(NODE_CLICK, node.data, node, e)\n    handleCurrentChange(node)\n    if (props.expandOnClickNode) {\n      toggleExpand(node)\n    }\n    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true)\n    }\n  }\n\n  function handleCurrentChange(node: TreeNode) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key\n      emit(CURRENT_CHANGE, node.data, node)\n    }\n  }\n\n  function handleNodeCheck(node: TreeNode, checked: CheckboxValueType) {\n    toggleCheckbox(node, checked)\n  }\n\n  function expandNode(node: TreeNode) {\n    const keySet = expandedKeySet.value\n    if (tree.value && props.accordion) {\n      // whether only one node among the same level can be expanded at one time\n      const { treeNodeMap } = tree.value\n      keySet.forEach((key) => {\n        const treeNode = treeNodeMap.get(key)\n        if (node && node.level === treeNode?.level) {\n          keySet.delete(key)\n        }\n      })\n    }\n    keySet.add(node.key)\n    emit(NODE_EXPAND, node.data, node)\n  }\n\n  function collapseNode(node: TreeNode) {\n    expandedKeySet.value.delete(node.key)\n    emit(NODE_COLLAPSE, node.data, node)\n  }\n\n  function isExpanded(node: TreeNode): boolean {\n    return expandedKeySet.value.has(node.key)\n  }\n\n  function isDisabled(node: TreeNode): boolean {\n    return !!node.disabled\n  }\n\n  function isCurrent(node: TreeNode): boolean {\n    const current = currentKey.value\n    return current !== undefined && current === node.key\n  }\n\n  function getCurrentNode(): TreeNodeData | undefined {\n    if (!currentKey.value) return undefined\n    return tree.value?.treeNodeMap.get(currentKey.value)?.data\n  }\n\n  function getCurrentKey(): TreeKey | undefined {\n    return currentKey.value\n  }\n\n  function setCurrentKey(key: TreeKey): void {\n    currentKey.value = key\n  }\n\n  function setData(data: TreeData) {\n    nextTick(() => (tree.value = createTree(data)))\n  }\n\n  function getNode(data: TreeKey | TreeNodeData) {\n    const key = isObject(data) ? getKey(data) : data\n    return tree.value?.treeNodeMap.get(key)\n  }\n\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isExpanded,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeCheck,\n    // expose\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData,\n    getNode,\n    expandNode,\n    collapseNode,\n    setExpandedKeys,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}