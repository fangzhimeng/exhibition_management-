{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../../utils/index.js');\nvar row = require('../row.js');\nvar tokens = require('../tokens.js');\nvar _private = require('../private.js');\nvar types = require('../../../../utils/types.js');\nvar shared = require('@vue/shared');\nconst useTableRow = props => {\n  const {\n    isScrolling\n  } = vue.inject(tokens.TableV2InjectionKey);\n  const measured = vue.ref(false);\n  const rowRef = vue.ref();\n  const measurable = vue.computed(() => {\n    return types.isNumber(props.estimatedRowHeight) && props.rowIndex >= 0;\n  });\n  const doMeasure = (isInit = false) => {\n    const $rowRef = vue.unref(rowRef);\n    if (!$rowRef) return;\n    const {\n      columns,\n      onRowHeightChange,\n      rowKey,\n      rowIndex,\n      style\n    } = props;\n    const {\n      height\n    } = $rowRef.getBoundingClientRect();\n    measured.value = true;\n    vue.nextTick(() => {\n      if (isInit || height !== Number.parseInt(style.height)) {\n        const firstColumn = columns[0];\n        const isPlaceholder = (firstColumn == null ? void 0 : firstColumn.placeholderSign) === _private.placeholderSign;\n        onRowHeightChange == null ? void 0 : onRowHeightChange({\n          rowKey,\n          height,\n          rowIndex\n        }, firstColumn && !isPlaceholder && firstColumn.fixed);\n      }\n    });\n  };\n  const eventHandlers = vue.computed(() => {\n    const {\n      rowData,\n      rowIndex,\n      rowKey,\n      onRowHover\n    } = props;\n    const handlers = props.rowEventHandlers || {};\n    const eventHandlers2 = {};\n    Object.entries(handlers).forEach(([eventName, handler]) => {\n      if (shared.isFunction(handler)) {\n        eventHandlers2[eventName] = event => {\n          handler({\n            event,\n            rowData,\n            rowIndex,\n            rowKey\n          });\n        };\n      }\n    });\n    if (onRowHover) {\n      ;\n      [{\n        name: \"onMouseleave\",\n        hovered: false\n      }, {\n        name: \"onMouseenter\",\n        hovered: true\n      }].forEach(({\n        name,\n        hovered\n      }) => {\n        const existedHandler = eventHandlers2[name];\n        eventHandlers2[name] = event => {\n          onRowHover({\n            event,\n            hovered,\n            rowData,\n            rowIndex,\n            rowKey\n          });\n          existedHandler == null ? void 0 : existedHandler(event);\n        };\n      });\n    }\n    return eventHandlers2;\n  });\n  const onExpand = expanded => {\n    const {\n      onRowExpand,\n      rowData,\n      rowIndex,\n      rowKey\n    } = props;\n    onRowExpand == null ? void 0 : onRowExpand({\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey\n    });\n  };\n  vue.onMounted(() => {\n    if (vue.unref(measurable)) {\n      doMeasure(true);\n    }\n  });\n  return {\n    isScrolling,\n    measurable,\n    measured,\n    rowRef,\n    eventHandlers,\n    onExpand\n  };\n};\nconst COMPONENT_NAME = \"ElTableV2TableRow\";\nconst TableV2Row = vue.defineComponent({\n  name: COMPONENT_NAME,\n  props: row.tableV2RowProps,\n  setup(props, {\n    expose,\n    slots,\n    attrs\n  }) {\n    const {\n      eventHandlers,\n      isScrolling,\n      measurable,\n      measured,\n      rowRef,\n      onExpand\n    } = useTableRow(props);\n    expose({\n      onExpand\n    });\n    return () => {\n      const {\n        columns,\n        columnsStyles,\n        expandColumnKey,\n        depth,\n        rowData,\n        rowIndex,\n        style\n      } = props;\n      let ColumnCells = columns.map((column, columnIndex) => {\n        const expandable = shared.isArray(rowData.children) && rowData.children.length > 0 && column.key === expandColumnKey;\n        return slots.cell({\n          column,\n          columns,\n          columnIndex,\n          depth,\n          style: columnsStyles[column.key],\n          rowData,\n          rowIndex,\n          isScrolling: vue.unref(isScrolling),\n          expandIconProps: expandable ? {\n            rowData,\n            rowIndex,\n            onExpand\n          } : void 0\n        });\n      });\n      if (slots.row) {\n        ColumnCells = slots.row({\n          cells: ColumnCells.map(node => {\n            if (shared.isArray(node) && node.length === 1) {\n              return node[0];\n            }\n            return node;\n          }),\n          style,\n          columns,\n          depth,\n          rowData,\n          rowIndex,\n          isScrolling: vue.unref(isScrolling)\n        });\n      }\n      if (vue.unref(measurable)) {\n        const {\n          height,\n          ...exceptHeightStyle\n        } = style || {};\n        const _measured = vue.unref(measured);\n        return vue.createVNode(\"div\", vue.mergeProps({\n          \"ref\": rowRef,\n          \"class\": props.class,\n          \"style\": _measured ? style : exceptHeightStyle,\n          \"role\": \"row\"\n        }, attrs, vue.unref(eventHandlers)), [ColumnCells]);\n      }\n      return vue.createVNode(\"div\", vue.mergeProps(attrs, {\n        \"ref\": rowRef,\n        \"class\": props.class,\n        \"style\": style,\n        \"role\": \"row\"\n      }, vue.unref(eventHandlers)), [ColumnCells]);\n    };\n  }\n});\nexports[\"default\"] = TableV2Row;","map":{"version":3,"names":["isScrolling","vue","inject","tokens","TableV2InjectionKey","measured","ref","rowRef","measurable","computed","types","isNumber","props","estimatedRowHeight","rowIndex","doMeasure","isInit","$rowRef","columns","onRowHeightChange","rowKey","style","height","getBoundingClientRect","value","nextTick","Number","parseInt","firstColumn","isPlaceholder","placeholderSign","_private","fixed","eventHandlers","rowData","onRowHover","handlers","rowEventHandlers","eventHandlers2","Object","entries","forEach","eventName","handler","shared","isFunction","event","name","hovered","existedHandler","onExpand","expanded","onRowExpand","unref","COMPONENT_NAME","TableV2Row","defineComponent","row","tableV2RowProps","setup","expose","slots","useTableRow","columnsStyles","expandColumnKey","depth","ColumnCells","map","column","columnIndex","expandable","isArray","children","length","key","cell","expandIconProps","cells","node","_measured","createVNode","mergeProps","class","exceptHeightStyle","attrs"],"sources":["../../../../../../../packages/components/table-v2/src/components/row.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n  unref,\n} from 'vue'\nimport { isArray, isFunction, isNumber } from '@element-plus/utils'\nimport { tableV2RowProps } from '../row'\nimport { TableV2InjectionKey } from '../tokens'\nimport { placeholderSign } from '../private'\n\nimport type { CSSProperties, RendererElement, RendererNode, VNode } from 'vue'\nimport type { RowEventHandlers, TableV2RowProps } from '../row'\n\ntype CustomizedCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[]\n\ntype DefaultCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[][]\n\ntype ColumnCellsType = DefaultCellsType | CustomizedCellsType\n\nconst useTableRow = (props: TableV2RowProps) => {\n  const { isScrolling } = inject(TableV2InjectionKey)!\n\n  const measured = ref(false)\n  const rowRef = ref<HTMLElement>()\n  const measurable = computed(() => {\n    return isNumber(props.estimatedRowHeight) && props.rowIndex >= 0\n  })\n\n  const doMeasure = (isInit = false) => {\n    const $rowRef = unref(rowRef)\n    if (!$rowRef) return\n    const { columns, onRowHeightChange, rowKey, rowIndex, style } = props\n    const { height } = $rowRef.getBoundingClientRect()\n    measured.value = true\n\n    nextTick(() => {\n      if (isInit || height !== Number.parseInt(style!.height as string)) {\n        const firstColumn = columns[0]\n        const isPlaceholder = firstColumn?.placeholderSign === placeholderSign\n        onRowHeightChange?.(\n          { rowKey, height, rowIndex },\n          firstColumn && !isPlaceholder && firstColumn.fixed\n        )\n      }\n    })\n  }\n\n  const eventHandlers = computed(() => {\n    const { rowData, rowIndex, rowKey, onRowHover } = props\n    const handlers = props.rowEventHandlers || ({} as RowEventHandlers)\n    const eventHandlers = {} as {\n      [key in keyof RowEventHandlers]: (e: Event) => void\n    }\n\n    Object.entries(handlers).forEach(([eventName, handler]) => {\n      if (isFunction(handler)) {\n        eventHandlers[eventName as keyof RowEventHandlers] = (event: Event) => {\n          handler({\n            event,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n        }\n      }\n    })\n\n    if (onRowHover) {\n      ;(\n        [\n          { name: 'onMouseleave', hovered: false },\n          { name: 'onMouseenter', hovered: true },\n        ] as const\n      ).forEach(({ name, hovered }) => {\n        const existedHandler = eventHandlers[name]\n        eventHandlers[name] = ((event: MouseEvent) => {\n          onRowHover({\n            event,\n            hovered,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n\n          existedHandler?.(event)\n        }) as any\n      })\n    }\n    return eventHandlers\n  })\n\n  const onExpand = (expanded: boolean) => {\n    const { onRowExpand, rowData, rowIndex, rowKey } = props\n\n    onRowExpand?.({\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey,\n    })\n  }\n\n  onMounted(() => {\n    if (unref(measurable)) {\n      doMeasure(true)\n    }\n  })\n\n  return { isScrolling, measurable, measured, rowRef, eventHandlers, onExpand }\n}\n\nconst COMPONENT_NAME = 'ElTableV2TableRow'\n\nconst TableV2Row = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2RowProps,\n  setup(props, { expose, slots, attrs }) {\n    const {\n      eventHandlers,\n      isScrolling,\n      measurable,\n      measured,\n      rowRef,\n\n      onExpand,\n    } = useTableRow(props)\n\n    expose({\n      /**\n       * @description manually dispatching expand action on row.\n       */\n      onExpand,\n    })\n\n    return () => {\n      const {\n        columns,\n        columnsStyles,\n        expandColumnKey,\n        depth,\n        rowData,\n        rowIndex,\n        style,\n      } = props\n\n      let ColumnCells: ColumnCellsType = columns.map((column, columnIndex) => {\n        const expandable =\n          isArray(rowData.children) &&\n          rowData.children.length > 0 &&\n          column.key === expandColumnKey\n\n        return slots.cell!({\n          column,\n          columns,\n          columnIndex,\n          depth,\n          style: columnsStyles[column.key],\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n          expandIconProps: expandable\n            ? {\n                rowData,\n                rowIndex,\n                onExpand,\n              }\n            : undefined,\n        })\n      })\n\n      if (slots.row) {\n        ColumnCells = slots.row({\n          cells: ColumnCells.map((node) => {\n            if (isArray(node) && node.length === 1) {\n              return node[0]\n            }\n            return node\n          }),\n          style,\n          columns,\n          depth,\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n        })\n      }\n\n      if (unref(measurable)) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { height, ...exceptHeightStyle } = style || {}\n        const _measured = unref(measured)\n        return (\n          <div\n            ref={rowRef}\n            class={props.class}\n            style={_measured ? style : exceptHeightStyle}\n            role=\"row\"\n            {...attrs}\n            {...unref(eventHandlers)}\n          >\n            {ColumnCells}\n          </div>\n        )\n      }\n\n      return (\n        <div\n          {...attrs}\n          ref={rowRef}\n          class={props.class}\n          style={style}\n          role=\"row\"\n          {...unref(eventHandlers)}\n        >\n          {ColumnCells}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2Row\n\nexport type TableV2RowCellRenderParam = {\n  column: TableV2RowProps['columns'][number]\n  columns: TableV2RowProps['columns']\n  columnIndex: number\n  depth: number\n  style: CSSProperties\n  rowData: any\n  rowIndex: number\n  isScrolling: boolean\n  expandIconProps?: {\n    rowData: any\n    rowIndex: number\n    onExpand: (expand: boolean) => void\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}