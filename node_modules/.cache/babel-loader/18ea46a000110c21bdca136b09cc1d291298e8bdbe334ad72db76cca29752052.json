{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$2 = require('../../icon/index.js');\nrequire('../../focus-trap/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../../utils/index.js');\nvar constants = require('./constants.js');\nvar dialogContent = require('./dialog-content.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-locale/index.js');\nvar icon = require('../../../utils/vue/icon.js');\nvar tokens = require('../../focus-trap/src/tokens.js');\nvar refs = require('../../../utils/vue/refs.js');\nvar index$1 = require('../../../hooks/use-draggable/index.js');\nconst _hoisted_1 = [\"aria-level\"];\nconst _hoisted_2 = [\"aria-label\"];\nconst _hoisted_3 = [\"id\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElDialogContent\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: dialogContent.dialogContentProps,\n  emits: dialogContent.dialogContentEmits,\n  setup(__props) {\n    const props = __props;\n    const {\n      t\n    } = index.useLocale();\n    const {\n      Close\n    } = icon.CloseComponents;\n    const {\n      dialogRef,\n      headerRef,\n      bodyId,\n      ns,\n      style\n    } = vue.inject(constants.dialogInjectionKey);\n    const {\n      focusTrapRef\n    } = vue.inject(tokens.FOCUS_TRAP_INJECTION_KEY);\n    const dialogKls = vue.computed(() => [ns.b(), ns.is(\"fullscreen\", props.fullscreen), ns.is(\"draggable\", props.draggable), ns.is(\"align-center\", props.alignCenter), {\n      [ns.m(\"center\")]: props.center\n    }, props.customClass]);\n    const composedDialogRef = refs.composeRefs(focusTrapRef, dialogRef);\n    const draggable = vue.computed(() => props.draggable);\n    index$1.useDraggable(dialogRef, headerRef, draggable);\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        ref: vue.unref(composedDialogRef),\n        class: vue.normalizeClass(vue.unref(dialogKls)),\n        style: vue.normalizeStyle(vue.unref(style)),\n        tabindex: \"-1\"\n      }, [vue.createElementVNode(\"header\", {\n        ref_key: \"headerRef\",\n        ref: headerRef,\n        class: vue.normalizeClass(vue.unref(ns).e(\"header\"))\n      }, [vue.renderSlot(_ctx.$slots, \"header\", {}, () => [vue.createElementVNode(\"span\", {\n        role: \"heading\",\n        \"aria-level\": _ctx.ariaLevel,\n        class: vue.normalizeClass(vue.unref(ns).e(\"title\"))\n      }, vue.toDisplayString(_ctx.title), 11, _hoisted_1)]), _ctx.showClose ? (vue.openBlock(), vue.createElementBlock(\"button\", {\n        key: 0,\n        \"aria-label\": vue.unref(t)(\"el.dialog.close\"),\n        class: vue.normalizeClass(vue.unref(ns).e(\"headerbtn\")),\n        type: \"button\",\n        onClick: _cache[0] || (_cache[0] = $event => _ctx.$emit(\"close\"))\n      }, [vue.createVNode(vue.unref(index$2.ElIcon), {\n        class: vue.normalizeClass(vue.unref(ns).e(\"close\"))\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.closeIcon || vue.unref(Close))))]),\n        _: 1\n      }, 8, [\"class\"])], 10, _hoisted_2)) : vue.createCommentVNode(\"v-if\", true)], 2), vue.createElementVNode(\"div\", {\n        id: vue.unref(bodyId),\n        class: vue.normalizeClass(vue.unref(ns).e(\"body\"))\n      }, [vue.renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_3), _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock(\"footer\", {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(ns).e(\"footer\"))\n      }, [vue.renderSlot(_ctx.$slots, \"footer\")], 2)) : vue.createCommentVNode(\"v-if\", true)], 6);\n    };\n  }\n});\nvar ElDialogContent = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog-content.vue\"]]);\nexports[\"default\"] = ElDialogContent;","map":{"version":3,"names":["name","t","index","useLocale","Close","icon","CloseComponents","dialogRef","headerRef","bodyId","ns","style","vue","inject","constants","dialogInjectionKey","focusTrapRef","tokens","FOCUS_TRAP_INJECTION_KEY","dialogKls","computed","b","is","props","fullscreen","draggable","alignCenter","m","center","customClass","composedDialogRef","refs","composeRefs","index$1","useDraggable"],"sources":["../../../../../../packages/components/dialog/src/dialog-content.vue"],"sourcesContent":["<template>\n  <div :ref=\"composedDialogRef\" :class=\"dialogKls\" :style=\"style\" tabindex=\"-1\">\n    <header ref=\"headerRef\" :class=\"ns.e('header')\">\n      <slot name=\"header\">\n        <span role=\"heading\" :aria-level=\"ariaLevel\" :class=\"ns.e('title')\">\n          {{ title }}\n        </span>\n      </slot>\n      <button\n        v-if=\"showClose\"\n        :aria-label=\"t('el.dialog.close')\"\n        :class=\"ns.e('headerbtn')\"\n        type=\"button\"\n        @click=\"$emit('close')\"\n      >\n        <el-icon :class=\"ns.e('close')\">\n          <component :is=\"closeIcon || Close\" />\n        </el-icon>\n      </button>\n    </header>\n    <div :id=\"bodyId\" :class=\"ns.e('body')\">\n      <slot />\n    </div>\n    <footer v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n      <slot name=\"footer\" />\n    </footer>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport { useDraggable, useLocale } from '@element-plus/hooks'\nimport { CloseComponents, composeRefs } from '@element-plus/utils'\nimport { dialogInjectionKey } from './constants'\nimport { dialogContentEmits, dialogContentProps } from './dialog-content'\n\nconst { t } = useLocale()\nconst { Close } = CloseComponents\n\ndefineOptions({ name: 'ElDialogContent' })\nconst props = defineProps(dialogContentProps)\ndefineEmits(dialogContentEmits)\n\nconst { dialogRef, headerRef, bodyId, ns, style } = inject(dialogInjectionKey)!\nconst { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY)!\n\nconst dialogKls = computed(() => [\n  ns.b(),\n  ns.is('fullscreen', props.fullscreen),\n  ns.is('draggable', props.draggable),\n  ns.is('align-center', props.alignCenter),\n  { [ns.m('center')]: props.center },\n  props.customClass,\n])\n\nconst composedDialogRef = composeRefs(focusTrapRef, dialogRef)\n\nconst draggable = computed(() => props.draggable)\nuseDraggable(dialogRef, headerRef, draggable)\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;uCAyCc;EAAEA,IAAM;AAAA,CAAkB;;;;;;;IAHlC;MAAEC;IAAA,IAAMC,KAAA,CAAAC,SAAU;IACxB,MAAM;MAAEC;IAAU,IAAAC,IAAA,CAAAC,eAAA;IAMlB,MAAM;MAAEC,SAAW;MAAAC,SAAA;MAAWC,MAAA;MAAQC,EAAI;MAAAC;IAAA,IAAUC,GAAA,CAAAC,MAAA,CAAOC,SAAA,CAAAC,kBAAkB;IACvE;MAAEC;IAAiB,IAAAJ,GAAA,CAAAC,MAAA,CAAOI,MAAA,CAAAC,wBAAwB;IAElD,MAAAC,SAAA,GAAYP,GAAA,CAAAQ,QAAA,CAAS,MAAM,CAC/BV,EAAA,CAAGW,CAAE,IACLX,EAAG,CAAAY,EAAA,CAAG,YAAc,EAAAC,KAAA,CAAMC,UAAU,GACpCd,EAAG,CAAAY,EAAA,CAAG,WAAa,EAAAC,KAAA,CAAME,SAAS,GAClCf,EAAG,CAAAY,EAAA,CAAG,cAAgB,EAAAC,KAAA,CAAMG,WAAW,GACvC;MAAE,CAAChB,EAAA,CAAGiB,CAAA,CAAE,QAAQ,IAAIJ,KAAA,CAAMK;IAAO,GACjCL,KAAM,CAAAM,WAAA,CACP;IAEK,MAAAC,iBAAA,GAAoBC,IAAA,CAAAC,WAAY,CAAAhB,YAAA,EAAcT,SAAS;IAE7D,MAAMkB,SAAY,GAAAb,GAAA,CAAAQ,QAAA,CAAS,MAAMG,KAAA,CAAME,SAAS;IACnCQ,OAAA,CAAAC,YAAA,CAAA3B,SAAA,EAAWC,SAAA,EAAWiB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}