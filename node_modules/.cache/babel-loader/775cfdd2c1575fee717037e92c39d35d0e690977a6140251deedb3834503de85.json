{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../form/index.js');\nvar treeStore = require('./model/tree-store.js');\nvar util = require('./model/util.js');\nvar treeNode = require('./tree-node.js');\nvar useNodeExpandEventBroadcast = require('./model/useNodeExpandEventBroadcast.js');\nvar useDragNode = require('./model/useDragNode.js');\nvar useKeydown = require('./model/useKeydown.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar icon = require('../../../utils/vue/icon.js');\nvar index = require('../../../hooks/use-locale/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar constants = require('../../form/src/constants.js');\nconst _sfc_main = vue.defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode: treeNode[\"default\"]\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        disabled: \"disabled\"\n      })\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    icon: {\n      type: icon.iconPropType\n    }\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n  setup(props, ctx) {\n    const {\n      t\n    } = index.useLocale();\n    const ns = index$1.useNamespace(\"tree\");\n    const store = vue.ref(new treeStore[\"default\"]({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    const root = vue.ref(store.value.root);\n    const currentNode = vue.ref(null);\n    const el$ = vue.ref(null);\n    const dropIndicator$ = vue.ref(null);\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast.useNodeExpandEventBroadcast(props);\n    const {\n      dragState\n    } = useDragNode.useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store\n    });\n    useKeydown.useKeydown({\n      el$\n    }, store);\n    const isEmpty = vue.computed(() => {\n      const {\n        childNodes\n      } = root.value;\n      return !childNodes || childNodes.length === 0 || childNodes.every(({\n        visible\n      }) => !visible);\n    });\n    vue.watch(() => props.currentNodeKey, newVal => {\n      store.value.setCurrentNodeKey(newVal);\n    });\n    vue.watch(() => props.defaultCheckedKeys, newVal => {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    vue.watch(() => props.defaultExpandedKeys, newVal => {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    vue.watch(() => props.data, newVal => {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    vue.watch(() => props.checkStrictly, newVal => {\n      store.value.checkStrictly = newVal;\n    });\n    const filter = value => {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n    const getNodeKey = node => {\n      return util.getNodeKey(props.nodeKey, node.data);\n    };\n    const getNodePath = data => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      const node = store.value.getNode(data);\n      if (!node) return [];\n      const path = [node.data];\n      let parent = node.parent;\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    };\n    const getCheckedNodes = (leafOnly, includeHalfChecked) => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n    const getCheckedKeys = leafOnly => {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n    const getCurrentNode = () => {\n      const currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n    const getCurrentKey = () => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      const currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n    const setCheckedNodes = (nodes, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n    const setCheckedKeys = (keys, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n    const setChecked = (data, checked, deep) => {\n      store.value.setChecked(data, checked, deep);\n    };\n    const getHalfCheckedNodes = () => {\n      return store.value.getHalfCheckedNodes();\n    };\n    const getHalfCheckedKeys = () => {\n      return store.value.getHalfCheckedKeys();\n    };\n    const setCurrentNode = (node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      util.handleCurrentChange(store, ctx.emit, () => store.value.setUserCurrentNode(node, shouldAutoExpandParent));\n    };\n    const setCurrentKey = (key, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      util.handleCurrentChange(store, ctx.emit, () => store.value.setCurrentNodeKey(key, shouldAutoExpandParent));\n    };\n    const getNode = data => {\n      return store.value.getNode(data);\n    };\n    const remove = data => {\n      store.value.remove(data);\n    };\n    const append = (data, parentNode) => {\n      store.value.append(data, parentNode);\n    };\n    const insertBefore = (data, refNode) => {\n      store.value.insertBefore(data, refNode);\n    };\n    const insertAfter = (data, refNode) => {\n      store.value.insertAfter(data, refNode);\n    };\n    const handleNodeExpand = (nodeData, node, instance) => {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n    const updateKeyChildren = (key, data) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n    vue.provide(\"RootTree\", {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: vue.getCurrentInstance()\n    });\n    vue.provide(constants.formItemContextKey, void 0);\n    return {\n      ns,\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n      isEmpty,\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tree_node = vue.resolveComponent(\"el-tree-node\");\n  return vue.openBlock(), vue.createElementBlock(\"div\", {\n    ref: \"el$\",\n    class: vue.normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.root.childNodes, child => {\n    return vue.openBlock(), vue.createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n    key: 0,\n    class: vue.normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [vue.renderSlot(_ctx.$slots, \"empty\", {}, () => {\n    var _a;\n    return [vue.createElementVNode(\"span\", {\n      class: vue.normalizeClass(_ctx.ns.e(\"empty-text\"))\n    }, vue.toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)];\n  })], 2)) : vue.createCommentVNode(\"v-if\", true), vue.withDirectives(vue.createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    class: vue.normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vue.vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\nvar Tree = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree.vue\"]]);\nexports[\"default\"] = Tree;","map":{"version":3,"names":["_sfc_main","vue","defineComponent","name","components","ElTreeNode","treeNode","props","data","type","Array","default","emptyText","String","renderAfterExpand","Boolean","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","currentNodeKey","Number","renderContent","Function","showCheckbox","draggable","allowDrag","allowDrop","Object","children","label","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","icon","iconPropType","emits","setup","ctx","t","index","useLocale","ns","index$1","useNamespace","store","ref","treeStore","key","value","initialize","root","currentNode","el$","dropIndicator$","broadcastExpanded","useNodeExpandEventBroadcast","dragState","useDragNode","useDragNodeHandler","useKeydown","isEmpty","computed","childNodes","length","every","visible","watch","newVal","setCurrentNodeKey","setDefaultCheckedKey","setDefaultExpandedKeys","setData","deep","filter","Error","getNodeKey","node","util","getNodePath","getNode","path","parent","push","reverse","getCheckedNodes","leafOnly","includeHalfChecked","getCheckedKeys","getCurrentNode","currentNode2","getCurrentKey","setCheckedNodes","nodes","setCheckedKeys","keys","setChecked","checked","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","shouldAutoExpandParent","handleCurrentChange","emit","setUserCurrentNode","setCurrentKey","remove","append","parentNode","insertBefore","refNode","insertAfter","handleNodeExpand","nodeData","instance","updateKeyChildren","updateChildren","provide","getCurrentInstance","constants","formItemContextKey","createElementBlock","class","normalizeClass","_ctx","b","is","draggingNode","dropType","m","role","openBlock","Fragment","renderList","child","createBlock","_component_el_tree_node","onNodeExpand","e","renderSlot","$slots","_a","createElementVNode","createCommentVNode","withDirectives"],"sources":["../../../../../../packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <slot name=\"empty\">\n        <span :class=\"ns.e('empty-text')\">\n          {{ emptyText ?? t('el.tree.emptyText') }}\n        </span>\n      </slot>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { iconPropType } from '@element-plus/utils'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/components/form'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: {\n      type: iconPropType,\n    },\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.currentNodeKey,\n      (newVal) => {\n        store.value.setCurrentNodeKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys: TreeKey[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n\n      handleCurrentChange(store, ctx.emit, () =>\n        store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n      )\n    }\n\n    const setCurrentKey = (key?: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n\n      handleCurrentChange(store, ctx.emit, () =>\n        store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n      )\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData | Node\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData | Node\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    provide(formItemContextKey, undefined)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}