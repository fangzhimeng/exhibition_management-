{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../utils/index.js');\nvar index = require('../use-namespace/index.js');\nvar index$1 = require('../use-id/index.js');\nvar core = require('@vueuse/core');\nlet cachedContainer;\nconst usePopperContainerId = () => {\n  const namespace = index.useGetDerivedNamespace();\n  const idInjection = index$1.useIdInjection();\n  const id = vue.computed(() => {\n    return `${namespace.value}-popper-container-${idInjection.prefix}`;\n  });\n  const selector = vue.computed(() => `#${id.value}`);\n  return {\n    id,\n    selector\n  };\n};\nconst createContainer = id => {\n  const container = document.createElement(\"div\");\n  container.id = id;\n  document.body.appendChild(container);\n  return container;\n};\nconst usePopperContainer = () => {\n  const {\n    id,\n    selector\n  } = usePopperContainerId();\n  vue.onBeforeMount(() => {\n    if (!core.isClient) return;\n    if (process.env.NODE_ENV === \"test\" || !cachedContainer && !document.body.querySelector(selector.value)) {\n      cachedContainer = createContainer(id.value);\n    }\n  });\n  return {\n    id,\n    selector\n  };\n};\nexports.usePopperContainer = usePopperContainer;\nexports.usePopperContainerId = usePopperContainerId;","map":{"version":3,"names":["cachedContainer","usePopperContainerId","namespace","index","useGetDerivedNamespace","idInjection","index$1","useIdInjection","id","vue","computed","value","prefix","selector","createContainer","container","document","createElement","body","appendChild","usePopperContainer","onBeforeMount","core","isClient","process","env","NODE_ENV","querySelector"],"sources":["../../../../../packages/hooks/use-popper-container/index.ts"],"sourcesContent":["import { computed, onBeforeMount } from 'vue'\nimport { isClient } from '@element-plus/utils'\nimport { useGetDerivedNamespace } from '../use-namespace'\nimport { useIdInjection } from '../use-id'\n\nlet cachedContainer: HTMLElement\n\nexport const usePopperContainerId = () => {\n  const namespace = useGetDerivedNamespace()\n  const idInjection = useIdInjection()\n\n  const id = computed(() => {\n    return `${namespace.value}-popper-container-${idInjection.prefix}`\n  })\n  const selector = computed(() => `#${id.value}`)\n\n  return {\n    id,\n    selector,\n  }\n}\n\nconst createContainer = (id: string) => {\n  const container = document.createElement('div')\n  container.id = id\n  document.body.appendChild(container)\n  return container\n}\n\nexport const usePopperContainer = () => {\n  const { id, selector } = usePopperContainerId()\n  onBeforeMount(() => {\n    if (!isClient) return\n\n    // This is for bypassing the error that when under testing env, we often encounter\n    // document.body.innerHTML = '' situation\n    // for this we need to disable the caching since it's not really needed\n    if (\n      process.env.NODE_ENV === 'test' ||\n      (!cachedContainer && !document.body.querySelector(selector.value))\n    ) {\n      cachedContainer = createContainer(id.value)\n    }\n  })\n\n  return {\n    id,\n    selector,\n  }\n}\n"],"mappings":";;;;;;;;;;AAIA,IAAIA,eAAe;AACP,MAACC,oBAAoB,GAAGA,CAAA,KAAM;EACxC,MAAMC,SAAS,GAAGC,KAAA,CAAAC,sBAAsB,EAAE;EAC1C,MAAMC,WAAW,GAAGC,OAAA,CAAAC,cAAc,EAAE;EACpC,MAAMC,EAAE,GAAGC,GAAA,CAAAC,QAAQ,CAAC,MAAM;IACxB,OAAQ,GAAER,SAAS,CAACS,KAAM,qBAAoBN,WAAW,CAACO,MAAO,EAAC;EACtE,CAAG,CAAC;EACF,MAAMC,QAAQ,GAAGJ,GAAA,CAAAC,QAAQ,CAAC,MAAO,IAAGF,EAAE,CAACG,KAAM,EAAC,CAAC;EAC/C,OAAO;IACLH,EAAE;IACFK;EACJ,CAAG;AACH;AACA,MAAMC,eAAe,GAAIN,EAAE,IAAK;EAC9B,MAAMO,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EAC/CF,SAAS,CAACP,EAAE,GAAGA,EAAE;EACjBQ,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACJ,SAAS,CAAC;EACpC,OAAOA,SAAS;AAClB,CAAC;AACW,MAACK,kBAAkB,GAAGA,CAAA,KAAM;EACtC,MAAM;IAAEZ,EAAE;IAAEK;EAAQ,CAAE,GAAGZ,oBAAoB,EAAE;EAC/CQ,GAAA,CAAAY,aAAa,CAAC,MAAM;IAClB,IAAI,CAACC,IAAA,CAAAC,QAAQ,EACX;IACF,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,IAAI,CAAC1B,eAAe,IAAI,CAACgB,QAAQ,CAACE,IAAI,CAACS,aAAa,CAACd,QAAQ,CAACF,KAAK,CAAC,EAAE;MACvGX,eAAe,GAAGc,eAAe,CAACN,EAAE,CAACG,KAAK,CAAC;IACjD;EACA,CAAG,CAAC;EACF,OAAO;IACLH,EAAE;IACFK;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}