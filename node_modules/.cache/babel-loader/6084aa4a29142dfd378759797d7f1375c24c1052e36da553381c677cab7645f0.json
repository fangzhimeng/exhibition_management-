{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../hooks/index.js');\nrequire('../../form/index.js');\nvar error = require('../../../utils/error.js');\nvar constants = require('./constants.js');\nvar uploadDragger = require('./upload-dragger.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar useFormCommonProps = require('../../form/src/hooks/use-form-common-props.js');\nconst _hoisted_1 = [\"onDrop\", \"onDragover\"];\nconst COMPONENT_NAME = \"ElUploadDrag\";\nconst __default__ = vue.defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: uploadDragger.uploadDraggerProps,\n  emits: uploadDragger.uploadDraggerEmits,\n  setup(__props, {\n    emit\n  }) {\n    const uploaderContext = vue.inject(constants.uploadContextKey);\n    if (!uploaderContext) {\n      error.throwError(COMPONENT_NAME, \"usage: <el-upload><el-upload-dragger /></el-upload>\");\n    }\n    const ns = index.useNamespace(\"upload\");\n    const dragover = vue.ref(false);\n    const disabled = useFormCommonProps.useFormDisabled();\n    const onDrop = e => {\n      if (disabled.value) return;\n      dragover.value = false;\n      e.stopPropagation();\n      const files = Array.from(e.dataTransfer.files);\n      const accept = uploaderContext.accept.value;\n      if (!accept) {\n        emit(\"file\", files);\n        return;\n      }\n      const filesFiltered = files.filter(file => {\n        const {\n          type,\n          name\n        } = file;\n        const extension = name.includes(\".\") ? `.${name.split(\".\").pop()}` : \"\";\n        const baseType = type.replace(/\\/.*$/, \"\");\n        return accept.split(\",\").map(type2 => type2.trim()).filter(type2 => type2).some(acceptedType => {\n          if (acceptedType.startsWith(\".\")) {\n            return extension === acceptedType;\n          }\n          if (/\\/\\*$/.test(acceptedType)) {\n            return baseType === acceptedType.replace(/\\/\\*$/, \"\");\n          }\n          if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n            return type === acceptedType;\n          }\n          return false;\n        });\n      });\n      emit(\"file\", filesFiltered);\n    };\n    const onDragover = () => {\n      if (!disabled.value) dragover.value = true;\n    };\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        class: vue.normalizeClass([vue.unref(ns).b(\"dragger\"), vue.unref(ns).is(\"dragover\", dragover.value)]),\n        onDrop: vue.withModifiers(onDrop, [\"prevent\"]),\n        onDragover: vue.withModifiers(onDragover, [\"prevent\"]),\n        onDragleave: _cache[0] || (_cache[0] = vue.withModifiers($event => dragover.value = false, [\"prevent\"]))\n      }, [vue.renderSlot(_ctx.$slots, \"default\")], 42, _hoisted_1);\n    };\n  }\n});\nvar UploadDragger = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-dragger.vue\"]]);\nexports[\"default\"] = UploadDragger;","map":{"version":3,"names":["name","COMPONENT_NAME","uploaderContext","vue","inject","constants","uploadContextKey","error","throwError","ns","index","useNamespace","dragover","ref","disabled","useFormCommonProps","useFormDisabled","onDrop","e","value","stopPropagation","files","Array","from","dataTransfer","accept","emit","filesFiltered","filter","file","type","extension","includes","split","pop","baseType","replace","map","type2","trim","some","acceptedType","startsWith","test","onDragover"],"sources":["../../../../../../packages/components/upload/src/upload-dragger.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('dragger'), ns.is('dragover', dragover)]\"\n    @drop.prevent=\"onDrop\"\n    @dragover.prevent=\"onDragover\"\n    @dragleave.prevent=\"dragover = false\"\n  >\n    <slot />\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { inject, ref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport { throwError } from '@element-plus/utils/error'\nimport { uploadContextKey } from './constants'\nimport { uploadDraggerEmits, uploadDraggerProps } from './upload-dragger'\n\nconst COMPONENT_NAME = 'ElUploadDrag'\n\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\ndefineProps(uploadDraggerProps)\nconst emit = defineEmits(uploadDraggerEmits)\n\nconst uploaderContext = inject(uploadContextKey)\nif (!uploaderContext) {\n  throwError(\n    COMPONENT_NAME,\n    'usage: <el-upload><el-upload-dragger /></el-upload>'\n  )\n}\n\nconst ns = useNamespace('upload')\nconst dragover = ref(false)\nconst disabled = useFormDisabled()\n\nconst onDrop = (e: DragEvent) => {\n  if (disabled.value) return\n  dragover.value = false\n\n  e.stopPropagation()\n\n  const files = Array.from(e.dataTransfer!.files)\n  const accept = uploaderContext.accept.value\n  if (!accept) {\n    emit('file', files)\n    return\n  }\n\n  const filesFiltered = files.filter((file) => {\n    const { type, name } = file\n    const extension = name.includes('.') ? `.${name.split('.').pop()}` : ''\n    const baseType = type.replace(/\\/.*$/, '')\n    return accept\n      .split(',')\n      .map((type) => type.trim())\n      .filter((type) => type)\n      .some((acceptedType) => {\n        if (acceptedType.startsWith('.')) {\n          return extension === acceptedType\n        }\n        if (/\\/\\*$/.test(acceptedType)) {\n          return baseType === acceptedType.replace(/\\/\\*$/, '')\n        }\n        if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n          return type === acceptedType\n        }\n        return false\n      })\n  })\n\n  emit('file', filesFiltered)\n}\n\nconst onDragover = () => {\n  if (!disabled.value) dragover.value = true\n}\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;uCAoBc;EACZA,IAAM,EAAAC;AACR;;;;;;;;IAKM,MAAAC,eAAA,GAAkBC,GAAA,CAAAC,MAAA,CAAOC,SAAA,CAAAC,gBAAgB;IAC/C,IAAI,CAACJ,eAAiB;MACpBK,KAAA,CAAAC,UAAA,CACEP,cAAA,EACA,qDACF;IAAA;IAGI,MAAAQ,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,QAAQ;IAC1B,MAAAC,QAAA,GAAWT,GAAA,CAAAU,GAAA,CAAI,KAAK;IAC1B,MAAMC,QAAA,GAAWC,kBAAA,CAAAC,eAAgB;IAE3B,MAAAC,MAAA,GAAUC,CAAiB;MAC/B,IAAIJ,QAAS,CAAAK,KAAA,EAAO;MACpBP,QAAA,CAASO,KAAQ;MAEjBD,CAAA,CAAEE,eAAgB;MAElB,MAAMC,KAAQ,GAAAC,KAAA,CAAMC,IAAK,CAAAL,CAAA,CAAEM,YAAA,CAAcH,KAAK;MACxC,MAAAI,MAAA,GAASvB,eAAA,CAAgBuB,MAAO,CAAAN,KAAA;MACtC,IAAI,CAACM,MAAQ;QACXC,IAAA,CAAK,QAAQL,KAAK;QAClB;MAAA;MAGF,MAAMM,aAAgB,GAAAN,KAAA,CAAMO,MAAO,CAACC,IAAS;QACrC;UAAEC,IAAA;UAAM9B;QAAS,IAAA6B,IAAA;QACjB,MAAAE,SAAA,GAAY/B,IAAK,CAAAgC,QAAA,CAAS,GAAG,IAAQ,IAAAhC,IAAA,CAAKiC,KAAM,IAAG,CAAE,CAAAC,GAAA,EAAU;QACrE,MAAMC,QAAW,GAAAL,IAAA,CAAKM,OAAQ,UAAS,EAAE;QACzC,OAAOX,MAAA,CACJQ,KAAM,IAAG,EACTI,GAAI,CAACC,KAAA,IAASA,KAAK,CAAAC,IAAA,EAAM,EACzBX,MAAA,CAAQU,KAAA,IAASA,KAAI,CACrB,CAAAE,IAAA,CAAMC,YAAiB;UAClB,IAAAA,YAAA,CAAaC,UAAW,IAAG,CAAG;YAChC,OAAOX,SAAc,KAAAU,YAAA;UAAA;UAEnB,YAAQE,IAAK,CAAAF,YAAY,CAAG;YAC9B,OAAON,QAAa,KAAAM,YAAA,CAAaL,OAAQ,UAAS,EAAE;UAAA;UAElD,qBAAiBO,IAAK,CAAAF,YAAY,CAAG;YACvC,OAAOX,IAAS,KAAAW,YAAA;UAAA;UAEX;QAAA,CACR;MAAA,CACJ;MAEDf,IAAA,CAAK,QAAQC,aAAa;IAAA,CAC5B;IAEA,MAAMiB,UAAA,GAAaA,CAAA,KAAM;MACvB,IAAI,CAAC9B,QAAS,CAAAK,KAAA,EAAOP,QAAA,CAASO,KAAQ;IAAA,CACxC"},"metadata":{},"sourceType":"script","externalDependencies":[]}