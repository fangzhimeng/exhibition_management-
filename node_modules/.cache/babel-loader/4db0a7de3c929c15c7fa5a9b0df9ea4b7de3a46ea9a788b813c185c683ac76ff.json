{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nrequire('../../../../utils/index.js');\nvar buildGrid = require('../builders/build-grid.js');\nvar defaults = require('../defaults.js');\nvar types = require('../../../../utils/types.js');\nvar error = require('../../../../utils/error.js');\nconst SCOPE = \"ElFixedSizeGrid\";\nconst FixedSizeGrid = buildGrid[\"default\"]({\n  name: \"ElFixedSizeGrid\",\n  getColumnPosition: ({\n    columnWidth\n  }, index) => [columnWidth, index * columnWidth],\n  getRowPosition: ({\n    rowHeight\n  }, index) => [rowHeight, index * rowHeight],\n  getEstimatedTotalHeight: ({\n    totalRow,\n    rowHeight\n  }) => rowHeight * totalRow,\n  getEstimatedTotalWidth: ({\n    totalColumn,\n    columnWidth\n  }) => columnWidth * totalColumn,\n  getColumnOffset: ({\n    totalColumn,\n    columnWidth,\n    width\n  }, columnIndex, alignment, scrollLeft, _, scrollBarWidth) => {\n    width = Number(width);\n    const lastColumnOffset = Math.max(0, totalColumn * columnWidth - width);\n    const maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    const minOffset = Math.max(0, columnIndex * columnWidth - width + scrollBarWidth + columnWidth);\n    if (alignment === \"smart\") {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        alignment = defaults.AUTO_ALIGNMENT;\n      } else {\n        alignment = defaults.CENTERED_ALIGNMENT;\n      }\n    }\n    switch (alignment) {\n      case defaults.START_ALIGNMENT:\n        return maxOffset;\n      case defaults.END_ALIGNMENT:\n        return minOffset;\n      case defaults.CENTERED_ALIGNMENT:\n        {\n          const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(width / 2)) {\n            return 0;\n          } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n            return lastColumnOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case defaults.AUTO_ALIGNMENT:\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getRowOffset: ({\n    rowHeight,\n    height,\n    totalRow\n  }, rowIndex, align, scrollTop, _, scrollBarWidth) => {\n    height = Number(height);\n    const lastRowOffset = Math.max(0, totalRow * rowHeight - height);\n    const maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    const minOffset = Math.max(0, rowIndex * rowHeight - height + scrollBarWidth + rowHeight);\n    if (align === defaults.SMART_ALIGNMENT) {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = defaults.AUTO_ALIGNMENT;\n      } else {\n        align = defaults.CENTERED_ALIGNMENT;\n      }\n    }\n    switch (align) {\n      case defaults.START_ALIGNMENT:\n        return maxOffset;\n      case defaults.END_ALIGNMENT:\n        return minOffset;\n      case defaults.CENTERED_ALIGNMENT:\n        {\n          const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(height / 2)) {\n            return 0;\n          } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n            return lastRowOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case defaults.AUTO_ALIGNMENT:\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getColumnStartIndexForOffset: ({\n    columnWidth,\n    totalColumn\n  }, scrollLeft) => Math.max(0, Math.min(totalColumn - 1, Math.floor(scrollLeft / columnWidth))),\n  getColumnStopIndexForStartIndex: ({\n    columnWidth,\n    totalColumn,\n    width\n  }, startIndex, scrollLeft) => {\n    const left = startIndex * columnWidth;\n    const visibleColumnsCount = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1));\n  },\n  getRowStartIndexForOffset: ({\n    rowHeight,\n    totalRow\n  }, scrollTop) => Math.max(0, Math.min(totalRow - 1, Math.floor(scrollTop / rowHeight))),\n  getRowStopIndexForStartIndex: ({\n    rowHeight,\n    totalRow,\n    height\n  }, startIndex, scrollTop) => {\n    const top = startIndex * rowHeight;\n    const numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(totalRow - 1, startIndex + numVisibleRows - 1));\n  },\n  initCache: () => void 0,\n  clearCache: true,\n  validateProps: ({\n    columnWidth,\n    rowHeight\n  }) => {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!types.isNumber(columnWidth)) {\n        error.throwError(SCOPE, `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof columnWidth} was given.\n        `);\n      }\n      if (!types.isNumber(rowHeight)) {\n        error.throwError(SCOPE, `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof rowHeight} was given.\n        `);\n      }\n    }\n  }\n});\nexports[\"default\"] = FixedSizeGrid;","map":{"version":3,"names":["SCOPE","FixedSizeGrid","buildGrid","name","getColumnPosition","columnWidth","index","getRowPosition","rowHeight","getEstimatedTotalHeight","totalRow","getEstimatedTotalWidth","totalColumn","getColumnOffset","width","columnIndex","alignment","scrollLeft","_","scrollBarWidth","Number","lastColumnOffset","Math","max","maxOffset","min","minOffset","defaults","AUTO_ALIGNMENT","CENTERED_ALIGNMENT","START_ALIGNMENT","END_ALIGNMENT","middleOffset","round","ceil","floor","getRowOffset","height","rowIndex","align","scrollTop","lastRowOffset","SMART_ALIGNMENT","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","startIndex","left","visibleColumnsCount","getRowStartIndexForOffset","getRowStopIndexForStartIndex","top","numVisibleRows","initCache","clearCache","validateProps","process","env","NODE_ENV","types","isNumber","error","throwError"],"sources":["../../../../../../../packages/components/virtual-list/src/components/fixed-size-grid.ts"],"sourcesContent":["import { isNumber, throwError } from '@element-plus/utils'\nimport createGrid from '../builders/build-grid'\n\nimport {\n  AUTO_ALIGNMENT,\n  CENTERED_ALIGNMENT,\n  END_ALIGNMENT,\n  SMART_ALIGNMENT,\n  START_ALIGNMENT,\n} from '../defaults'\n\nconst SCOPE = 'ElFixedSizeGrid'\n\nconst FixedSizeGrid = createGrid({\n  name: 'ElFixedSizeGrid',\n  getColumnPosition: ({ columnWidth }, index) => [\n    columnWidth as number,\n    index * (columnWidth as number),\n  ],\n\n  getRowPosition: ({ rowHeight }, index) => [\n    rowHeight as number,\n    index * (rowHeight as number),\n  ],\n\n  getEstimatedTotalHeight: ({ totalRow, rowHeight }) =>\n    (rowHeight as number) * totalRow,\n\n  getEstimatedTotalWidth: ({ totalColumn, columnWidth }) =>\n    (columnWidth as number) * totalColumn,\n\n  getColumnOffset: (\n    { totalColumn, columnWidth, width },\n    columnIndex,\n    alignment,\n    scrollLeft,\n    _,\n    scrollBarWidth\n  ) => {\n    width = Number(width)\n    const lastColumnOffset = Math.max(\n      0,\n      totalColumn * (columnWidth as number) - width\n    )\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * (columnWidth as number)\n    )\n    const minOffset = Math.max(\n      0,\n      columnIndex * (columnWidth as number) -\n        width +\n        scrollBarWidth +\n        (columnWidth as number)\n    )\n\n    if (alignment === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        alignment = AUTO_ALIGNMENT\n      } else {\n        alignment = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (alignment) {\n      case START_ALIGNMENT:\n        return maxOffset\n      case END_ALIGNMENT:\n        return minOffset\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft\n        } else if (minOffset > maxOffset) {\n          return minOffset\n        } else if (scrollLeft < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n    }\n  },\n\n  getRowOffset: (\n    { rowHeight, height, totalRow },\n    rowIndex,\n    align,\n    scrollTop,\n    _,\n    scrollBarWidth\n  ): number => {\n    height = Number(height)\n    const lastRowOffset = Math.max(0, totalRow * (rowHeight as number) - height)\n    const maxOffset = Math.min(lastRowOffset, rowIndex * (rowHeight as number))\n    const minOffset = Math.max(\n      0,\n      rowIndex * (rowHeight as number) -\n        height +\n        scrollBarWidth +\n        (rowHeight as number)\n    )\n\n    if (align === SMART_ALIGNMENT) {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = AUTO_ALIGNMENT\n      } else {\n        align = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (align) {\n      case START_ALIGNMENT:\n        return maxOffset\n      case END_ALIGNMENT:\n        return minOffset\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop\n        } else if (minOffset > maxOffset) {\n          return minOffset\n        } else if (scrollTop < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: ({ columnWidth, totalColumn }, scrollLeft) =>\n    Math.max(\n      0,\n      Math.min(\n        totalColumn - 1,\n        Math.floor(scrollLeft / (columnWidth as number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, totalColumn, width },\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * (columnWidth as number)\n    const visibleColumnsCount = Math.ceil(\n      ((width as number) + scrollLeft - left) / (columnWidth as number)\n    )\n    return Math.max(\n      0,\n      Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1)\n    )\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, totalRow },\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(totalRow - 1, Math.floor(scrollTop / (rowHeight as number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, totalRow, height },\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * (rowHeight as number)\n    const numVisibleRows = Math.ceil(\n      ((height as number) + scrollTop - top) / (rowHeight as number)\n    )\n    return Math.max(\n      0,\n      Math.min(\n        totalRow - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    )\n  },\n  /**\n   * Fixed size grid does not need this cache\n   * Using any to bypass it, TODO: Using type inference to fix this.\n   */\n  initCache: () => undefined as any,\n\n  clearCache: true,\n\n  validateProps: ({ columnWidth, rowHeight }) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isNumber(columnWidth)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof columnWidth} was given.\n        `\n        )\n      }\n\n      if (!isNumber(rowHeight)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof rowHeight} was given.\n        `\n        )\n      }\n    }\n  },\n})\n\nexport default FixedSizeGrid\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}