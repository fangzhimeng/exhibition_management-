{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../hooks/index.js');\nrequire('../../form/index.js');\nrequire('../../../utils/index.js');\nvar text = require('./text.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar useFormCommonProps = require('../../form/src/hooks/use-form-common-props.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar types = require('../../../utils/types.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElText\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: text.textProps,\n  setup(__props) {\n    const props = __props;\n    const textSize = useFormCommonProps.useFormSize();\n    const ns = index.useNamespace(\"text\");\n    const textKls = vue.computed(() => [ns.b(), ns.m(props.type), ns.m(textSize.value), ns.is(\"truncated\", props.truncated), ns.is(\"line-clamp\", !types.isUndefined(props.lineClamp))]);\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tag), {\n        class: vue.normalizeClass(vue.unref(textKls)),\n        style: vue.normalizeStyle({\n          \"-webkit-line-clamp\": _ctx.lineClamp\n        })\n      }, {\n        default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"class\", \"style\"]);\n    };\n  }\n});\nvar Text = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/text/src/text.vue\"]]);\nexports[\"default\"] = Text;","map":{"version":3,"names":["name","textSize","useFormCommonProps","useFormSize","ns","index","useNamespace","textKls","vue","computed","b","m","props","type","value","is","truncated","types","isUndefined","lineClamp"],"sources":["../../../../../../packages/components/text/src/text.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"tag\"\n    :class=\"textKls\"\n    :style=\"{ '-webkit-line-clamp': lineClamp }\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormSize } from '@element-plus/components/form'\nimport { isUndefined } from '@element-plus/utils'\nimport { textProps } from './text'\n\ndefineOptions({\n  name: 'ElText',\n})\n\nconst props = defineProps(textProps)\n\nconst textSize = useFormSize()\nconst ns = useNamespace('text')\n\nconst textKls = computed(() => [\n  ns.b(),\n  ns.m(props.type),\n  ns.m(textSize.value),\n  ns.is('truncated', props.truncated),\n  ns.is('line-clamp', !isUndefined(props.lineClamp)),\n])\n</script>\n"],"mappings":";;;;;;;;;;;;;;uCAiBc;EACZA,IAAM;AACR;;;;;;IAIA,MAAMC,QAAA,GAAWC,kBAAA,CAAAC,WAAY;IACvB,MAAAC,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,MAAM;IAExB,MAAAC,OAAA,GAAUC,GAAA,CAAAC,QAAA,CAAS,MAAM,CAC7BL,EAAA,CAAGM,CAAE,IACLN,EAAA,CAAGO,CAAE,CAAAC,KAAA,CAAMC,IAAI,GACfT,EAAA,CAAGO,CAAE,CAAAV,QAAA,CAASa,KAAK,GACnBV,EAAG,CAAAW,EAAA,CAAG,WAAa,EAAAH,KAAA,CAAMI,SAAS,GAClCZ,EAAA,CAAGW,EAAG,eAAc,CAACE,KAAA,CAAAC,WAAY,CAAAN,KAAA,CAAMO,SAAS,CAAC,EAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}