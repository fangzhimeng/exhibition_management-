{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nconst useDelayedRender = ({\n  indicator,\n  intermediateIndicator,\n  shouldSetIntermediate = () => true,\n  beforeShow,\n  afterShow,\n  afterHide,\n  beforeHide\n}) => {\n  vue.watch(() => vue.unref(indicator), val => {\n    if (val) {\n      beforeShow == null ? void 0 : beforeShow();\n      vue.nextTick(() => {\n        if (!vue.unref(indicator)) return;\n        if (shouldSetIntermediate(\"show\")) {\n          intermediateIndicator.value = true;\n        }\n      });\n    } else {\n      beforeHide == null ? void 0 : beforeHide();\n      vue.nextTick(() => {\n        if (vue.unref(indicator)) return;\n        if (shouldSetIntermediate(\"hide\")) {\n          intermediateIndicator.value = false;\n        }\n      });\n    }\n  });\n  vue.watch(() => intermediateIndicator.value, val => {\n    if (val) {\n      afterShow == null ? void 0 : afterShow();\n    } else {\n      afterHide == null ? void 0 : afterHide();\n    }\n  });\n};\nexports.useDelayedRender = useDelayedRender;","map":{"version":3,"names":["useDelayedRender","indicator","intermediateIndicator","shouldSetIntermediate","beforeShow","afterShow","afterHide","beforeHide","vue","watch","unref","val","nextTick","value"],"sources":["../../../../../packages/hooks/use-intermediate-render/index.ts"],"sourcesContent":["import { nextTick, unref, watch } from 'vue'\n\nimport type { Ref } from 'vue'\n\nexport type UseDelayedRenderProps = {\n  indicator: Ref<boolean>\n  intermediateIndicator: Ref<boolean>\n  shouldSetIntermediate?: (step: 'show' | 'hide') => boolean\n  beforeShow?: () => void\n  beforeHide?: () => void\n  afterShow?: () => void\n  afterHide?: () => void\n}\n\nexport const useDelayedRender = ({\n  indicator,\n  intermediateIndicator,\n  shouldSetIntermediate = () => true,\n  beforeShow,\n  afterShow,\n  afterHide,\n  beforeHide,\n}: UseDelayedRenderProps) => {\n  watch(\n    () => unref(indicator),\n    (val) => {\n      if (val) {\n        beforeShow?.()\n        nextTick(() => {\n          if (!unref(indicator)) return\n          if (shouldSetIntermediate('show')) {\n            intermediateIndicator.value = true\n          }\n        })\n      } else {\n        beforeHide?.()\n        nextTick(() => {\n          if (unref(indicator)) return\n\n          if (shouldSetIntermediate('hide')) {\n            intermediateIndicator.value = false\n          }\n        })\n      }\n    }\n  )\n\n  // because we don't always set the value ourselves, so that we\n  // simply watch the value's state, then invoke the corresponding hook.\n  watch(\n    () => intermediateIndicator.value,\n    (val) => {\n      if (val) {\n        afterShow?.()\n      } else {\n        afterHide?.()\n      }\n    }\n  )\n}\n"],"mappings":";;;;;;AACY,MAACA,gBAAgB,GAAGA,CAAC;EAC/BC,SAAS;EACTC,qBAAqB;EACrBC,qBAAqB,GAAGA,CAAA,KAAM,IAAI;EAClCC,UAAU;EACVC,SAAS;EACTC,SAAS;EACTC;AACF,CAAC,KAAK;EACJC,GAAA,CAAAC,KAAK,CAAC,MAAMD,GAAA,CAAAE,KAAK,CAACT,SAAS,CAAC,EAAGU,GAAG,IAAK;IACrC,IAAIA,GAAG,EAAE;MACPP,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,EAAE;MAC1CI,GAAA,CAAAI,QAAQ,CAAC,MAAM;QACb,IAAI,CAACJ,GAAA,CAAAE,KAAK,CAACT,SAAS,CAAC,EACnB;QACF,IAAIE,qBAAqB,CAAC,MAAM,CAAC,EAAE;UACjCD,qBAAqB,CAACW,KAAK,GAAG,IAAI;QAC5C;MACA,CAAO,CAAC;IACR,CAAK,MAAM;MACLN,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,EAAE;MAC1CC,GAAA,CAAAI,QAAQ,CAAC,MAAM;QACb,IAAIJ,GAAA,CAAAE,KAAK,CAACT,SAAS,CAAC,EAClB;QACF,IAAIE,qBAAqB,CAAC,MAAM,CAAC,EAAE;UACjCD,qBAAqB,CAACW,KAAK,GAAG,KAAK;QAC7C;MACA,CAAO,CAAC;IACR;EACA,CAAG,CAAC;EACFL,GAAA,CAAAC,KAAK,CAAC,MAAMP,qBAAqB,CAACW,KAAK,EAAGF,GAAG,IAAK;IAChD,IAAIA,GAAG,EAAE;MACPN,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,SAAS,EAAE;IAC9C,CAAK,MAAM;MACLC,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,SAAS,EAAE;IAC9C;EACA,CAAG,CAAC;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}