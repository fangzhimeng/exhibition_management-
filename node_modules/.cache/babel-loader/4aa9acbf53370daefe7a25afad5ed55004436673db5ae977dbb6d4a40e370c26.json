{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nvar core = require('@vueuse/core');\nvar iconsVue = require('@element-plus/icons-vue');\nrequire('../../../hooks/index.js');\nrequire('../../../utils/index.js');\nrequire('../../../constants/index.js');\nvar index$5 = require('../../input/index.js');\nvar index$3 = require('../../scrollbar/index.js');\nvar index$2 = require('../../tooltip/index.js');\nvar index$4 = require('../../icon/index.js');\nrequire('../../form/index.js');\nvar autocomplete = require('./autocomplete.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-attrs/index.js');\nvar useFormCommonProps = require('../../form/src/hooks/use-form-common-props.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar rand = require('../../../utils/rand.js');\nvar shared = require('@vue/shared');\nvar error = require('../../../utils/error.js');\nvar event = require('../../../constants/event.js');\nconst _hoisted_1 = [\"aria-expanded\", \"aria-owns\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"id\", \"aria-selected\", \"onClick\"];\nconst COMPONENT_NAME = \"ElAutocomplete\";\nconst __default__ = vue.defineComponent({\n  name: COMPONENT_NAME,\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: autocomplete.autocompleteProps,\n  emits: autocomplete.autocompleteEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const attrs = index.useAttrs();\n    const rawAttrs = vue.useAttrs();\n    const disabled = useFormCommonProps.useFormDisabled();\n    const ns = index$1.useNamespace(\"autocomplete\");\n    const inputRef = vue.ref();\n    const regionRef = vue.ref();\n    const popperRef = vue.ref();\n    const listboxRef = vue.ref();\n    let readonly = false;\n    let ignoreFocusEvent = false;\n    const suggestions = vue.ref([]);\n    const highlightedIndex = vue.ref(-1);\n    const dropdownWidth = vue.ref(\"\");\n    const activated = vue.ref(false);\n    const suggestionDisabled = vue.ref(false);\n    const loading = vue.ref(false);\n    const listboxId = vue.computed(() => ns.b(String(rand.generateId())));\n    const styles = vue.computed(() => rawAttrs.style);\n    const suggestionVisible = vue.computed(() => {\n      const isValidData = suggestions.value.length > 0;\n      return (isValidData || loading.value) && activated.value;\n    });\n    const suggestionLoading = vue.computed(() => !props.hideLoading && loading.value);\n    const refInput = vue.computed(() => {\n      if (inputRef.value) {\n        return Array.from(inputRef.value.$el.querySelectorAll(\"input\"));\n      }\n      return [];\n    });\n    const onSuggestionShow = () => {\n      if (suggestionVisible.value) {\n        dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`;\n      }\n    };\n    const onHide = () => {\n      highlightedIndex.value = -1;\n    };\n    const getData = async queryString => {\n      if (suggestionDisabled.value) return;\n      const cb = suggestionList => {\n        loading.value = false;\n        if (suggestionDisabled.value) return;\n        if (shared.isArray(suggestionList)) {\n          suggestions.value = suggestionList;\n          highlightedIndex.value = props.highlightFirstItem ? 0 : -1;\n        } else {\n          error.throwError(COMPONENT_NAME, \"autocomplete suggestions must be an array\");\n        }\n      };\n      loading.value = true;\n      if (shared.isArray(props.fetchSuggestions)) {\n        cb(props.fetchSuggestions);\n      } else {\n        const result = await props.fetchSuggestions(queryString, cb);\n        if (shared.isArray(result)) cb(result);\n      }\n    };\n    const debouncedGetData = lodashUnified.debounce(getData, props.debounce);\n    const handleInput = value => {\n      const valuePresented = !!value;\n      emit(event.INPUT_EVENT, value);\n      emit(event.UPDATE_MODEL_EVENT, value);\n      suggestionDisabled.value = false;\n      activated.value || (activated.value = valuePresented);\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true;\n        suggestions.value = [];\n        return;\n      }\n      debouncedGetData(value);\n    };\n    const handleMouseDown = event => {\n      var _a;\n      if (disabled.value) return;\n      if (((_a = event.target) == null ? void 0 : _a.tagName) !== \"INPUT\" || refInput.value.includes(document.activeElement)) {\n        activated.value = true;\n      }\n    };\n    const handleChange = value => {\n      emit(event.CHANGE_EVENT, value);\n    };\n    const handleFocus = evt => {\n      if (!ignoreFocusEvent) {\n        activated.value = true;\n        emit(\"focus\", evt);\n        if (props.triggerOnFocus && !readonly) {\n          debouncedGetData(String(props.modelValue));\n        }\n      } else {\n        ignoreFocusEvent = false;\n      }\n    };\n    const handleBlur = evt => {\n      setTimeout(() => {\n        var _a;\n        if ((_a = popperRef.value) == null ? void 0 : _a.isFocusInsideContent()) {\n          ignoreFocusEvent = true;\n          return;\n        }\n        activated.value && close();\n        emit(\"blur\", evt);\n      });\n    };\n    const handleClear = () => {\n      activated.value = false;\n      emit(event.UPDATE_MODEL_EVENT, \"\");\n      emit(\"clear\");\n    };\n    const handleKeyEnter = async () => {\n      if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {\n        handleSelect(suggestions.value[highlightedIndex.value]);\n      } else if (props.selectWhenUnmatched) {\n        emit(\"select\", {\n          value: props.modelValue\n        });\n        suggestions.value = [];\n        highlightedIndex.value = -1;\n      }\n    };\n    const handleKeyEscape = evt => {\n      if (suggestionVisible.value) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        close();\n      }\n    };\n    const close = () => {\n      activated.value = false;\n    };\n    const focus = () => {\n      var _a;\n      (_a = inputRef.value) == null ? void 0 : _a.focus();\n    };\n    const blur = () => {\n      var _a;\n      (_a = inputRef.value) == null ? void 0 : _a.blur();\n    };\n    const handleSelect = async item => {\n      emit(event.INPUT_EVENT, item[props.valueKey]);\n      emit(event.UPDATE_MODEL_EVENT, item[props.valueKey]);\n      emit(\"select\", item);\n      suggestions.value = [];\n      highlightedIndex.value = -1;\n    };\n    const highlight = index => {\n      if (!suggestionVisible.value || loading.value) return;\n      if (index < 0) {\n        highlightedIndex.value = -1;\n        return;\n      }\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1;\n      }\n      const suggestion = regionRef.value.querySelector(`.${ns.be(\"suggestion\", \"wrap\")}`);\n      const suggestionList = suggestion.querySelectorAll(`.${ns.be(\"suggestion\", \"list\")} li`);\n      const highlightItem = suggestionList[index];\n      const scrollTop = suggestion.scrollTop;\n      const {\n        offsetTop,\n        scrollHeight\n      } = highlightItem;\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight;\n      }\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight;\n      }\n      highlightedIndex.value = index;\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", `${listboxId.value}-item-${highlightedIndex.value}`);\n    };\n    core.onClickOutside(listboxRef, () => {\n      suggestionVisible.value && close();\n    });\n    vue.onMounted(() => {\n      ;\n      inputRef.value.ref.setAttribute(\"role\", \"textbox\");\n      inputRef.value.ref.setAttribute(\"aria-autocomplete\", \"list\");\n      inputRef.value.ref.setAttribute(\"aria-controls\", \"id\");\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", `${listboxId.value}-item-${highlightedIndex.value}`);\n      readonly = inputRef.value.ref.hasAttribute(\"readonly\");\n    });\n    expose({\n      highlightedIndex,\n      activated,\n      loading,\n      inputRef,\n      popperRef,\n      suggestions,\n      handleSelect,\n      handleKeyEnter,\n      focus,\n      blur,\n      close,\n      highlight\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.unref(index$2.ElTooltip), {\n        ref_key: \"popperRef\",\n        ref: popperRef,\n        visible: vue.unref(suggestionVisible),\n        placement: _ctx.placement,\n        \"fallback-placements\": [\"bottom-start\", \"top-start\"],\n        \"popper-class\": [vue.unref(ns).e(\"popper\"), _ctx.popperClass],\n        teleported: _ctx.teleported,\n        \"gpu-acceleration\": false,\n        pure: \"\",\n        \"manual-mode\": \"\",\n        effect: \"light\",\n        trigger: \"click\",\n        transition: `${vue.unref(ns).namespace.value}-zoom-in-top`,\n        persistent: \"\",\n        role: \"listbox\",\n        onBeforeShow: onSuggestionShow,\n        onHide\n      }, {\n        content: vue.withCtx(() => [vue.createElementVNode(\"div\", {\n          ref_key: \"regionRef\",\n          ref: regionRef,\n          class: vue.normalizeClass([vue.unref(ns).b(\"suggestion\"), vue.unref(ns).is(\"loading\", vue.unref(suggestionLoading))]),\n          style: vue.normalizeStyle({\n            [_ctx.fitInputWidth ? \"width\" : \"minWidth\"]: dropdownWidth.value,\n            outline: \"none\"\n          }),\n          role: \"region\"\n        }, [vue.createVNode(vue.unref(index$3.ElScrollbar), {\n          id: vue.unref(listboxId),\n          tag: \"ul\",\n          \"wrap-class\": vue.unref(ns).be(\"suggestion\", \"wrap\"),\n          \"view-class\": vue.unref(ns).be(\"suggestion\", \"list\"),\n          role: \"listbox\"\n        }, {\n          default: vue.withCtx(() => [vue.unref(suggestionLoading) ? (vue.openBlock(), vue.createElementBlock(\"li\", _hoisted_2, [vue.createVNode(vue.unref(index$4.ElIcon), {\n            class: vue.normalizeClass(vue.unref(ns).is(\"loading\"))\n          }, {\n            default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.Loading))]),\n            _: 1\n          }, 8, [\"class\"])])) : (vue.openBlock(true), vue.createElementBlock(vue.Fragment, {\n            key: 1\n          }, vue.renderList(suggestions.value, (item, index) => {\n            return vue.openBlock(), vue.createElementBlock(\"li\", {\n              id: `${vue.unref(listboxId)}-item-${index}`,\n              key: index,\n              class: vue.normalizeClass({\n                highlighted: highlightedIndex.value === index\n              }),\n              role: \"option\",\n              \"aria-selected\": highlightedIndex.value === index,\n              onClick: $event => handleSelect(item)\n            }, [vue.renderSlot(_ctx.$slots, \"default\", {\n              item\n            }, () => [vue.createTextVNode(vue.toDisplayString(item[_ctx.valueKey]), 1)])], 10, _hoisted_3);\n          }), 128))]),\n          _: 3\n        }, 8, [\"id\", \"wrap-class\", \"view-class\"])], 6)]),\n        default: vue.withCtx(() => [vue.createElementVNode(\"div\", {\n          ref_key: \"listboxRef\",\n          ref: listboxRef,\n          class: vue.normalizeClass([vue.unref(ns).b(), _ctx.$attrs.class]),\n          style: vue.normalizeStyle(vue.unref(styles)),\n          role: \"combobox\",\n          \"aria-haspopup\": \"listbox\",\n          \"aria-expanded\": vue.unref(suggestionVisible),\n          \"aria-owns\": vue.unref(listboxId)\n        }, [vue.createVNode(vue.unref(index$5.ElInput), vue.mergeProps({\n          ref_key: \"inputRef\",\n          ref: inputRef\n        }, vue.unref(attrs), {\n          clearable: _ctx.clearable,\n          disabled: vue.unref(disabled),\n          name: _ctx.name,\n          \"model-value\": _ctx.modelValue,\n          onInput: handleInput,\n          onChange: handleChange,\n          onFocus: handleFocus,\n          onBlur: handleBlur,\n          onClear: handleClear,\n          onKeydown: [_cache[0] || (_cache[0] = vue.withKeys(vue.withModifiers($event => highlight(highlightedIndex.value - 1), [\"prevent\"]), [\"up\"])), _cache[1] || (_cache[1] = vue.withKeys(vue.withModifiers($event => highlight(highlightedIndex.value + 1), [\"prevent\"]), [\"down\"])), vue.withKeys(handleKeyEnter, [\"enter\"]), vue.withKeys(close, [\"tab\"]), vue.withKeys(handleKeyEscape, [\"esc\"])],\n          onMousedown: handleMouseDown\n        }), vue.createSlots({\n          _: 2\n        }, [_ctx.$slots.prepend ? {\n          name: \"prepend\",\n          fn: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"prepend\")])\n        } : void 0, _ctx.$slots.append ? {\n          name: \"append\",\n          fn: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"append\")])\n        } : void 0, _ctx.$slots.prefix ? {\n          name: \"prefix\",\n          fn: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"prefix\")])\n        } : void 0, _ctx.$slots.suffix ? {\n          name: \"suffix\",\n          fn: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"suffix\")])\n        } : void 0]), 1040, [\"clearable\", \"disabled\", \"name\", \"model-value\", \"onKeydown\"])], 14, _hoisted_1)]),\n        _: 3\n      }, 8, [\"visible\", \"placement\", \"popper-class\", \"teleported\", \"transition\"]);\n    };\n  }\n});\nvar Autocomplete = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/autocomplete/src/autocomplete.vue\"]]);\nexports[\"default\"] = Autocomplete;","map":{"version":3,"names":["name","COMPONENT_NAME","inheritAttrs","attrs","index","useAttrs","rawAttrs","vue","disabled","useFormCommonProps","useFormDisabled","ns","index$1","useNamespace","inputRef","ref","regionRef","popperRef","listboxRef","readonly","ignoreFocusEvent","suggestions","highlightedIndex","dropdownWidth","activated","suggestionDisabled","loading","listboxId","computed","b","String","rand","generateId","styles","style","suggestionVisible","isValidData","value","length","suggestionLoading","props","hideLoading","refInput","Array","from","$el","querySelectorAll","onSuggestionShow","offsetWidth","onHide","getData","queryString","cb","suggestionList","shared","isArray","highlightFirstItem","error","throwError","fetchSuggestions","result","debouncedGetData","lodashUnified","debounce","handleInput","valuePresented","emit","event","INPUT_EVENT","UPDATE_MODEL_EVENT","triggerOnFocus","handleMouseDown","_a","target","tagName","includes","document","activeElement","handleChange","CHANGE_EVENT","handleFocus","evt","modelValue","handleBlur","setTimeout","isFocusInsideContent","close","handleClear","handleKeyEnter","handleSelect","selectWhenUnmatched","handleKeyEscape","preventDefault","stopPropagation","focus","blur","item","valueKey","highlight","suggestion","querySelector","be","highlightItem","scrollTop","offsetTop","scrollHeight","clientHeight","setAttribute","core","onClickOutside","onMounted","hasAttribute","expose"],"sources":["../../../../../../packages/components/autocomplete/src/autocomplete.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popperRef\"\n    :visible=\"suggestionVisible\"\n    :placement=\"placement\"\n    :fallback-placements=\"['bottom-start', 'top-start']\"\n    :popper-class=\"[ns.e('popper'), popperClass]\"\n    :teleported=\"teleported\"\n    :gpu-acceleration=\"false\"\n    pure\n    manual-mode\n    effect=\"light\"\n    trigger=\"click\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    persistent\n    role=\"listbox\"\n    @before-show=\"onSuggestionShow\"\n    @hide=\"onHide\"\n  >\n    <div\n      ref=\"listboxRef\"\n      :class=\"[ns.b(), $attrs.class]\"\n      :style=\"styles\"\n      role=\"combobox\"\n      aria-haspopup=\"listbox\"\n      :aria-expanded=\"suggestionVisible\"\n      :aria-owns=\"listboxId\"\n    >\n      <el-input\n        ref=\"inputRef\"\n        v-bind=\"attrs\"\n        :clearable=\"clearable\"\n        :disabled=\"disabled\"\n        :name=\"name\"\n        :model-value=\"modelValue\"\n        @input=\"handleInput\"\n        @change=\"handleChange\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @clear=\"handleClear\"\n        @keydown.up.prevent=\"highlight(highlightedIndex - 1)\"\n        @keydown.down.prevent=\"highlight(highlightedIndex + 1)\"\n        @keydown.enter=\"handleKeyEnter\"\n        @keydown.tab=\"close\"\n        @keydown.esc=\"handleKeyEscape\"\n        @mousedown=\"handleMouseDown\"\n      >\n        <template v-if=\"$slots.prepend\" #prepend>\n          <slot name=\"prepend\" />\n        </template>\n        <template v-if=\"$slots.append\" #append>\n          <slot name=\"append\" />\n        </template>\n        <template v-if=\"$slots.prefix\" #prefix>\n          <slot name=\"prefix\" />\n        </template>\n        <template v-if=\"$slots.suffix\" #suffix>\n          <slot name=\"suffix\" />\n        </template>\n      </el-input>\n    </div>\n    <template #content>\n      <div\n        ref=\"regionRef\"\n        :class=\"[ns.b('suggestion'), ns.is('loading', suggestionLoading)]\"\n        :style=\"{\n          [fitInputWidth ? 'width' : 'minWidth']: dropdownWidth,\n          outline: 'none',\n        }\"\n        role=\"region\"\n      >\n        <el-scrollbar\n          :id=\"listboxId\"\n          tag=\"ul\"\n          :wrap-class=\"ns.be('suggestion', 'wrap')\"\n          :view-class=\"ns.be('suggestion', 'list')\"\n          role=\"listbox\"\n        >\n          <li v-if=\"suggestionLoading\">\n            <el-icon :class=\"ns.is('loading')\">\n              <Loading />\n            </el-icon>\n          </li>\n          <template v-else>\n            <li\n              v-for=\"(item, index) in suggestions\"\n              :id=\"`${listboxId}-item-${index}`\"\n              :key=\"index\"\n              :class=\"{ highlighted: highlightedIndex === index }\"\n              role=\"option\"\n              :aria-selected=\"highlightedIndex === index\"\n              @click=\"handleSelect(item)\"\n            >\n              <slot :item=\"item\">{{ item[valueKey] }}</slot>\n            </li>\n          </template>\n        </el-scrollbar>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, onMounted, ref, useAttrs as useRawAttrs } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { onClickOutside } from '@vueuse/core'\nimport { Loading } from '@element-plus/icons-vue'\nimport { useAttrs, useNamespace } from '@element-plus/hooks'\nimport { generateId, isArray, throwError } from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport ElInput from '@element-plus/components/input'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElIcon from '@element-plus/components/icon'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport { autocompleteEmits, autocompleteProps } from './autocomplete'\nimport type { AutocompleteData } from './autocomplete'\n\nimport type { StyleValue } from 'vue'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\nimport type { InputInstance } from '@element-plus/components/input'\n\nconst COMPONENT_NAME = 'ElAutocomplete'\ndefineOptions({\n  name: COMPONENT_NAME,\n  inheritAttrs: false,\n})\n\nconst props = defineProps(autocompleteProps)\nconst emit = defineEmits(autocompleteEmits)\n\nconst attrs = useAttrs()\nconst rawAttrs = useRawAttrs()\nconst disabled = useFormDisabled()\nconst ns = useNamespace('autocomplete')\n\nconst inputRef = ref<InputInstance>()\nconst regionRef = ref<HTMLElement>()\nconst popperRef = ref<TooltipInstance>()\nconst listboxRef = ref<HTMLElement>()\n\nlet readonly = false\nlet ignoreFocusEvent = false\nconst suggestions = ref<AutocompleteData>([])\nconst highlightedIndex = ref(-1)\nconst dropdownWidth = ref('')\nconst activated = ref(false)\nconst suggestionDisabled = ref(false)\nconst loading = ref(false)\n\nconst listboxId = computed(() => ns.b(String(generateId())))\nconst styles = computed(() => rawAttrs.style as StyleValue)\n\nconst suggestionVisible = computed(() => {\n  const isValidData = suggestions.value.length > 0\n  return (isValidData || loading.value) && activated.value\n})\n\nconst suggestionLoading = computed(() => !props.hideLoading && loading.value)\n\nconst refInput = computed<HTMLInputElement[]>(() => {\n  if (inputRef.value) {\n    return Array.from<HTMLInputElement>(\n      inputRef.value.$el.querySelectorAll('input')\n    )\n  }\n  return []\n})\n\nconst onSuggestionShow = () => {\n  if (suggestionVisible.value) {\n    dropdownWidth.value = `${inputRef.value!.$el.offsetWidth}px`\n  }\n}\n\nconst onHide = () => {\n  highlightedIndex.value = -1\n}\n\nconst getData = async (queryString: string) => {\n  if (suggestionDisabled.value) return\n\n  const cb = (suggestionList: AutocompleteData) => {\n    loading.value = false\n    if (suggestionDisabled.value) return\n\n    if (isArray(suggestionList)) {\n      suggestions.value = suggestionList\n      highlightedIndex.value = props.highlightFirstItem ? 0 : -1\n    } else {\n      throwError(COMPONENT_NAME, 'autocomplete suggestions must be an array')\n    }\n  }\n\n  loading.value = true\n  if (isArray(props.fetchSuggestions)) {\n    cb(props.fetchSuggestions)\n  } else {\n    const result = await props.fetchSuggestions(queryString, cb)\n    if (isArray(result)) cb(result)\n  }\n}\nconst debouncedGetData = debounce(getData, props.debounce)\n\nconst handleInput = (value: string) => {\n  const valuePresented = !!value\n\n  emit(INPUT_EVENT, value)\n  emit(UPDATE_MODEL_EVENT, value)\n\n  suggestionDisabled.value = false\n  activated.value ||= valuePresented\n\n  if (!props.triggerOnFocus && !value) {\n    suggestionDisabled.value = true\n    suggestions.value = []\n    return\n  }\n\n  debouncedGetData(value)\n}\n\nconst handleMouseDown = (event: MouseEvent) => {\n  if (disabled.value) return\n  if (\n    (event.target as HTMLElement)?.tagName !== 'INPUT' ||\n    refInput.value.includes(document.activeElement as HTMLInputElement)\n  ) {\n    activated.value = true\n  }\n}\n\nconst handleChange = (value: string) => {\n  emit(CHANGE_EVENT, value)\n}\n\nconst handleFocus = (evt: FocusEvent) => {\n  if (!ignoreFocusEvent) {\n    activated.value = true\n    emit('focus', evt)\n\n    if (props.triggerOnFocus && !readonly) {\n      debouncedGetData(String(props.modelValue))\n    }\n  } else {\n    ignoreFocusEvent = false\n  }\n}\n\nconst handleBlur = (evt: FocusEvent) => {\n  setTimeout(() => {\n    // validate current focus event is inside el-tooltip-content\n    // if so, ignore the blur event and the next focus event\n    if (popperRef.value?.isFocusInsideContent()) {\n      ignoreFocusEvent = true\n      return\n    }\n    activated.value && close()\n    emit('blur', evt)\n  })\n}\n\nconst handleClear = () => {\n  activated.value = false\n  emit(UPDATE_MODEL_EVENT, '')\n  emit('clear')\n}\n\nconst handleKeyEnter = async () => {\n  if (\n    suggestionVisible.value &&\n    highlightedIndex.value >= 0 &&\n    highlightedIndex.value < suggestions.value.length\n  ) {\n    handleSelect(suggestions.value[highlightedIndex.value])\n  } else if (props.selectWhenUnmatched) {\n    emit('select', { value: props.modelValue })\n    suggestions.value = []\n    highlightedIndex.value = -1\n  }\n}\n\nconst handleKeyEscape = (evt: Event) => {\n  if (suggestionVisible.value) {\n    evt.preventDefault()\n    evt.stopPropagation()\n    close()\n  }\n}\n\nconst close = () => {\n  activated.value = false\n}\n\nconst focus = () => {\n  inputRef.value?.focus()\n}\n\nconst blur = () => {\n  inputRef.value?.blur()\n}\n\nconst handleSelect = async (item: any) => {\n  emit(INPUT_EVENT, item[props.valueKey])\n  emit(UPDATE_MODEL_EVENT, item[props.valueKey])\n  emit('select', item)\n  suggestions.value = []\n  highlightedIndex.value = -1\n}\n\nconst highlight = (index: number) => {\n  if (!suggestionVisible.value || loading.value) return\n\n  if (index < 0) {\n    highlightedIndex.value = -1\n    return\n  }\n\n  if (index >= suggestions.value.length) {\n    index = suggestions.value.length - 1\n  }\n  const suggestion = regionRef.value!.querySelector(\n    `.${ns.be('suggestion', 'wrap')}`\n  )!\n  const suggestionList = suggestion.querySelectorAll<HTMLElement>(\n    `.${ns.be('suggestion', 'list')} li`\n  )!\n  const highlightItem = suggestionList[index]\n  const scrollTop = suggestion.scrollTop\n  const { offsetTop, scrollHeight } = highlightItem\n\n  if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n    suggestion.scrollTop += scrollHeight\n  }\n  if (offsetTop < scrollTop) {\n    suggestion.scrollTop -= scrollHeight\n  }\n  highlightedIndex.value = index\n  // TODO: use Volar generate dts to fix it.\n  ;(inputRef.value as any).ref!.setAttribute(\n    'aria-activedescendant',\n    `${listboxId.value}-item-${highlightedIndex.value}`\n  )\n}\n\nonClickOutside(listboxRef, () => {\n  suggestionVisible.value && close()\n})\n\nonMounted(() => {\n  // TODO: use Volar generate dts to fix it.\n  ;(inputRef.value as any).ref!.setAttribute('role', 'textbox')\n  ;(inputRef.value as any).ref!.setAttribute('aria-autocomplete', 'list')\n  ;(inputRef.value as any).ref!.setAttribute('aria-controls', 'id')\n  ;(inputRef.value as any).ref!.setAttribute(\n    'aria-activedescendant',\n    `${listboxId.value}-item-${highlightedIndex.value}`\n  )\n  // get readonly attr\n  readonly = (inputRef.value as any).ref!.hasAttribute('readonly')\n})\n\ndefineExpose({\n  /** @description the index of the currently highlighted item */\n  highlightedIndex,\n  /** @description autocomplete whether activated */\n  activated,\n  /** @description remote search loading status */\n  loading,\n  /** @description el-input component instance */\n  inputRef,\n  /** @description el-tooltip component instance */\n  popperRef,\n  /** @description fetch suggestions result */\n  suggestions,\n  /** @description triggers when a suggestion is clicked */\n  handleSelect,\n  /** @description handle keyboard enter event */\n  handleKeyEnter,\n  /** @description focus the input element */\n  focus,\n  /** @description blur the input element */\n  blur,\n  /** @description close suggestion */\n  close,\n  /** @description highlight an item in a suggestion */\n  highlight,\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}