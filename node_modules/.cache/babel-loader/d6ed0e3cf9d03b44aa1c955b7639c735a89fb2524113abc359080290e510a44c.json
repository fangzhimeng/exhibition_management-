{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar shared = require('@vue/shared');\nvar index = require('../../collapse-transition/index.js');\nvar index$1 = require('../../checkbox/index.js');\nvar index$2 = require('../../icon/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nvar treeNodeContent = require('./tree-node-content.js');\nvar util = require('./model/util.js');\nvar useNodeExpandEventBroadcast = require('./model/useNodeExpandEventBroadcast.js');\nvar useDragNode = require('./model/useDragNode.js');\nvar node = require('./model/node.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index$3 = require('../../../hooks/use-namespace/index.js');\nvar error = require('../../../utils/error.js');\nconst _sfc_main = vue.defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElCollapseTransition: index[\"default\"],\n    ElCheckbox: index$1.ElCheckbox,\n    NodeContent: treeNodeContent[\"default\"],\n    ElIcon: index$2.ElIcon,\n    Loading: iconsVue.Loading\n  },\n  props: {\n    node: {\n      type: node[\"default\"],\n      default: () => ({})\n    },\n    props: {\n      type: Object,\n      default: () => ({})\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"node-expand\"],\n  setup(props, ctx) {\n    const ns = index$3.useNamespace(\"tree\");\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast.useNodeExpandEventBroadcast(props);\n    const tree = vue.inject(\"RootTree\");\n    const expanded = vue.ref(false);\n    const childNodeRendered = vue.ref(false);\n    const oldChecked = vue.ref(null);\n    const oldIndeterminate = vue.ref(null);\n    const node$ = vue.ref(null);\n    const dragEvents = vue.inject(useDragNode.dragEventsKey);\n    const instance = vue.getCurrentInstance();\n    vue.provide(\"NodeInstance\", instance);\n    if (!tree) {\n      error.debugWarn(\"Tree\", \"Can not find node's tree.\");\n    }\n    if (props.node.expanded) {\n      expanded.value = true;\n      childNodeRendered.value = true;\n    }\n    const childrenKey = tree.props.props[\"children\"] || \"children\";\n    vue.watch(() => {\n      const children = props.node.data[childrenKey];\n      return children && [...children];\n    }, () => {\n      props.node.updateChildren();\n    });\n    vue.watch(() => props.node.indeterminate, val => {\n      handleSelectChange(props.node.checked, val);\n    });\n    vue.watch(() => props.node.checked, val => {\n      handleSelectChange(val, props.node.indeterminate);\n    });\n    vue.watch(() => props.node.expanded, val => {\n      vue.nextTick(() => expanded.value = val);\n      if (val) {\n        childNodeRendered.value = true;\n      }\n    });\n    const getNodeKey = node => {\n      return util.getNodeKey(tree.props.nodeKey, node.data);\n    };\n    const getNodeClass = node => {\n      const nodeClassFunc = props.props.class;\n      if (!nodeClassFunc) {\n        return {};\n      }\n      let className;\n      if (shared.isFunction(nodeClassFunc)) {\n        const {\n          data\n        } = node;\n        className = nodeClassFunc(data, node);\n      } else {\n        className = nodeClassFunc;\n      }\n      if (shared.isString(className)) {\n        return {\n          [className]: true\n        };\n      } else {\n        return className;\n      }\n    };\n    const handleSelectChange = (checked, indeterminate) => {\n      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {\n        tree.ctx.emit(\"check-change\", props.node.data, checked, indeterminate);\n      }\n      oldChecked.value = checked;\n      oldIndeterminate.value = indeterminate;\n    };\n    const handleClick = e => {\n      util.handleCurrentChange(tree.store, tree.ctx.emit, () => tree.store.value.setCurrentNode(props.node));\n      tree.currentNode.value = props.node;\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick();\n      }\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: {\n            checked: !props.node.checked\n          }\n        });\n      }\n      tree.ctx.emit(\"node-click\", props.node.data, props.node, instance, e);\n    };\n    const handleContextMenu = event => {\n      if (tree.instance.vnode.props[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      tree.ctx.emit(\"node-contextmenu\", event, props.node.data, props.node, instance);\n    };\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return;\n      if (expanded.value) {\n        tree.ctx.emit(\"node-collapse\", props.node.data, props.node, instance);\n        props.node.collapse();\n      } else {\n        props.node.expand();\n        ctx.emit(\"node-expand\", props.node.data, props.node, instance);\n      }\n    };\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);\n      vue.nextTick(() => {\n        const store = tree.store.value;\n        tree.ctx.emit(\"check\", props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    };\n    const handleChildNodeExpand = (nodeData, node, instance2) => {\n      broadcastExpanded(node);\n      tree.ctx.emit(\"node-expand\", nodeData, node, instance2);\n    };\n    const handleDragStart = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragStart({\n        event,\n        treeNode: props\n      });\n    };\n    const handleDragOver = event => {\n      event.preventDefault();\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: {\n          $el: node$.value,\n          node: props.node\n        }\n      });\n    };\n    const handleDrop = event => {\n      event.preventDefault();\n    };\n    const handleDragEnd = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragEnd(event);\n    };\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight: iconsVue.CaretRight\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"];\nconst _hoisted_2 = [\"aria-expanded\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = vue.resolveComponent(\"el-icon\");\n  const _component_el_checkbox = vue.resolveComponent(\"el-checkbox\");\n  const _component_loading = vue.resolveComponent(\"loading\");\n  const _component_node_content = vue.resolveComponent(\"node-content\");\n  const _component_el_tree_node = vue.resolveComponent(\"el-tree-node\");\n  const _component_el_collapse_transition = vue.resolveComponent(\"el-collapse-transition\");\n  return vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: vue.normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.node.isCurrent), _ctx.ns.is(\"hidden\", !_ctx.node.visible), _ctx.ns.is(\"focusable\", !_ctx.node.disabled), _ctx.ns.is(\"checked\", !_ctx.node.disabled && _ctx.node.checked), _ctx.getNodeClass(_ctx.node)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[1] || (_cache[1] = vue.withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),\n    onDragstart: _cache[3] || (_cache[3] = vue.withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), [\"stop\"])),\n    onDragover: _cache[4] || (_cache[4] = vue.withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), [\"stop\"])),\n    onDragend: _cache[5] || (_cache[5] = vue.withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), [\"stop\"])),\n    onDrop: _cache[6] || (_cache[6] = vue.withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"stop\"]))\n  }, [vue.createElementVNode(\"div\", {\n    class: vue.normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: vue.normalizeStyle({\n      paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    })\n  }, [_ctx.tree.props.icon || _ctx.CaretRight ? (vue.openBlock(), vue.createBlock(_component_el_icon, {\n    key: 0,\n    class: vue.normalizeClass([_ctx.ns.be(\"node\", \"expand-icon\"), _ctx.ns.is(\"leaf\", _ctx.node.isLeaf), {\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }]),\n    onClick: vue.withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : vue.createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (vue.openBlock(), vue.createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: _cache[0] || (_cache[0] = vue.withModifiers(() => {}, [\"stop\"])),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : vue.createCommentVNode(\"v-if\", true), _ctx.node.loading ? (vue.openBlock(), vue.createBlock(_component_el_icon, {\n    key: 2,\n    class: vue.normalizeClass([_ctx.ns.be(\"node\", \"loading-icon\"), _ctx.ns.is(\"loading\")])\n  }, {\n    default: vue.withCtx(() => [vue.createVNode(_component_loading)]),\n    _: 1\n  }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true), vue.createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 6), vue.createVNode(_component_el_collapse_transition, null, {\n    default: vue.withCtx(() => [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"div\", {\n      key: 0,\n      class: vue.normalizeClass(_ctx.ns.be(\"node\", \"children\")),\n      role: \"group\",\n      \"aria-expanded\": _ctx.expanded\n    }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.node.childNodes, child => {\n      return vue.openBlock(), vue.createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        \"render-content\": _ctx.renderContent,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        node: child,\n        accordion: _ctx.accordion,\n        props: _ctx.props,\n        onNodeExpand: _ctx.handleChildNodeExpand\n      }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"accordion\", \"props\", \"onNodeExpand\"]);\n    }), 128))], 10, _hoisted_2)), [[vue.vShow, _ctx.expanded]]) : vue.createCommentVNode(\"v-if\", true)]),\n    _: 1\n  })], 42, _hoisted_1)), [[vue.vShow, _ctx.node.visible]]);\n}\nvar ElTreeNode = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree-node.vue\"]]);\nexports[\"default\"] = ElTreeNode;","map":{"version":3,"names":["_sfc_main","vue","defineComponent","name","components","ElCollapseTransition","index","ElCheckbox","index$1","NodeContent","treeNodeContent","ElIcon","index$2","Loading","iconsVue","props","node","type","default","Object","accordion","Boolean","renderContent","Function","renderAfterExpand","showCheckbox","emits","setup","ctx","ns","index$3","useNamespace","broadcastExpanded","useNodeExpandEventBroadcast","tree","inject","expanded","ref","childNodeRendered","oldChecked","oldIndeterminate","node$","dragEvents","useDragNode","dragEventsKey","instance","getCurrentInstance","provide","error","debugWarn","value","childrenKey","watch","children","data","updateChildren","indeterminate","val","handleSelectChange","checked","nextTick","getNodeKey","util","nodeKey","getNodeClass","nodeClassFunc","class","className","shared","isFunction","isString","emit","handleClick","e","handleCurrentChange","store","setCurrentNode","currentNode","expandOnClickNode","handleExpandIconClick","checkOnClickNode","disabled","handleCheckChange","target","handleContextMenu","event","vnode","stopPropagation","preventDefault","isLeaf","collapse","expand","ev","setChecked","checkStrictly","checkedNodes","getCheckedNodes","checkedKeys","getCheckedKeys","halfCheckedNodes","getHalfCheckedNodes","halfCheckedKeys","getHalfCheckedKeys","handleChildNodeExpand","nodeData","instance2","handleDragStart","draggable","treeNodeDragStart","treeNode","handleDragOver","treeNodeDragOver","$el","handleDrop","handleDragEnd","treeNodeDragEnd","CaretRight","createElementBlock","normalizeClass","_ctx","b","is","isCurrent","visible","role","tabindex","onClick","_cache","withModifiers","args","onContextmenu","onDragstart","onDragover","onDragend","onDrop","createElementVNode","be","style","normalizeStyle","paddingLeft","level","indent","icon","openBlock","createBlock","_component_el_icon","key","resolveDynamicComponent","_component_el_checkbox","onChange","createCommentVNode","loading","createVNode","_component_loading","_component_node_content","_component_el_collapse_transition","withCtx","withDirectives","Fragment","renderList","childNodes","child","_component_el_tree_node","onNodeExpand","vShow"],"sources":["../../../../../../packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { isFunction, isString } from '@vue/shared'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { RootTreeType, TreeNodeData, TreeOptionProps } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      handleCurrentChange(tree.store, tree.ctx.emit, () =>\n        tree.store.value.setCurrentNode(props.node)\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}