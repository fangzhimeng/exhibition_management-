{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../utils/index.js');\nvar types = require('../../utils/types.js');\nconst zIndex = vue.ref(0);\nconst defaultInitialZIndex = 2e3;\nconst zIndexContextKey = Symbol(\"zIndexContextKey\");\nconst useZIndex = zIndexOverrides => {\n  const zIndexInjection = zIndexOverrides || (vue.getCurrentInstance() ? vue.inject(zIndexContextKey, void 0) : void 0);\n  const initialZIndex = vue.computed(() => {\n    const zIndexFromInjection = vue.unref(zIndexInjection);\n    return types.isNumber(zIndexFromInjection) ? zIndexFromInjection : defaultInitialZIndex;\n  });\n  const currentZIndex = vue.computed(() => initialZIndex.value + zIndex.value);\n  const nextZIndex = () => {\n    zIndex.value++;\n    return currentZIndex.value;\n  };\n  return {\n    initialZIndex,\n    currentZIndex,\n    nextZIndex\n  };\n};\nexports.defaultInitialZIndex = defaultInitialZIndex;\nexports.useZIndex = useZIndex;\nexports.zIndexContextKey = zIndexContextKey;","map":{"version":3,"names":["zIndex","vue","ref","defaultInitialZIndex","zIndexContextKey","Symbol","useZIndex","zIndexOverrides","zIndexInjection","getCurrentInstance","inject","initialZIndex","computed","zIndexFromInjection","unref","types","isNumber","currentZIndex","value","nextZIndex"],"sources":["../../../../../packages/hooks/use-z-index/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, ref, unref } from 'vue'\nimport { isNumber } from '@element-plus/utils'\n\nimport type { InjectionKey, Ref } from 'vue'\n\nconst zIndex = ref(0)\nexport const defaultInitialZIndex = 2000\n\nexport const zIndexContextKey: InjectionKey<Ref<number | undefined>> =\n  Symbol('zIndexContextKey')\n\nexport const useZIndex = (zIndexOverrides?: Ref<number>) => {\n  const zIndexInjection =\n    zIndexOverrides ||\n    (getCurrentInstance() ? inject(zIndexContextKey, undefined) : undefined)\n  const initialZIndex = computed(() => {\n    const zIndexFromInjection = unref(zIndexInjection)\n    return isNumber(zIndexFromInjection)\n      ? zIndexFromInjection\n      : defaultInitialZIndex\n  })\n  const currentZIndex = computed(() => initialZIndex.value + zIndex.value)\n\n  const nextZIndex = () => {\n    zIndex.value++\n    return currentZIndex.value\n  }\n\n  return {\n    initialZIndex,\n    currentZIndex,\n    nextZIndex,\n  }\n}\n\nexport type UseZIndexReturn = ReturnType<typeof useZIndex>\n"],"mappings":";;;;;;;;AAEA,MAAMA,MAAM,GAAGC,GAAA,CAAAC,GAAG,CAAC,CAAC,CAAC;AACT,MAACC,oBAAoB,GAAG;AACxB,MAACC,gBAAgB,GAAGC,MAAM,CAAC,kBAAkB;AAC7C,MAACC,SAAS,GAAIC,eAAe,IAAK;EAC5C,MAAMC,eAAe,GAAGD,eAAe,KAAKN,GAAA,CAAAQ,kBAAkB,EAAE,GAAGR,GAAA,CAAAS,MAAM,CAACN,gBAAgB,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;EAC7G,MAAMO,aAAa,GAAGV,GAAA,CAAAW,QAAQ,CAAC,MAAM;IACnC,MAAMC,mBAAmB,GAAGZ,GAAA,CAAAa,KAAK,CAACN,eAAe,CAAC;IAClD,OAAOO,KAAA,CAAAC,QAAQ,CAACH,mBAAmB,CAAC,GAAGA,mBAAmB,GAAGV,oBAAoB;EACrF,CAAG,CAAC;EACF,MAAMc,aAAa,GAAGhB,GAAA,CAAAW,QAAQ,CAAC,MAAMD,aAAa,CAACO,KAAK,GAAGlB,MAAM,CAACkB,KAAK,CAAC;EACxE,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBnB,MAAM,CAACkB,KAAK,EAAE;IACd,OAAOD,aAAa,CAACC,KAAK;EAC9B,CAAG;EACD,OAAO;IACLP,aAAa;IACbM,aAAa;IACbE;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}