{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar core = require('@vueuse/core');\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nvar constants = require('./constants.js');\nvar error = require('../../../utils/error.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst COMPONENT_NAME = \"ElLabelWrap\";\nvar FormLabelWrap = vue.defineComponent({\n  name: COMPONENT_NAME,\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean\n  },\n  setup(props, {\n    slots\n  }) {\n    const formContext = vue.inject(constants.formContextKey, void 0);\n    const formItemContext = vue.inject(constants.formItemContextKey);\n    if (!formItemContext) error.throwError(COMPONENT_NAME, \"usage: <el-form-item><label-wrap /></el-form-item>\");\n    const ns = index.useNamespace(\"form\");\n    const el = vue.ref();\n    const computedWidth = vue.ref(0);\n    const getLabelWidth = () => {\n      var _a;\n      if ((_a = el.value) == null ? void 0 : _a.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width;\n        return Math.ceil(Number.parseFloat(width));\n      } else {\n        return 0;\n      }\n    };\n    const updateLabelWidth = (action = \"update\") => {\n      vue.nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === \"update\") {\n            computedWidth.value = getLabelWidth();\n          } else if (action === \"remove\") {\n            formContext == null ? void 0 : formContext.deregisterLabelWidth(computedWidth.value);\n          }\n        }\n      });\n    };\n    const updateLabelWidthFn = () => updateLabelWidth(\"update\");\n    vue.onMounted(() => {\n      updateLabelWidthFn();\n    });\n    vue.onBeforeUnmount(() => {\n      updateLabelWidth(\"remove\");\n    });\n    vue.onUpdated(() => updateLabelWidthFn());\n    vue.watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        formContext == null ? void 0 : formContext.registerLabelWidth(val, oldVal);\n      }\n    });\n    core.useResizeObserver(vue.computed(() => {\n      var _a, _b;\n      return (_b = (_a = el.value) == null ? void 0 : _a.firstElementChild) != null ? _b : null;\n    }), updateLabelWidthFn);\n    return () => {\n      var _a, _b;\n      if (!slots) return null;\n      const {\n        isAutoWidth\n      } = props;\n      if (isAutoWidth) {\n        const autoLabelWidth = formContext == null ? void 0 : formContext.autoLabelWidth;\n        const hasLabel = formItemContext == null ? void 0 : formItemContext.hasLabel;\n        const style = {};\n        if (hasLabel && autoLabelWidth && autoLabelWidth !== \"auto\") {\n          const marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);\n          const marginPosition = formContext.labelPosition === \"left\" ? \"marginRight\" : \"marginLeft\";\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`;\n          }\n        }\n        return vue.createVNode(\"div\", {\n          \"ref\": el,\n          \"class\": [ns.be(\"item\", \"label-wrap\")],\n          \"style\": style\n        }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);\n      } else {\n        return vue.createVNode(vue.Fragment, {\n          \"ref\": el\n        }, [(_b = slots.default) == null ? void 0 : _b.call(slots)]);\n      }\n    };\n  }\n});\nexports[\"default\"] = FormLabelWrap;","map":{"version":3,"names":["COMPONENT_NAME","FormLabelWrap","vue","defineComponent","name","props","isAutoWidth","Boolean","updateAll","slots","formContext","inject","constants","formContextKey","formItemContext","formItemContextKey","error","throwError","ns","index","useNamespace","el","ref","computedWidth","_a","value","firstElementChild","width","window","getComputedStyle","Math","ceil","Number","parseFloat","nextTick","default","action","getLabelWidth","deregisterLabelWidth","updateLabelWidthFn","updateLabelWidth","onBeforeUnmount","onUpdated","val","oldVal","registerLabelWidth","core","useResizeObserver","computed","_b","autoLabelWidth","hasLabel","marginWidth","max","parseInt","marginPosition","labelPosition","style","createVNode","be","call","Fragment"],"sources":["../../../../../../packages/components/form/src/form-label-wrap.tsx"],"sourcesContent":["import {\n  Fragment,\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\nimport { throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { formContextKey, formItemContextKey } from './constants'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElLabelWrap'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean,\n  },\n\n  setup(props, { slots }) {\n    const formContext = inject(formContextKey, undefined)\n    const formItemContext = inject(formItemContextKey)\n    if (!formItemContext)\n      throwError(\n        COMPONENT_NAME,\n        'usage: <el-form-item><label-wrap /></el-form-item>'\n      )\n\n    const ns = useNamespace('form')\n\n    const el = ref<HTMLElement>()\n    const computedWidth = ref(0)\n\n    const getLabelWidth = () => {\n      if (el.value?.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width\n        return Math.ceil(Number.parseFloat(width))\n      } else {\n        return 0\n      }\n    }\n\n    const updateLabelWidth = (action: 'update' | 'remove' = 'update') => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === 'update') {\n            computedWidth.value = getLabelWidth()\n          } else if (action === 'remove') {\n            formContext?.deregisterLabelWidth(computedWidth.value)\n          }\n        }\n      })\n    }\n    const updateLabelWidthFn = () => updateLabelWidth('update')\n\n    onMounted(() => {\n      updateLabelWidthFn()\n    })\n    onBeforeUnmount(() => {\n      updateLabelWidth('remove')\n    })\n    onUpdated(() => updateLabelWidthFn())\n\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        formContext?.registerLabelWidth(val, oldVal)\n      }\n    })\n\n    useResizeObserver(\n      computed(\n        () => (el.value?.firstElementChild ?? null) as HTMLElement | null\n      ),\n      updateLabelWidthFn\n    )\n\n    return () => {\n      if (!slots) return null\n\n      const { isAutoWidth } = props\n      if (isAutoWidth) {\n        const autoLabelWidth = formContext?.autoLabelWidth\n        const hasLabel = formItemContext?.hasLabel\n        const style: CSSProperties = {}\n        if (hasLabel && autoLabelWidth && autoLabelWidth !== 'auto') {\n          const marginWidth = Math.max(\n            0,\n            Number.parseInt(autoLabelWidth, 10) - computedWidth.value\n          )\n          const marginPosition =\n            formContext.labelPosition === 'left' ? 'marginRight' : 'marginLeft'\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`\n          }\n        }\n        return (\n          <div ref={el} class={[ns.be('item', 'label-wrap')]} style={style}>\n            {slots.default?.()}\n          </div>\n        )\n      } else {\n        return <Fragment ref={el}>{slots.default?.()}</Fragment>\n      }\n    }\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}