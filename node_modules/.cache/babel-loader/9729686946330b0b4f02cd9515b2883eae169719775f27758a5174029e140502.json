{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nrequire('../../../constants/index.js');\nrequire('../../../utils/index.js');\nvar index = require('../../tree/index.js');\nvar treeSelectOption = require('./tree-select-option.js');\nvar utils = require('./utils.js');\nvar shared = require('@vue/shared');\nvar event = require('../../../constants/event.js');\nconst useTree = (props, {\n  attrs,\n  slots,\n  emit\n}, {\n  select,\n  tree,\n  key\n}) => {\n  vue.watch(() => props.modelValue, () => {\n    if (props.showCheckbox) {\n      vue.nextTick(() => {\n        const treeInstance = tree.value;\n        if (treeInstance && !lodashUnified.isEqual(treeInstance.getCheckedKeys(), utils.toValidArray(props.modelValue))) {\n          treeInstance.setCheckedKeys(utils.toValidArray(props.modelValue));\n        }\n      });\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  const propsMap = vue.computed(() => ({\n    value: key.value,\n    label: \"label\",\n    children: \"children\",\n    disabled: \"disabled\",\n    isLeaf: \"isLeaf\",\n    ...props.props\n  }));\n  const getNodeValByProp = (prop, data) => {\n    var _a;\n    const propVal = propsMap.value[prop];\n    if (shared.isFunction(propVal)) {\n      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(getNodeValByProp(\"value\", data)));\n    } else {\n      return data[propVal];\n    }\n  };\n  const defaultExpandedParentKeys = utils.toValidArray(props.modelValue).map(value => {\n    return utils.treeFind(props.data || [], data => getNodeValByProp(\"value\", data) === value, data => getNodeValByProp(\"children\", data), (data, index, array, parent) => parent && getNodeValByProp(\"value\", parent));\n  }).filter(item => utils.isValidValue(item));\n  const cacheOptions = vue.computed(() => {\n    if (!props.renderAfterExpand && !props.lazy) return [];\n    const options = [];\n    utils.treeEach(props.data.concat(props.cacheData), node => {\n      const value = getNodeValByProp(\"value\", node);\n      options.push({\n        value,\n        currentLabel: getNodeValByProp(\"label\", node),\n        isDisabled: getNodeValByProp(\"disabled\", node)\n      });\n    }, data => getNodeValByProp(\"children\", data));\n    return options;\n  });\n  const cacheOptionsMap = vue.computed(() => {\n    return cacheOptions.value.reduce((prev, next) => ({\n      ...prev,\n      [next.value]: next\n    }), {});\n  });\n  return {\n    ...lodashUnified.pick(vue.toRefs(props), Object.keys(index[\"default\"].props)),\n    ...attrs,\n    nodeKey: key,\n    expandOnClickNode: vue.computed(() => {\n      return !props.checkStrictly && props.expandOnClickNode;\n    }),\n    defaultExpandedKeys: vue.computed(() => {\n      return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(defaultExpandedParentKeys) : defaultExpandedParentKeys;\n    }),\n    renderContent: (h, {\n      node,\n      data,\n      store\n    }) => {\n      return h(treeSelectOption[\"default\"], {\n        value: getNodeValByProp(\"value\", data),\n        label: getNodeValByProp(\"label\", data),\n        disabled: getNodeValByProp(\"disabled\", data)\n      }, props.renderContent ? () => props.renderContent(h, {\n        node,\n        data,\n        store\n      }) : slots.default ? () => slots.default({\n        node,\n        data,\n        store\n      }) : void 0);\n    },\n    filterNodeMethod: (value, data, node) => {\n      var _a;\n      if (props.filterNodeMethod) return props.filterNodeMethod(value, data, node);\n      if (!value) return true;\n      return (_a = getNodeValByProp(\"label\", data)) == null ? void 0 : _a.includes(value);\n    },\n    onNodeClick: (data, node, e) => {\n      var _a, _b, _c;\n      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);\n      if (props.showCheckbox && props.checkOnClickNode) return;\n      if (!props.showCheckbox && (props.checkStrictly || node.isLeaf)) {\n        if (!getNodeValByProp(\"disabled\", data)) {\n          const option = (_b = select.value) == null ? void 0 : _b.options.get(getNodeValByProp(\"value\", data));\n          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option);\n        }\n      } else if (props.expandOnClickNode) {\n        e.proxy.handleExpandIconClick();\n      }\n    },\n    onCheck: (data, params) => {\n      if (!props.showCheckbox) return;\n      const dataValue = getNodeValByProp(\"value\", data);\n      const uncachedCheckedKeys = params.checkedKeys;\n      const cachedKeys = props.multiple ? utils.toValidArray(props.modelValue).filter(item => item in cacheOptionsMap.value && !tree.value.getNode(item) && !uncachedCheckedKeys.includes(item)) : [];\n      const checkedKeys = uncachedCheckedKeys.concat(cachedKeys);\n      if (props.checkStrictly) {\n        emit(event.UPDATE_MODEL_EVENT, props.multiple ? checkedKeys : checkedKeys.includes(dataValue) ? dataValue : void 0);\n      } else {\n        if (props.multiple) {\n          emit(event.UPDATE_MODEL_EVENT, tree.value.getCheckedKeys(true));\n        } else {\n          const firstLeaf = utils.treeFind([data], data2 => !utils.isValidArray(getNodeValByProp(\"children\", data2)) && !getNodeValByProp(\"disabled\", data2), data2 => getNodeValByProp(\"children\", data2));\n          const firstLeafKey = firstLeaf ? getNodeValByProp(\"value\", firstLeaf) : void 0;\n          const hasCheckedChild = utils.isValidValue(props.modelValue) && !!utils.treeFind([data], data2 => getNodeValByProp(\"value\", data2) === props.modelValue, data2 => getNodeValByProp(\"children\", data2));\n          emit(event.UPDATE_MODEL_EVENT, firstLeafKey === props.modelValue || hasCheckedChild ? void 0 : firstLeafKey);\n        }\n      }\n      vue.nextTick(() => {\n        var _a;\n        const checkedKeys2 = utils.toValidArray(props.modelValue);\n        tree.value.setCheckedKeys(checkedKeys2);\n        (_a = attrs.onCheck) == null ? void 0 : _a.call(attrs, data, {\n          checkedKeys: tree.value.getCheckedKeys(),\n          checkedNodes: tree.value.getCheckedNodes(),\n          halfCheckedKeys: tree.value.getHalfCheckedKeys(),\n          halfCheckedNodes: tree.value.getHalfCheckedNodes()\n        });\n      });\n    },\n    cacheOptions\n  };\n};\nexports.useTree = useTree;","map":{"version":3,"names":["useTree","props","attrs","slots","emit","select","tree","key","vue","watch","modelValue","showCheckbox","nextTick","treeInstance","value","lodashUnified","isEqual","getCheckedKeys","utils","toValidArray","setCheckedKeys","immediate","deep","propsMap","computed","label","children","disabled","isLeaf","getNodeValByProp","prop","data","_a","propVal","shared","isFunction","getNode","defaultExpandedParentKeys","map","treeFind","index","array","parent","filter","item","isValidValue","cacheOptions","renderAfterExpand","lazy","options","treeEach","concat","cacheData","node","push","currentLabel","isDisabled","cacheOptionsMap","reduce","prev","next","pick","toRefs","Object","keys","nodeKey","expandOnClickNode","checkStrictly","defaultExpandedKeys","renderContent","h","store","treeSelectOption","default","filterNodeMethod","includes","onNodeClick","e","_b","_c","call","checkOnClickNode","option","get","handleOptionSelect","proxy","handleExpandIconClick","onCheck","params","dataValue","uncachedCheckedKeys","checkedKeys","cachedKeys","multiple","event","UPDATE_MODEL_EVENT","firstLeaf","data2","isValidArray","firstLeafKey","hasCheckedChild","checkedKeys2","checkedNodes","getCheckedNodes","halfCheckedKeys","getHalfCheckedKeys","halfCheckedNodes","getHalfCheckedNodes"],"sources":["../../../../../../packages/components/tree-select/src/tree.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, nextTick, toRefs, watch } from 'vue'\nimport { isEqual, pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isFunction } from '@element-plus/utils'\nimport ElTree from '@element-plus/components/tree'\nimport TreeSelectOption from './tree-select-option'\nimport {\n  isValidArray,\n  isValidValue,\n  toValidArray,\n  treeEach,\n  treeFind,\n} from './utils'\nimport type { CacheOption } from './cache-options'\nimport type { Ref } from 'vue'\nimport type ElSelect from '@element-plus/components/select'\nimport type Node from '@element-plus/components/tree/src/model/node'\nimport type { TreeNodeData } from '@element-plus/components/tree/src/tree.type'\n\nexport const useTree = (\n  props,\n  { attrs, slots, emit },\n  {\n    select,\n    tree,\n    key,\n  }: {\n    select: Ref<InstanceType<typeof ElSelect> | undefined>\n    tree: Ref<InstanceType<typeof ElTree> | undefined>\n    key: Ref<string>\n  }\n) => {\n  watch(\n    () => props.modelValue,\n    () => {\n      if (props.showCheckbox) {\n        nextTick(() => {\n          const treeInstance = tree.value\n          if (\n            treeInstance &&\n            !isEqual(\n              treeInstance.getCheckedKeys(),\n              toValidArray(props.modelValue)\n            )\n          ) {\n            treeInstance.setCheckedKeys(toValidArray(props.modelValue))\n          }\n        })\n      }\n    },\n    {\n      immediate: true,\n      deep: true,\n    }\n  )\n\n  const propsMap = computed(() => ({\n    value: key.value,\n    label: 'label',\n    children: 'children',\n    disabled: 'disabled',\n    isLeaf: 'isLeaf',\n    ...props.props,\n  }))\n\n  const getNodeValByProp = (\n    prop: 'value' | 'label' | 'children' | 'disabled' | 'isLeaf',\n    data: TreeNodeData\n  ) => {\n    const propVal = propsMap.value[prop]\n    if (isFunction(propVal)) {\n      return propVal(\n        data,\n        tree.value?.getNode(getNodeValByProp('value', data)) as Node\n      )\n    } else {\n      return data[propVal as string]\n    }\n  }\n\n  const defaultExpandedParentKeys = toValidArray(props.modelValue)\n    .map((value) => {\n      return treeFind(\n        props.data || [],\n        (data) => getNodeValByProp('value', data) === value,\n        (data) => getNodeValByProp('children', data),\n        (data, index, array, parent) =>\n          parent && getNodeValByProp('value', parent)\n      )\n    })\n    .filter((item) => isValidValue(item))\n\n  const cacheOptions = computed(() => {\n    if (!props.renderAfterExpand && !props.lazy) return []\n\n    const options: CacheOption[] = []\n\n    treeEach(\n      props.data.concat(props.cacheData),\n      (node) => {\n        const value = getNodeValByProp('value', node)\n        options.push({\n          value,\n          currentLabel: getNodeValByProp('label', node),\n          isDisabled: getNodeValByProp('disabled', node),\n        })\n      },\n      (data) => getNodeValByProp('children', data)\n    )\n\n    return options\n  })\n\n  const cacheOptionsMap = computed(() => {\n    return cacheOptions.value.reduce(\n      (prev, next) => ({ ...prev, [next.value]: next }),\n      {}\n    )\n  })\n\n  return {\n    ...pick(toRefs(props), Object.keys(ElTree.props)),\n    ...attrs,\n    nodeKey: key,\n\n    // only expand on click node when the `check-strictly` is false\n    expandOnClickNode: computed(() => {\n      return !props.checkStrictly && props.expandOnClickNode\n    }),\n\n    // show current selected node only first time,\n    // fix the problem of expanding multiple nodes when checking multiple nodes\n    defaultExpandedKeys: computed(() => {\n      return props.defaultExpandedKeys\n        ? props.defaultExpandedKeys.concat(defaultExpandedParentKeys)\n        : defaultExpandedParentKeys\n    }),\n\n    renderContent: (h, { node, data, store }) => {\n      return h(\n        TreeSelectOption,\n        {\n          value: getNodeValByProp('value', data),\n          label: getNodeValByProp('label', data),\n          disabled: getNodeValByProp('disabled', data),\n        },\n        props.renderContent\n          ? () => props.renderContent(h, { node, data, store })\n          : slots.default\n          ? () => slots.default({ node, data, store })\n          : undefined\n      )\n    },\n    filterNodeMethod: (value, data, node) => {\n      if (props.filterNodeMethod)\n        return props.filterNodeMethod(value, data, node)\n      if (!value) return true\n      return getNodeValByProp('label', data)?.includes(value)\n    },\n    onNodeClick: (data, node, e) => {\n      attrs.onNodeClick?.(data, node, e)\n\n      // `onCheck` is trigger when `checkOnClickNode`\n      if (props.showCheckbox && props.checkOnClickNode) return\n\n      // now `checkOnClickNode` is false, only no checkbox and `checkStrictly` or `isLeaf`\n      if (!props.showCheckbox && (props.checkStrictly || node.isLeaf)) {\n        if (!getNodeValByProp('disabled', data)) {\n          const option = select.value?.options.get(\n            getNodeValByProp('value', data)\n          )\n          select.value?.handleOptionSelect(option)\n        }\n      } else if (props.expandOnClickNode) {\n        e.proxy.handleExpandIconClick()\n      }\n    },\n    onCheck: (data, params) => {\n      // ignore when no checkbox, like only `checkOnClickNode` is true\n      if (!props.showCheckbox) return\n\n      const dataValue = getNodeValByProp('value', data)\n\n      // fix: checkedKeys has not cached keys\n      const uncachedCheckedKeys = params.checkedKeys\n      const cachedKeys = props.multiple\n        ? toValidArray(props.modelValue).filter(\n            (item) =>\n              item in cacheOptionsMap.value &&\n              !tree.value.getNode(item) &&\n              !uncachedCheckedKeys.includes(item)\n          )\n        : []\n      const checkedKeys = uncachedCheckedKeys.concat(cachedKeys)\n\n      if (props.checkStrictly) {\n        emit(\n          UPDATE_MODEL_EVENT,\n          // Checking for changes may come from `check-on-node-click`\n          props.multiple\n            ? checkedKeys\n            : checkedKeys.includes(dataValue)\n            ? dataValue\n            : undefined\n        )\n      }\n      // only can select leaf node\n      else {\n        if (props.multiple) {\n          emit(\n            UPDATE_MODEL_EVENT,\n            (tree.value as InstanceType<typeof ElTree>).getCheckedKeys(true)\n          )\n        } else {\n          // select first leaf node when check parent\n          const firstLeaf = treeFind(\n            [data],\n            (data) =>\n              !isValidArray(getNodeValByProp('children', data)) &&\n              !getNodeValByProp('disabled', data),\n            (data) => getNodeValByProp('children', data)\n          )\n          const firstLeafKey = firstLeaf\n            ? getNodeValByProp('value', firstLeaf)\n            : undefined\n\n          // unselect when any child checked\n          const hasCheckedChild =\n            isValidValue(props.modelValue) &&\n            !!treeFind(\n              [data],\n              (data) => getNodeValByProp('value', data) === props.modelValue,\n              (data) => getNodeValByProp('children', data)\n            )\n\n          emit(\n            UPDATE_MODEL_EVENT,\n            firstLeafKey === props.modelValue || hasCheckedChild\n              ? undefined\n              : firstLeafKey\n          )\n        }\n      }\n\n      nextTick(() => {\n        const checkedKeys = toValidArray(props.modelValue)\n        tree.value.setCheckedKeys(checkedKeys)\n\n        attrs.onCheck?.(data, {\n          checkedKeys: tree.value.getCheckedKeys(),\n          checkedNodes: tree.value.getCheckedNodes(),\n          halfCheckedKeys: tree.value.getHalfCheckedKeys(),\n          halfCheckedNodes: tree.value.getHalfCheckedNodes(),\n        })\n      })\n    },\n\n    // else\n    cacheOptions,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}