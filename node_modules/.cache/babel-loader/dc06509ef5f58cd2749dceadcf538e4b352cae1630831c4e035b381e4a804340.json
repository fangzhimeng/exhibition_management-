{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_avue_tree = _resolveComponent(\"avue-tree\");\n  return _openBlock(), _createBlock(_component_avue_tree, {\n    ref: \"tree\",\n    option: $data.option,\n    data: $data.data,\n    modelValue: $data.form,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.form = $event),\n    onNodeContextmenu: $options.nodeContextmenu,\n    onNodeClick: $options.nodeClick\n  }, null, 8 /* PROPS */, [\"option\", \"data\", \"modelValue\", \"onNodeContextmenu\", \"onNodeClick\"]);\n}","map":{"version":3,"names":["_createBlock","_component_avue_tree","ref","option","$data","data","form","$event","onNodeContextmenu","$options","nodeContextmenu","onNodeClick","nodeClick"],"sources":["/Users/fangzhimeng/project/my-vue-project1/src/views/data_center.vue"],"sourcesContent":["\n<template>\n  <avue-tree ref=\"tree\"\n             :option=\"option\"\n             :data=\"data\"\n             v-model=\"form\"\n             @node-contextmenu=\"nodeContextmenu\"\n             @node-click=\"nodeClick\">\n  </avue-tree>\n</template>\n<script>\nexport default {\n  data () {\n    return {\n      form: {},\n      data: [\n        {\n          value: 0,\n          label: '一级部门',\n          children: [\n            {\n              value: 1,\n              label: '一级部门1',\n            }, {\n              value: 2,\n              label: '一级部门2',\n            }\n          ]\n        }, {\n          value: 3,\n          label: '二级部门',\n          children: [\n            {\n              value: 4,\n              label: '二级部门1',\n            }, {\n              value: 5,\n              label: '二级部门2',\n            }\n          ]\n        }\n      ],\n      option: {\n        defaultExpandAll: true,\n        formOption: {\n          labelWidth: 100,\n          column: [{\n            label: '自定义项',\n            prop: 'label'\n          }, {\n            label: '测试',\n            prop: 'test'\n          }],\n        }\n      }\n    }\n  },\n  mounted () {\n    this.$refs.tree.setCurrentKey(0)\n  },\n  methods: {\n    nodeContextmenu (data, node, comp) {\n      this.$message.success(JSON.stringify(data))\n    },\n    nodeClick (data) {\n      this.$message.success(JSON.stringify(data))\n    }\n  }\n}\n</script>\n\n\n<!--<template>-->\n<!--  <basic-container>-->\n<!--    <avue-crud-->\n<!--        :page.sync=\"page\"-->\n<!--        :data=\"tableData\"-->\n<!--        :table-loading=\"tableLoading\"-->\n<!--        :option=\"tableOption\"-->\n<!--        @on-load=\"getList\"-->\n<!--        @search-change=\"searchChange\"-->\n<!--        @search-reset=\"searchReset\"-->\n<!--        @refresh-change=\"refreshChange\"-->\n<!--        @size-change=\"sizeChange\"-->\n<!--        @current-change=\"currentChange\"-->\n<!--        @row-update=\"handleUpdate\"-->\n<!--        @row-save=\"handleSave\"-->\n<!--        @row-del=\"handleDel\"-->\n<!--    >-->\n<!--    </avue-crud>-->\n<!--  </basic-container>-->\n\n<!--  <div  class=\"table-container\">-->\n\n<!--&lt;!&ndash;    <query-tree :query=\"state.queryList\" @node-click=\"handleNodeClick\">&ndash;&gt;-->\n<!--&lt;!&ndash;    </query-tree>&ndash;&gt;-->\n\n\n<!--        <el-button type=\"primary\" @click=\"checkALL\">全选/全不选</el-button>-->\n<!--        <el-button type=\"primary\" @click=\"save\"-->\n<!--                   style=\"left: 200px; top: 20px; position: absolute; z-index:9999\">保存</el-button>-->\n<!--        <avue-tree ref=\"tree\" :option=\"option\" :data=\"treeData\"   multiple-->\n<!--                   v-model=\"form\" @check-change=\"checkChange\" class=\"width:50%,height:50%;\">-->\n<!--        </avue-tree>-->\n\n\n\n\n<!--  </div>-->\n<!--</template>-->\n<!--<script>-->\n<!--export default {-->\n\n\n<!--  data() {-->\n<!--    return {-->\n<!--      treeData: [],-->\n<!--      isALLCheck: false,-->\n<!--      //-->\n<!--      option: {-->\n<!--        defaultExpandAll: true,-->\n<!--        multiple: true,-->\n<!--        filter: false,-->\n<!--        menu: false,-->\n<!--        formOption: {-->\n<!--          labelWidth: 100,-->\n<!--          column: [{-->\n<!--            label: '自定义项',-->\n<!--            prop: 'label'-->\n<!--          }, {-->\n<!--            label: '测试',-->\n<!--            prop: 'test'-->\n<!--          }],-->\n<!--        }-->\n<!--      }-->\n<!--    }-->\n<!--  },-->\n<!--  /**-->\n<!--   * 全选/全不选-->\n<!--   */-->\n<!--  checkALL() {-->\n<!--    //console.log('menuTree',this.$refs.menuTree);-->\n<!--    this.isALLCheck = !this.isALLCheck;-->\n<!--    var data = this.$refs.menuTree.data;-->\n<!--    for (var i = 0; i < data.length; i++) {-->\n<!--      this.$refs.menuTree.setChecked(data[i], this.isALLCheck, true);-->\n<!--    }-->\n<!--  },-->\n<!--  /**-->\n<!--   * 保存功能-->\n<!--   */-->\n<!--  save() {-->\n<!--    var that = this;-->\n<!--    //-->\n<!--    this.roleId;-->\n<!--    debugger-->\n<!--    //-->\n<!--    console.log('menuTree', this.$refs.menuTree);-->\n<!--    var data = this.$refs.menuTree.getCheckedNodes();-->\n<!--    for (var i = 0; i < data.length; i++) {-->\n<!--      var checked = data[i];-->\n<!--      console.log(checked);-->\n<!--    }-->\n<!--    //-->\n<!--  }-->\n<!--}-->\n\n<!--//   const QueryTree = defineAsyncComponent(-->\n<!--//     () => import(\"/@/components/QueryTree/index.vue\")-->\n<!--// );-->\n<!--//-->\n<!--// const state = reactive({-->\n<!--//   queryList: (name: String) => {-->\n<!--//     return api({-->\n<!--//       name: name,-->\n<!--//     });-->\n<!--//   },-->\n<!--// });-->  //60*200\n<!--//-->      //400*30\n<!--// const handleNodeClick = (e: any) => {};-->\n//200*3%         400*300=12          500*20%*20%*2\n\n12\n<!--</script>-->\n<style scoped>\n.table-container {\n  overflow-y: scroll; /* 创建垂直滚动条 */\n  max-height: 400px; /* 根据需求设定最大高度 */\n}\n</style>"],"mappings":";;;uBAEEA,YAAA,CAMYC,oBAAA;IANDC,GAAG,EAAC,MAAM;IACTC,MAAM,EAAEC,KAAA,CAAAD,MAAM;IACdE,IAAI,EAAED,KAAA,CAAAC,IAAI;gBACFD,KAAA,CAAAE,IAAI;+DAAJF,KAAA,CAAAE,IAAI,GAAAC,MAAA;IACZC,iBAAgB,EAAEC,QAAA,CAAAC,eAAe;IACjCC,WAAU,EAAEF,QAAA,CAAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}