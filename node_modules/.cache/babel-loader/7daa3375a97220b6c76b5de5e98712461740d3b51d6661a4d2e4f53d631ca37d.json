{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$1 = require('../../icon/index.js');\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nvar alert = require('./alert.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar icon = require('../../../utils/vue/icon.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElAlert\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: alert.alertProps,\n  emits: alert.alertEmits,\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const {\n      Close\n    } = icon.TypeComponents;\n    const slots = vue.useSlots();\n    const ns = index.useNamespace(\"alert\");\n    const visible = vue.ref(true);\n    const iconComponent = vue.computed(() => icon.TypeComponentsMap[props.type]);\n    const iconClass = vue.computed(() => [ns.e(\"icon\"), {\n      [ns.is(\"big\")]: !!props.description || !!slots.default\n    }]);\n    const isBoldTitle = vue.computed(() => {\n      return {\n        [ns.is(\"bold\")]: props.description || slots.default\n      };\n    });\n    const close = evt => {\n      visible.value = false;\n      emit(\"close\", evt);\n    };\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.Transition, {\n        name: vue.unref(ns).b(\"fade\"),\n        persisted: \"\"\n      }, {\n        default: vue.withCtx(() => [vue.withDirectives(vue.createElementVNode(\"div\", {\n          class: vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).m(_ctx.type), vue.unref(ns).is(\"center\", _ctx.center), vue.unref(ns).is(_ctx.effect)]),\n          role: \"alert\"\n        }, [_ctx.showIcon && vue.unref(iconComponent) ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n          key: 0,\n          class: vue.normalizeClass(vue.unref(iconClass))\n        }, {\n          default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(iconComponent))))]),\n          _: 1\n        }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n          class: vue.normalizeClass(vue.unref(ns).e(\"content\"))\n        }, [_ctx.title || _ctx.$slots.title ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n          key: 0,\n          class: vue.normalizeClass([vue.unref(ns).e(\"title\"), vue.unref(isBoldTitle)])\n        }, [vue.renderSlot(_ctx.$slots, \"title\", {}, () => [vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)])], 2)) : vue.createCommentVNode(\"v-if\", true), _ctx.$slots.default || _ctx.description ? (vue.openBlock(), vue.createElementBlock(\"p\", {\n          key: 1,\n          class: vue.normalizeClass(vue.unref(ns).e(\"description\"))\n        }, [vue.renderSlot(_ctx.$slots, \"default\", {}, () => [vue.createTextVNode(vue.toDisplayString(_ctx.description), 1)])], 2)) : vue.createCommentVNode(\"v-if\", true), _ctx.closable ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n          key: 2\n        }, [_ctx.closeText ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n          key: 0,\n          class: vue.normalizeClass([vue.unref(ns).e(\"close-btn\"), vue.unref(ns).is(\"customed\")]),\n          onClick: close\n        }, vue.toDisplayString(_ctx.closeText), 3)) : (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n          key: 1,\n          class: vue.normalizeClass(vue.unref(ns).e(\"close-btn\")),\n          onClick: close\n        }, {\n          default: vue.withCtx(() => [vue.createVNode(vue.unref(Close))]),\n          _: 1\n        }, 8, [\"class\"]))], 64)) : vue.createCommentVNode(\"v-if\", true)], 2)], 2), [[vue.vShow, visible.value]])]),\n        _: 3\n      }, 8, [\"name\"]);\n    };\n  }\n});\nvar Alert = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/alert/src/alert.vue\"]]);\nexports[\"default\"] = Alert;","map":{"version":3,"names":["name","Close","icon","TypeComponents","slots","vue","useSlots","ns","index","useNamespace","visible","ref","iconComponent","computed","TypeComponentsMap","props","type","iconClass","e","is","description","default","isBoldTitle","close","evt","value","emit"],"sources":["../../../../../../packages/components/alert/src/alert.vue"],"sourcesContent":["<template>\n  <transition :name=\"ns.b('fade')\">\n    <div\n      v-show=\"visible\"\n      :class=\"[ns.b(), ns.m(type), ns.is('center', center), ns.is(effect)]\"\n      role=\"alert\"\n    >\n      <el-icon v-if=\"showIcon && iconComponent\" :class=\"iconClass\">\n        <component :is=\"iconComponent\" />\n      </el-icon>\n\n      <div :class=\"ns.e('content')\">\n        <span\n          v-if=\"title || $slots.title\"\n          :class=\"[ns.e('title'), isBoldTitle]\"\n        >\n          <slot name=\"title\">{{ title }}</slot>\n        </span>\n        <p v-if=\"$slots.default || description\" :class=\"ns.e('description')\">\n          <slot>\n            {{ description }}\n          </slot>\n        </p>\n        <template v-if=\"closable\">\n          <div\n            v-if=\"closeText\"\n            :class=\"[ns.e('close-btn'), ns.is('customed')]\"\n            @click=\"close\"\n          >\n            {{ closeText }}\n          </div>\n          <el-icon v-else :class=\"ns.e('close-btn')\" @click=\"close\">\n            <Close />\n          </el-icon>\n        </template>\n      </div>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, ref, useSlots } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { alertEmits, alertProps } from './alert'\n\nconst { Close } = TypeComponents\n\ndefineOptions({\n  name: 'ElAlert',\n})\n\nconst props = defineProps(alertProps)\nconst emit = defineEmits(alertEmits)\nconst slots = useSlots()\n\nconst ns = useNamespace('alert')\n\nconst visible = ref(true)\n\nconst iconComponent = computed(() => TypeComponentsMap[props.type])\n\nconst iconClass = computed(() => [\n  ns.e('icon'),\n  { [ns.is('big')]: !!props.description || !!slots.default },\n])\n\nconst isBoldTitle = computed(() => {\n  return { [ns.is('bold')]: props.description || slots.default }\n})\n\nconst close = (evt: MouseEvent) => {\n  visible.value = false\n  emit('close', evt)\n}\n</script>\n"],"mappings":";;;;;;;;;;;;;uCAgDc;EACZA,IAAM;AACR;;;;;;;;;IAJA,MAAM;MAAEC;IAAU,IAAAC,IAAA,CAAAC,cAAA;IAQlB,MAAMC,KAAA,GAAQC,GAAA,CAAAC,QAAS;IAEjB,MAAAC,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,OAAO;IAEzB,MAAAC,OAAA,GAAUL,GAAA,CAAAM,GAAA,CAAI,IAAI;IAExB,MAAMC,aAAgB,GAAAP,GAAA,CAAAQ,QAAA,CAAS,MAAMX,IAAA,CAAAY,iBAAA,CAAkBC,KAAA,CAAMC,IAAK;IAE5D,MAAAC,SAAA,GAAYZ,GAAA,CAAAQ,QAAA,CAAS,MAAM,CAC/BN,EAAA,CAAGW,CAAA,CAAE,MAAM,GACX;MAAE,CAACX,EAAG,CAAAY,EAAA,CAAG,KAAK,IAAI,CAAC,CAACJ,KAAM,CAAAK,WAAA,IAAe,CAAC,CAAChB,KAAA,CAAMiB;IAAQ,EAC1D;IAEK,MAAAC,WAAA,GAAcjB,GAAA,CAAAQ,QAAA,CAAS,MAAM;MAC1B;QAAE,CAACN,EAAG,CAAAY,EAAA,CAAG,MAAM,CAAI,GAAAJ,KAAA,CAAMK,WAAe,IAAAhB,KAAA,CAAMiB;MAAQ;IAAA,CAC9D;IAEK,MAAAE,KAAA,GAASC,GAAoB;MACjCd,OAAA,CAAQe,KAAQ;MAChBC,IAAA,CAAK,SAASF,GAAG;IAAA,CACnB"},"metadata":{},"sourceType":"script","externalDependencies":[]}