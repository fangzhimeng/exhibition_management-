{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar lodashUnified = require('lodash-unified');\nconst unique = arr => [...new Set(arr)];\nconst castArray = arr => {\n  if (!arr && arr !== 0) return [];\n  return Array.isArray(arr) ? arr : [arr];\n};\nObject.defineProperty(exports, 'ensureArray', {\n  enumerable: true,\n  get: function () {\n    return lodashUnified.castArray;\n  }\n});\nexports.castArray = castArray;\nexports.unique = unique;","map":{"version":3,"names":["unique","arr","Set","castArray","Array","isArray"],"sources":["../../../../packages/utils/arrays.ts"],"sourcesContent":["export const unique = <T>(arr: T[]) => [...new Set(arr)]\n\ntype Many<T> = T | ReadonlyArray<T>\n// TODO: rename to `ensureArray`\n/** like `_.castArray`, except falsy value returns empty array. */\nexport const castArray = <T>(arr: Many<T>): T[] => {\n  if (!arr && (arr as any) !== 0) return []\n  return Array.isArray(arr) ? arr : [arr]\n}\n\n// TODO: remove import alias\n// avoid naming conflicts\nexport { castArray as ensureArray } from 'lodash-unified'\n"],"mappings":";;;;;;AAAY,MAACA,MAAM,GAAIC,GAAG,IAAK,CAAC,GAAG,IAAIC,GAAG,CAACD,GAAG,CAAC;AACnC,MAACE,SAAS,GAAIF,GAAG,IAAK;EAChC,IAAI,CAACA,GAAG,IAAIA,GAAG,KAAK,CAAC,EACnB,OAAO,EAAE;EACX,OAAOG,KAAK,CAACC,OAAO,CAACJ,GAAG,CAAC,GAAGA,GAAG,GAAG,CAACA,GAAG,CAAC;AACzC"},"metadata":{},"sourceType":"script","externalDependencies":[]}