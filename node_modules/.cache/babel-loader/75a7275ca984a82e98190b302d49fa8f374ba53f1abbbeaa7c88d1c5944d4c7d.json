{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$1 = require('../../tooltip/index.js');\nrequire('../../../hooks/index.js');\nrequire('./composables/index.js');\nvar button = require('./button.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar useSliderButton = require('./composables/use-slider-button.js');\nconst _hoisted_1 = [\"tabindex\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElSliderButton\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: button.sliderButtonProps,\n  emits: button.sliderButtonEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const ns = index.useNamespace(\"slider\");\n    const initData = vue.reactive({\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0,\n      oldValue: props.modelValue\n    });\n    const {\n      disabled,\n      button,\n      tooltip,\n      showTooltip,\n      tooltipVisible,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition\n    } = useSliderButton.useSliderButton(props, initData, emit);\n    const {\n      hovering,\n      dragging\n    } = vue.toRefs(initData);\n    expose({\n      onButtonDown,\n      onKeyDown,\n      setPosition,\n      hovering,\n      dragging\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        ref_key: \"button\",\n        ref: button,\n        class: vue.normalizeClass([vue.unref(ns).e(\"button-wrapper\"), {\n          hover: vue.unref(hovering),\n          dragging: vue.unref(dragging)\n        }]),\n        style: vue.normalizeStyle(vue.unref(wrapperStyle)),\n        tabindex: vue.unref(disabled) ? -1 : 0,\n        onMouseenter: _cache[0] || (_cache[0] = (...args) => vue.unref(handleMouseEnter) && vue.unref(handleMouseEnter)(...args)),\n        onMouseleave: _cache[1] || (_cache[1] = (...args) => vue.unref(handleMouseLeave) && vue.unref(handleMouseLeave)(...args)),\n        onMousedown: _cache[2] || (_cache[2] = (...args) => vue.unref(onButtonDown) && vue.unref(onButtonDown)(...args)),\n        onTouchstart: _cache[3] || (_cache[3] = (...args) => vue.unref(onButtonDown) && vue.unref(onButtonDown)(...args)),\n        onFocus: _cache[4] || (_cache[4] = (...args) => vue.unref(handleMouseEnter) && vue.unref(handleMouseEnter)(...args)),\n        onBlur: _cache[5] || (_cache[5] = (...args) => vue.unref(handleMouseLeave) && vue.unref(handleMouseLeave)(...args)),\n        onKeydown: _cache[6] || (_cache[6] = (...args) => vue.unref(onKeyDown) && vue.unref(onKeyDown)(...args))\n      }, [vue.createVNode(vue.unref(index$1.ElTooltip), {\n        ref_key: \"tooltip\",\n        ref: tooltip,\n        visible: vue.unref(tooltipVisible),\n        placement: _ctx.placement,\n        \"fallback-placements\": [\"top\", \"bottom\", \"right\", \"left\"],\n        \"stop-popper-mouse-event\": false,\n        \"popper-class\": _ctx.tooltipClass,\n        disabled: !vue.unref(showTooltip),\n        persistent: \"\"\n      }, {\n        content: vue.withCtx(() => [vue.createElementVNode(\"span\", null, vue.toDisplayString(vue.unref(formatValue)), 1)]),\n        default: vue.withCtx(() => [vue.createElementVNode(\"div\", {\n          class: vue.normalizeClass([vue.unref(ns).e(\"button\"), {\n            hover: vue.unref(hovering),\n            dragging: vue.unref(dragging)\n          }])\n        }, null, 2)]),\n        _: 1\n      }, 8, [\"visible\", \"placement\", \"popper-class\", \"disabled\"])], 46, _hoisted_1);\n    };\n  }\n});\nvar SliderButton = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/slider/src/button.vue\"]]);\nexports[\"default\"] = SliderButton;","map":{"version":3,"names":["name","ns","index","useNamespace","initData","vue","reactive","hovering","dragging","isClick","startX","currentX","startY","currentY","startPosition","newPosition","oldValue","props","modelValue","disabled","button","tooltip","showTooltip","tooltipVisible","wrapperStyle","formatValue","handleMouseEnter","handleMouseLeave","onButtonDown","onKeyDown","setPosition","useSliderButton","emit","toRefs","expose"],"sources":["../../../../../../packages/components/slider/src/button.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"button\"\n    :class=\"[ns.e('button-wrapper'), { hover: hovering, dragging }]\"\n    :style=\"wrapperStyle\"\n    :tabindex=\"disabled ? -1 : 0\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n    @mousedown=\"onButtonDown\"\n    @touchstart=\"onButtonDown\"\n    @focus=\"handleMouseEnter\"\n    @blur=\"handleMouseLeave\"\n    @keydown=\"onKeyDown\"\n  >\n    <el-tooltip\n      ref=\"tooltip\"\n      :visible=\"tooltipVisible\"\n      :placement=\"placement\"\n      :fallback-placements=\"['top', 'bottom', 'right', 'left']\"\n      :stop-popper-mouse-event=\"false\"\n      :popper-class=\"tooltipClass\"\n      :disabled=\"!showTooltip\"\n      persistent\n    >\n      <template #content>\n        <span>{{ formatValue }}</span>\n      </template>\n      <div :class=\"[ns.e('button'), { hover: hovering, dragging }]\" />\n    </el-tooltip>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { reactive, toRefs } from 'vue'\nimport { ElTooltip } from '@element-plus/components/tooltip'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useSliderButton } from './composables'\nimport { sliderButtonEmits, sliderButtonProps } from './button'\nimport type { SliderButtonInitData } from './button'\n\ndefineOptions({\n  name: 'ElSliderButton',\n})\n\nconst props = defineProps(sliderButtonProps)\nconst emit = defineEmits(sliderButtonEmits)\n\nconst ns = useNamespace('slider')\n\nconst initData = reactive<SliderButtonInitData>({\n  hovering: false,\n  dragging: false,\n  isClick: false,\n  startX: 0,\n  currentX: 0,\n  startY: 0,\n  currentY: 0,\n  startPosition: 0,\n  newPosition: 0,\n  oldValue: props.modelValue,\n})\n\nconst {\n  disabled,\n  button,\n  tooltip,\n  showTooltip,\n  tooltipVisible,\n  wrapperStyle,\n  formatValue,\n  handleMouseEnter,\n  handleMouseLeave,\n  onButtonDown,\n  onKeyDown,\n  setPosition,\n} = useSliderButton(props, initData, emit)\n\nconst { hovering, dragging } = toRefs(initData)\n\ndefineExpose({\n  onButtonDown,\n  onKeyDown,\n  setPosition,\n  hovering,\n  dragging,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;uCAwCc;EACZA,IAAM;AACR;;;;;;;;;;IAKM,MAAAC,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,QAAQ;IAEhC,MAAMC,QAAA,GAAWC,GAAA,CAAAC,QAA+B;MAC9CC,QAAU;MACVC,QAAU;MACVC,OAAS;MACTC,MAAQ;MACRC,QAAU;MACVC,MAAQ;MACRC,QAAU;MACVC,aAAe;MACfC,WAAa;MACbC,QAAA,EAAUC,KAAM,CAAAC;IAAA,CACjB;IAEK;MACJC,QAAA;MACAC,MAAA;MACAC,OAAA;MACAC,WAAA;MACAC,cAAA;MACAC,YAAA;MACAC,WAAA;MACAC,gBAAA;MACAC,gBAAA;MACAC,YAAA;MACAC,SAAA;MACAC;IAAA,CACE,GAAAC,eAAA,CAAAA,eAAA,CAAgBd,KAAO,EAAAb,QAAA,EAAU4B,IAAI;IAEzC,MAAM;MAAEzB,QAAA;MAAUC;IAAa,IAAAH,GAAA,CAAA4B,MAAA,CAAO7B,QAAQ;IAEjC8B,MAAA;MACXN,YAAA;MACAC,SAAA;MACAC,WAAA;MACAvB,QAAA;MACAC;IAAA,CACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}