{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar shared = require('@vue/shared');\nvar lodashUnified = require('lodash-unified');\nvar core = require('@vueuse/core');\nvar index$7 = require('../../cascader-panel/index.js');\nvar index$3 = require('../../input/index.js');\nvar index$2 = require('../../tooltip/index.js');\nvar index$8 = require('../../scrollbar/index.js');\nvar index$5 = require('../../tag/index.js');\nvar index$4 = require('../../icon/index.js');\nrequire('../../form/index.js');\nrequire('../../../directives/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../../utils/index.js');\nrequire('../../../constants/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar cascader = require('./cascader.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar index$1 = require('../../../hooks/use-locale/index.js');\nvar useFormItem = require('../../form/src/hooks/use-form-item.js');\nvar useFormCommonProps = require('../../form/src/hooks/use-form-common-props.js');\nvar event = require('../../../constants/event.js');\nvar error = require('../../../utils/error.js');\nvar i18n = require('../../../utils/i18n.js');\nvar aria = require('../../../constants/aria.js');\nvar aria$1 = require('../../../utils/dom/aria.js');\nvar index$6 = require('../../../directives/click-outside/index.js');\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"placeholder\", \"onKeydown\"];\nconst _hoisted_3 = [\"onClick\"];\nconst COMPONENT_NAME = \"ElCascader\";\nconst __default__ = vue.defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: cascader.cascaderProps,\n  emits: cascader.cascaderEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const popperOptions = {\n      modifiers: [{\n        name: \"arrowPosition\",\n        enabled: true,\n        phase: \"main\",\n        fn: ({\n          state\n        }) => {\n          const {\n            modifiersData,\n            placement\n          } = state;\n          if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n          modifiersData.arrow.x = 35;\n        },\n        requires: [\"arrow\"]\n      }]\n    };\n    const attrs = vue.useAttrs();\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const nsCascader = index.useNamespace(\"cascader\");\n    const nsInput = index.useNamespace(\"input\");\n    const {\n      t\n    } = index$1.useLocale();\n    const {\n      form,\n      formItem\n    } = useFormItem.useFormItem();\n    const tooltipRef = vue.ref(null);\n    const input = vue.ref(null);\n    const tagWrapper = vue.ref(null);\n    const cascaderPanelRef = vue.ref(null);\n    const suggestionPanel = vue.ref(null);\n    const popperVisible = vue.ref(false);\n    const inputHover = vue.ref(false);\n    const filtering = vue.ref(false);\n    const filterFocus = vue.ref(false);\n    const inputValue = vue.ref(\"\");\n    const searchInputValue = vue.ref(\"\");\n    const presentTags = vue.ref([]);\n    const allPresentTags = vue.ref([]);\n    const suggestions = vue.ref([]);\n    const isOnComposition = vue.ref(false);\n    const cascaderStyle = vue.computed(() => {\n      return attrs.style;\n    });\n    const isDisabled = vue.computed(() => props.disabled || (form == null ? void 0 : form.disabled));\n    const inputPlaceholder = vue.computed(() => props.placeholder || t(\"el.cascader.placeholder\"));\n    const currentPlaceholder = vue.computed(() => searchInputValue.value || presentTags.value.length > 0 || isOnComposition.value ? \"\" : inputPlaceholder.value);\n    const realSize = useFormCommonProps.useFormSize();\n    const tagSize = vue.computed(() => [\"small\"].includes(realSize.value) ? \"small\" : \"default\");\n    const multiple = vue.computed(() => !!props.props.multiple);\n    const readonly = vue.computed(() => !props.filterable || multiple.value);\n    const searchKeyword = vue.computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = vue.computed(() => {\n      var _a;\n      return ((_a = cascaderPanelRef.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const clearBtnVisible = vue.computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = vue.computed(() => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \"\" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const checkedValue = vue.computed({\n      get() {\n        return lodashUnified.cloneDeep(props.modelValue);\n      },\n      set(val) {\n        emit(event.UPDATE_MODEL_EVENT, val);\n        emit(event.CHANGE_EVENT, val);\n        if (props.validateEvent) {\n          formItem == null ? void 0 : formItem.validate(\"change\").catch(err => error.debugWarn(err));\n        }\n      }\n    });\n    const cascaderKls = vue.computed(() => {\n      return [nsCascader.b(), nsCascader.m(realSize.value), nsCascader.is(\"disabled\", isDisabled.value), attrs.class];\n    });\n    const cascaderIconKls = vue.computed(() => {\n      return [nsInput.e(\"icon\"), \"icon-arrow-down\", nsCascader.is(\"reverse\", popperVisible.value)];\n    });\n    const inputClass = vue.computed(() => {\n      return nsCascader.is(\"focus\", popperVisible.value || filterFocus.value);\n    });\n    const contentRef = vue.computed(() => {\n      var _a, _b;\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const togglePopperVisible = visible => {\n      var _a, _b, _c;\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n        if (visible) {\n          updatePopperPosition();\n          vue.nextTick((_c = cascaderPanelRef.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          syncPresentTextValue();\n        }\n        emit(\"visibleChange\", visible);\n      }\n    };\n    const updatePopperPosition = () => {\n      vue.nextTick(() => {\n        var _a;\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n    const genTag = node => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n    const deleteTag = tag => {\n      var _a;\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"removeTag\", node.valueByOption);\n    };\n    const calculatePresentTags = () => {\n      if (!multiple.value) return;\n      const nodes = checkedNodes.value;\n      const tags = [];\n      const allTags = [];\n      nodes.forEach(node => allTags.push(genTag(node)));\n      allPresentTags.value = allTags;\n      if (nodes.length) {\n        nodes.slice(0, props.maxCollapseTags).forEach(node => tags.push(genTag(node)));\n        const rest = nodes.slice(props.maxCollapseTags);\n        const restCount = rest.length;\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach(node => tags.push(genTag(node)));\n          }\n        }\n      }\n      presentTags.value = tags;\n    };\n    const calculateSuggestions = () => {\n      var _a, _b;\n      const {\n        filterMethod,\n        showAllLevels,\n        separator\n      } = props;\n      const res = (_b = (_a = cascaderPanelRef.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(node => {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n      if (multiple.value) {\n        presentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n      }\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n    const focusFirstNode = () => {\n      var _a;\n      let firstNode;\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e(\"suggestion-item\")}`);\n      } else {\n        firstNode = (_a = cascaderPanelRef.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b(\"node\")}[tabindex=\"-1\"]`);\n      }\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n    const updateStyle = () => {\n      var _a, _b;\n      const inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!core.isClient || !inputInner) return;\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e(\"suggestion-list\")}`);\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n      if (tagWrapperEl) {\n        const {\n          offsetHeight\n        } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n    const getCheckedNodes = leafOnly => {\n      var _a;\n      return (_a = cascaderPanelRef.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n    const handleExpandChange = value => {\n      updatePopperPosition();\n      emit(\"expandChange\", value);\n    };\n    const handleComposition = event => {\n      var _a;\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      if (event.type === \"compositionend\") {\n        isOnComposition.value = false;\n        vue.nextTick(() => handleInput(text));\n      } else {\n        const lastCharacter = text[text.length - 1] || \"\";\n        isOnComposition.value = !i18n.isKorean(lastCharacter);\n      }\n    };\n    const handleKeyDown = e => {\n      if (isOnComposition.value) return;\n      switch (e.code) {\n        case aria.EVENT_CODE.enter:\n          togglePopperVisible();\n          break;\n        case aria.EVENT_CODE.down:\n          togglePopperVisible(true);\n          vue.nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n        case aria.EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n          break;\n        case aria.EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    const handleClear = () => {\n      var _a;\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.clearCheckedNodes();\n      if (!popperVisible.value && props.filterable) {\n        syncPresentTextValue();\n      }\n      togglePopperVisible(false);\n    };\n    const syncPresentTextValue = () => {\n      const {\n        value\n      } = presentText;\n      inputValue.value = value;\n      searchInputValue.value = value;\n    };\n    const handleSuggestionClick = node => {\n      var _a, _b;\n      const {\n        checked\n      } = node;\n      if (multiple.value) {\n        (_a = cascaderPanelRef.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = cascaderPanelRef.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n    const handleSuggestionKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n      switch (code) {\n        case aria.EVENT_CODE.up:\n        case aria.EVENT_CODE.down:\n          {\n            const distance = code === aria.EVENT_CODE.up ? -1 : 1;\n            aria$1.focusNode(aria$1.getSibling(target, distance, `.${nsCascader.e(\"suggestion-item\")}[tabindex=\"-1\"]`));\n            break;\n          }\n        case aria.EVENT_CODE.enter:\n          target.click();\n          break;\n      }\n    };\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount || props.collapseTags && tags.length > 1) return;\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n    const handleFocus = e => {\n      const el = e.target;\n      const name = nsCascader.e(\"search-input\");\n      if (el.className === name) {\n        filterFocus.value = true;\n      }\n      emit(\"focus\", e);\n    };\n    const handleBlur = e => {\n      filterFocus.value = false;\n      emit(\"blur\", e);\n    };\n    const handleFilter = lodashUnified.debounce(() => {\n      const {\n        value\n      } = searchKeyword;\n      if (!value) return;\n      const passed = props.beforeFilter(value);\n      if (shared.isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n    const getInputInnerHeight = inputInner => Number.parseFloat(core.useCssVar(nsInput.cssVarName(\"input-height\"), inputInner).value) - 2;\n    vue.watch(filtering, updatePopperPosition);\n    vue.watch([checkedNodes, isDisabled], calculatePresentTags);\n    vue.watch(presentTags, () => {\n      vue.nextTick(() => updateStyle());\n    });\n    vue.watch(realSize, async () => {\n      await vue.nextTick();\n      const inputInner = input.value.input;\n      inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight;\n      updateStyle();\n    });\n    vue.watch(presentText, syncPresentTextValue, {\n      immediate: true\n    });\n    vue.onMounted(() => {\n      const inputInner = input.value.input;\n      const inputInnerHeight = getInputInnerHeight(inputInner);\n      inputInitialHeight = inputInner.offsetHeight || inputInnerHeight;\n      core.useResizeObserver(inputInner, updateStyle);\n    });\n    expose({\n      getCheckedNodes,\n      cascaderPanelRef,\n      togglePopperVisible,\n      contentRef\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.unref(index$2.ElTooltip), {\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        visible: popperVisible.value,\n        teleported: _ctx.teleported,\n        \"popper-class\": [vue.unref(nsCascader).e(\"dropdown\"), _ctx.popperClass],\n        \"popper-options\": popperOptions,\n        \"fallback-placements\": [\"bottom-start\", \"bottom\", \"top-start\", \"top\", \"right\", \"left\"],\n        \"stop-popper-mouse-event\": false,\n        \"gpu-acceleration\": false,\n        placement: \"bottom-start\",\n        transition: `${vue.unref(nsCascader).namespace.value}-zoom-in-top`,\n        effect: \"light\",\n        pure: \"\",\n        persistent: \"\",\n        onHide: hideSuggestionPanel\n      }, {\n        default: vue.withCtx(() => [vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"div\", {\n          class: vue.normalizeClass(vue.unref(cascaderKls)),\n          style: vue.normalizeStyle(vue.unref(cascaderStyle)),\n          onClick: _cache[5] || (_cache[5] = () => togglePopperVisible(vue.unref(readonly) ? void 0 : true)),\n          onKeydown: handleKeyDown,\n          onMouseenter: _cache[6] || (_cache[6] = $event => inputHover.value = true),\n          onMouseleave: _cache[7] || (_cache[7] = $event => inputHover.value = false)\n        }, [vue.createVNode(vue.unref(index$3.ElInput), {\n          ref_key: \"input\",\n          ref: input,\n          modelValue: inputValue.value,\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => inputValue.value = $event),\n          placeholder: vue.unref(currentPlaceholder),\n          readonly: vue.unref(readonly),\n          disabled: vue.unref(isDisabled),\n          \"validate-event\": false,\n          size: vue.unref(realSize),\n          class: vue.normalizeClass(vue.unref(inputClass)),\n          tabindex: vue.unref(multiple) && _ctx.filterable && !vue.unref(isDisabled) ? -1 : void 0,\n          onCompositionstart: handleComposition,\n          onCompositionupdate: handleComposition,\n          onCompositionend: handleComposition,\n          onFocus: handleFocus,\n          onBlur: handleBlur,\n          onInput: handleInput\n        }, {\n          suffix: vue.withCtx(() => [vue.unref(clearBtnVisible) ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n            key: \"clear\",\n            class: vue.normalizeClass([vue.unref(nsInput).e(\"icon\"), \"icon-circle-close\"]),\n            onClick: vue.withModifiers(handleClear, [\"stop\"])\n          }, {\n            default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.CircleClose))]),\n            _: 1\n          }, 8, [\"class\", \"onClick\"])) : (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n            key: \"arrow-down\",\n            class: vue.normalizeClass(vue.unref(cascaderIconKls)),\n            onClick: _cache[0] || (_cache[0] = vue.withModifiers($event => togglePopperVisible(), [\"stop\"]))\n          }, {\n            default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.ArrowDown))]),\n            _: 1\n          }, 8, [\"class\"]))]),\n          _: 1\n        }, 8, [\"modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"tabindex\"]), vue.unref(multiple) ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n          key: 0,\n          ref_key: \"tagWrapper\",\n          ref: tagWrapper,\n          class: vue.normalizeClass(vue.unref(nsCascader).e(\"tags\"))\n        }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(presentTags.value, tag => {\n          return vue.openBlock(), vue.createBlock(vue.unref(index$5.ElTag), {\n            key: tag.key,\n            type: _ctx.tagType,\n            size: vue.unref(tagSize),\n            hit: tag.hitState,\n            closable: tag.closable,\n            \"disable-transitions\": \"\",\n            onClose: $event => deleteTag(tag)\n          }, {\n            default: vue.withCtx(() => [tag.isCollapseTag === false ? (vue.openBlock(), vue.createElementBlock(\"span\", _hoisted_1, vue.toDisplayString(tag.text), 1)) : (vue.openBlock(), vue.createBlock(vue.unref(index$2.ElTooltip), {\n              key: 1,\n              disabled: popperVisible.value || !_ctx.collapseTagsTooltip,\n              \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n              placement: \"bottom\",\n              effect: \"light\"\n            }, {\n              default: vue.withCtx(() => [vue.createElementVNode(\"span\", null, vue.toDisplayString(tag.text), 1)]),\n              content: vue.withCtx(() => [vue.createElementVNode(\"div\", {\n                class: vue.normalizeClass(vue.unref(nsCascader).e(\"collapse-tags\"))\n              }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(allPresentTags.value.slice(_ctx.maxCollapseTags), (tag2, idx) => {\n                return vue.openBlock(), vue.createElementBlock(\"div\", {\n                  key: idx,\n                  class: vue.normalizeClass(vue.unref(nsCascader).e(\"collapse-tag\"))\n                }, [(vue.openBlock(), vue.createBlock(vue.unref(index$5.ElTag), {\n                  key: tag2.key,\n                  class: \"in-tooltip\",\n                  type: _ctx.tagType,\n                  size: vue.unref(tagSize),\n                  hit: tag2.hitState,\n                  closable: tag2.closable,\n                  \"disable-transitions\": \"\",\n                  onClose: $event => deleteTag(tag2)\n                }, {\n                  default: vue.withCtx(() => [vue.createElementVNode(\"span\", null, vue.toDisplayString(tag2.text), 1)]),\n                  _: 2\n                }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]))], 2);\n              }), 128))], 2)]),\n              _: 2\n            }, 1032, [\"disabled\"]))]),\n            _: 2\n          }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]);\n        }), 128)), _ctx.filterable && !vue.unref(isDisabled) ? vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"input\", {\n          key: 0,\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => searchInputValue.value = $event),\n          type: \"text\",\n          class: vue.normalizeClass(vue.unref(nsCascader).e(\"search-input\")),\n          placeholder: vue.unref(presentText) ? \"\" : vue.unref(inputPlaceholder),\n          onInput: _cache[3] || (_cache[3] = e => handleInput(searchInputValue.value, e)),\n          onClick: _cache[4] || (_cache[4] = vue.withModifiers($event => togglePopperVisible(true), [\"stop\"])),\n          onKeydown: vue.withKeys(handleDelete, [\"delete\"]),\n          onCompositionstart: handleComposition,\n          onCompositionupdate: handleComposition,\n          onCompositionend: handleComposition,\n          onFocus: handleFocus,\n          onBlur: handleBlur\n        }, null, 42, _hoisted_2)), [[vue.vModelText, searchInputValue.value]]) : vue.createCommentVNode(\"v-if\", true)], 2)) : vue.createCommentVNode(\"v-if\", true)], 38)), [[vue.unref(index$6[\"default\"]), () => togglePopperVisible(false), vue.unref(contentRef)]])]),\n        content: vue.withCtx(() => [vue.withDirectives(vue.createVNode(vue.unref(index$7[\"default\"]), {\n          ref_key: \"cascaderPanelRef\",\n          ref: cascaderPanelRef,\n          modelValue: vue.unref(checkedValue),\n          \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => vue.isRef(checkedValue) ? checkedValue.value = $event : null),\n          options: _ctx.options,\n          props: props.props,\n          border: false,\n          \"render-label\": _ctx.$slots.default,\n          onExpandChange: handleExpandChange,\n          onClose: _cache[9] || (_cache[9] = $event => _ctx.$nextTick(() => togglePopperVisible(false)))\n        }, null, 8, [\"modelValue\", \"options\", \"props\", \"render-label\"]), [[vue.vShow, !filtering.value]]), _ctx.filterable ? vue.withDirectives((vue.openBlock(), vue.createBlock(vue.unref(index$8.ElScrollbar), {\n          key: 0,\n          ref_key: \"suggestionPanel\",\n          ref: suggestionPanel,\n          tag: \"ul\",\n          class: vue.normalizeClass(vue.unref(nsCascader).e(\"suggestion-panel\")),\n          \"view-class\": vue.unref(nsCascader).e(\"suggestion-list\"),\n          onKeydown: handleSuggestionKeyDown\n        }, {\n          default: vue.withCtx(() => [suggestions.value.length ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, {\n            key: 0\n          }, vue.renderList(suggestions.value, item => {\n            return vue.openBlock(), vue.createElementBlock(\"li\", {\n              key: item.uid,\n              class: vue.normalizeClass([vue.unref(nsCascader).e(\"suggestion-item\"), vue.unref(nsCascader).is(\"checked\", item.checked)]),\n              tabindex: -1,\n              onClick: $event => handleSuggestionClick(item)\n            }, [vue.createElementVNode(\"span\", null, vue.toDisplayString(item.text), 1), item.checked ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n              key: 0\n            }, {\n              default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.Check))]),\n              _: 1\n            })) : vue.createCommentVNode(\"v-if\", true)], 10, _hoisted_3);\n          }), 128)) : vue.renderSlot(_ctx.$slots, \"empty\", {\n            key: 1\n          }, () => [vue.createElementVNode(\"li\", {\n            class: vue.normalizeClass(vue.unref(nsCascader).e(\"empty-text\"))\n          }, vue.toDisplayString(vue.unref(t)(\"el.cascader.noMatch\")), 3)])]),\n          _: 3\n        }, 8, [\"class\", \"view-class\"])), [[vue.vShow, filtering.value]]) : vue.createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"visible\", \"teleported\", \"popper-class\", \"transition\"]);\n    };\n  }\n});\nvar Cascader = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader/src/cascader.vue\"]]);\nexports[\"default\"] = Cascader;","map":{"version":3,"names":["name","COMPONENT_NAME","popperOptions","modifiers","enabled","phase","fn","state","modifiersData","placement","includes","arrow","x","requires","attrs","vue","useAttrs","inputInitialHeight","pressDeleteCount","nsCascader","index","useNamespace","nsInput","t","index$1","useLocale","form","formItem","useFormItem","tooltipRef","ref","input","tagWrapper","cascaderPanelRef","suggestionPanel","popperVisible","inputHover","filtering","filterFocus","inputValue","searchInputValue","presentTags","allPresentTags","suggestions","isOnComposition","cascaderStyle","computed","style","isDisabled","props","disabled","inputPlaceholder","placeholder","currentPlaceholder","value","length","realSize","useFormCommonProps","useFormSize","tagSize","multiple","readonly","filterable","searchKeyword","checkedNodes","_a","clearBtnVisible","clearable","presentText","showAllLevels","separator","nodes","calcText","checkedValue","get","lodashUnified","cloneDeep","modelValue","set","val","emit","event","UPDATE_MODEL_EVENT","CHANGE_EVENT","validateEvent","validate","catch","err","error","debugWarn","cascaderKls","b","m","is","class","cascaderIconKls","e","inputClass","contentRef","_b","popperRef","togglePopperVisible","visible","_c","setAttribute","updatePopperPosition","nextTick","scrollToExpandingNode","syncPresentTextValue","updatePopper","hideSuggestionPanel","genTag","node","key","uid","text","hitState","closable","isCollapseTag","deleteTag","tag","doCheck","calculateCheckedValue","valueByOption","calculatePresentTags","tags","allTags","forEach","push","slice","maxCollapseTags","rest","restCount","collapseTags","calculateSuggestions","filterMethod","res","getFlattedNodes","checkStrictly","filter","focusFirstNode","firstNode","$el","querySelector","focus","click","updateStyle","inputInner","tagWrapperEl","suggestionPanelEl","core","isClient","suggestionList","minWidth","offsetWidth","offsetHeight","height","Math","max","getCheckedNodes","leafOnly","handleExpandChange","handleComposition","target","type","handleInput","lastCharacter","i18n","isKorean","handleKeyDown","code","aria","EVENT_CODE","enter","down","preventDefault","esc","stopPropagation","tab","handleClear","clearCheckedNodes","handleSuggestionClick","checked","handleCheckChange","handleSuggestionKeyDown","up","distance","aria$1","focusNode","getSibling","handleDelete","lastTag","handleFocus","el","className","handleBlur","handleFilter","debounce","passed","beforeFilter","shared","isPromise","then","isComposing","getInputInnerHeight","Number","parseFloat","useCssVar","cssVarName","watch"],"sources":["../../../../../../packages/components/cascader/src/cascader.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    :visible=\"popperVisible\"\n    :teleported=\"teleported\"\n    :popper-class=\"[nsCascader.e('dropdown'), popperClass]\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"[\n      'bottom-start',\n      'bottom',\n      'top-start',\n      'top',\n      'right',\n      'left',\n    ]\"\n    :stop-popper-mouse-event=\"false\"\n    :gpu-acceleration=\"false\"\n    placement=\"bottom-start\"\n    :transition=\"`${nsCascader.namespace.value}-zoom-in-top`\"\n    effect=\"light\"\n    pure\n    persistent\n    @hide=\"hideSuggestionPanel\"\n  >\n    <template #default>\n      <div\n        v-clickoutside:[contentRef]=\"() => togglePopperVisible(false)\"\n        :class=\"cascaderKls\"\n        :style=\"cascaderStyle\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model=\"inputValue\"\n          :placeholder=\"currentPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"inputClass\"\n          :tabindex=\"multiple && filterable && !isDisabled ? -1 : undefined\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n        >\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              :class=\"[nsInput.e('icon'), 'icon-circle-close']\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"cascaderIconKls\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div v-if=\"multiple\" ref=\"tagWrapper\" :class=\"nsCascader.e('tags')\">\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            :type=\"tagType\"\n            :size=\"tagSize\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <template v-if=\"tag.isCollapseTag === false\">\n              <span>{{ tag.text }}</span>\n            </template>\n            <template v-else>\n              <el-tooltip\n                :disabled=\"popperVisible || !collapseTagsTooltip\"\n                :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                placement=\"bottom\"\n                effect=\"light\"\n              >\n                <template #default>\n                  <span>{{ tag.text }}</span>\n                </template>\n                <template #content>\n                  <div :class=\"nsCascader.e('collapse-tags')\">\n                    <div\n                      v-for=\"(tag2, idx) in allPresentTags.slice(\n                        maxCollapseTags\n                      )\"\n                      :key=\"idx\"\n                      :class=\"nsCascader.e('collapse-tag')\"\n                    >\n                      <el-tag\n                        :key=\"tag2.key\"\n                        class=\"in-tooltip\"\n                        :type=\"tagType\"\n                        :size=\"tagSize\"\n                        :hit=\"tag2.hitState\"\n                        :closable=\"tag2.closable\"\n                        disable-transitions\n                        @close=\"deleteTag(tag2)\"\n                      >\n                        <span>{{ tag2.text }}</span>\n                      </el-tag>\n                    </div>\n                  </div>\n                </template>\n              </el-tooltip>\n            </template>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model=\"searchInputValue\"\n            type=\"text\"\n            :class=\"nsCascader.e('search-input')\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e as KeyboardEvent)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n            @focus=\"handleFocus\"\n            @blur=\"handleBlur\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"cascaderPanelRef\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props.props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"$nextTick(() => togglePopperVisible(false))\"\n      />\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        :class=\"nsCascader.e('suggestion-panel')\"\n        :view-class=\"nsCascader.e('suggestion-list')\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              nsCascader.e('suggestion-item'),\n              nsCascader.is('checked', item.checked),\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <span>{{ item.text }}</span>\n            <el-icon v-if=\"item.checked\">\n              <check />\n            </el-icon>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li :class=\"nsCascader.e('empty-text')\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, useAttrs, watch } from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { cloneDeep, debounce } from 'lodash-unified'\nimport { useCssVar, useResizeObserver } from '@vueuse/core'\nimport ElCascaderPanel from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport { useFormItem, useFormSize } from '@element-plus/components/form'\nimport { ClickOutside as vClickoutside } from '@element-plus/directives'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport {\n  debugWarn,\n  focusNode,\n  getSibling,\n  isClient,\n  isKorean,\n} from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { ArrowDown, Check, CircleClose } from '@element-plus/icons-vue'\nimport { cascaderEmits, cascaderProps } from './cascader'\n\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, Ref, StyleValue } from 'vue'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\nimport type { InputInstance } from '@element-plus/components/input'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type {\n  CascaderNode,\n  CascaderPanelInstance,\n  CascaderValue,\n  Tag,\n} from '@element-plus/components/cascader-panel'\n\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left', 'bottom', 'top'].includes(placement)) return\n        modifiersData.arrow.x = 35\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\nconst COMPONENT_NAME = 'ElCascader'\n\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(cascaderProps)\nconst emit = defineEmits(cascaderEmits)\nconst attrs = useAttrs()\n\nlet inputInitialHeight = 0\nlet pressDeleteCount = 0\n\nconst nsCascader = useNamespace('cascader')\nconst nsInput = useNamespace('input')\n\nconst { t } = useLocale()\nconst { form, formItem } = useFormItem()\n\nconst tooltipRef: Ref<TooltipInstance | null> = ref(null)\nconst input: Ref<InputInstance | null> = ref(null)\nconst tagWrapper = ref(null)\nconst cascaderPanelRef: Ref<CascaderPanelInstance | null> = ref(null)\nconst suggestionPanel: Ref<ScrollbarInstance | null> = ref(null)\nconst popperVisible = ref(false)\nconst inputHover = ref(false)\nconst filtering = ref(false)\nconst filterFocus = ref(false)\nconst inputValue = ref('')\nconst searchInputValue = ref('')\nconst presentTags: Ref<Tag[]> = ref([])\nconst allPresentTags: Ref<Tag[]> = ref([])\nconst suggestions: Ref<CascaderNode[]> = ref([])\nconst isOnComposition = ref(false)\n\nconst cascaderStyle = computed<StyleValue>(() => {\n  return attrs.style as StyleValue\n})\n\nconst isDisabled = computed(() => props.disabled || form?.disabled)\nconst inputPlaceholder = computed(\n  () => props.placeholder || t('el.cascader.placeholder')\n)\nconst currentPlaceholder = computed(() =>\n  searchInputValue.value ||\n  presentTags.value.length > 0 ||\n  isOnComposition.value\n    ? ''\n    : inputPlaceholder.value\n)\nconst realSize = useFormSize()\nconst tagSize = computed(() =>\n  ['small'].includes(realSize.value) ? 'small' : 'default'\n)\nconst multiple = computed(() => !!props.props.multiple)\nconst readonly = computed(() => !props.filterable || multiple.value)\nconst searchKeyword = computed(() =>\n  multiple.value ? searchInputValue.value : inputValue.value\n)\nconst checkedNodes: ComputedRef<CascaderNode[]> = computed(\n  () => cascaderPanelRef.value?.checkedNodes || []\n)\nconst clearBtnVisible = computed(() => {\n  if (\n    !props.clearable ||\n    isDisabled.value ||\n    filtering.value ||\n    !inputHover.value\n  )\n    return false\n\n  return !!checkedNodes.value.length\n})\nconst presentText = computed(() => {\n  const { showAllLevels, separator } = props\n  const nodes = checkedNodes.value\n  return nodes.length\n    ? multiple.value\n      ? ''\n      : nodes[0].calcText(showAllLevels, separator)\n    : ''\n})\n\nconst checkedValue = computed<CascaderValue>({\n  get() {\n    return cloneDeep(props.modelValue) as CascaderValue\n  },\n  set(val) {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(CHANGE_EVENT, val)\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  },\n})\n\nconst cascaderKls = computed(() => {\n  return [\n    nsCascader.b(),\n    nsCascader.m(realSize.value),\n    nsCascader.is('disabled', isDisabled.value),\n    attrs.class,\n  ]\n})\n\nconst cascaderIconKls = computed(() => {\n  return [\n    nsInput.e('icon'),\n    'icon-arrow-down',\n    nsCascader.is('reverse', popperVisible.value),\n  ]\n})\n\nconst inputClass = computed(() => {\n  return nsCascader.is('focus', popperVisible.value || filterFocus.value)\n})\n\nconst contentRef = computed(() => {\n  return tooltipRef.value?.popperRef?.contentRef\n})\n\nconst togglePopperVisible = (visible?: boolean) => {\n  if (isDisabled.value) return\n\n  visible = visible ?? !popperVisible.value\n\n  if (visible !== popperVisible.value) {\n    popperVisible.value = visible\n    input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n    if (visible) {\n      updatePopperPosition()\n      nextTick(cascaderPanelRef.value?.scrollToExpandingNode)\n    } else if (props.filterable) {\n      syncPresentTextValue()\n    }\n\n    emit('visibleChange', visible)\n  }\n}\n\nconst updatePopperPosition = () => {\n  nextTick(() => {\n    tooltipRef.value?.updatePopper()\n  })\n}\n\nconst hideSuggestionPanel = () => {\n  filtering.value = false\n}\n\nconst genTag = (node: CascaderNode): Tag => {\n  const { showAllLevels, separator } = props\n  return {\n    node,\n    key: node.uid,\n    text: node.calcText(showAllLevels, separator),\n    hitState: false,\n    closable: !isDisabled.value && !node.isDisabled,\n    isCollapseTag: false,\n  }\n}\n\nconst deleteTag = (tag: Tag) => {\n  const node = tag.node as CascaderNode\n  node.doCheck(false)\n  cascaderPanelRef.value?.calculateCheckedValue()\n  emit('removeTag', node.valueByOption)\n}\n\nconst calculatePresentTags = () => {\n  if (!multiple.value) return\n\n  const nodes = checkedNodes.value\n  const tags: Tag[] = []\n\n  const allTags: Tag[] = []\n  nodes.forEach((node) => allTags.push(genTag(node)))\n  allPresentTags.value = allTags\n\n  if (nodes.length) {\n    nodes\n      .slice(0, props.maxCollapseTags)\n      .forEach((node) => tags.push(genTag(node)))\n    const rest = nodes.slice(props.maxCollapseTags)\n    const restCount = rest.length\n\n    if (restCount) {\n      if (props.collapseTags) {\n        tags.push({\n          key: -1,\n          text: `+ ${restCount}`,\n          closable: false,\n          isCollapseTag: true,\n        })\n      } else {\n        rest.forEach((node) => tags.push(genTag(node)))\n      }\n    }\n  }\n\n  presentTags.value = tags\n}\n\nconst calculateSuggestions = () => {\n  const { filterMethod, showAllLevels, separator } = props\n  const res = cascaderPanelRef.value\n    ?.getFlattedNodes(!props.props.checkStrictly)\n    ?.filter((node) => {\n      if (node.isDisabled) return false\n      node.calcText(showAllLevels, separator)\n      return filterMethod(node, searchKeyword.value)\n    })\n\n  if (multiple.value) {\n    presentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n    allPresentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n  }\n\n  filtering.value = true\n  suggestions.value = res!\n  updatePopperPosition()\n}\n\nconst focusFirstNode = () => {\n  let firstNode!: HTMLElement\n\n  if (filtering.value && suggestionPanel.value) {\n    firstNode = suggestionPanel.value.$el.querySelector(\n      `.${nsCascader.e('suggestion-item')}`\n    )\n  } else {\n    firstNode = cascaderPanelRef.value?.$el.querySelector(\n      `.${nsCascader.b('node')}[tabindex=\"-1\"]`\n    )\n  }\n\n  if (firstNode) {\n    firstNode.focus()\n    !filtering.value && firstNode.click()\n  }\n}\n\nconst updateStyle = () => {\n  const inputInner = input.value?.input\n  const tagWrapperEl = tagWrapper.value\n  const suggestionPanelEl = suggestionPanel.value?.$el\n\n  if (!isClient || !inputInner) return\n\n  if (suggestionPanelEl) {\n    const suggestionList = suggestionPanelEl.querySelector(\n      `.${nsCascader.e('suggestion-list')}`\n    )\n    suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n  }\n\n  if (tagWrapperEl) {\n    const { offsetHeight } = tagWrapperEl\n    const height =\n      presentTags.value.length > 0\n        ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px`\n        : `${inputInitialHeight}px`\n    inputInner.style.height = height\n    updatePopperPosition()\n  }\n}\n\nconst getCheckedNodes = (leafOnly: boolean) => {\n  return cascaderPanelRef.value?.getCheckedNodes(leafOnly)\n}\n\nconst handleExpandChange = (value: CascaderValue) => {\n  updatePopperPosition()\n  emit('expandChange', value)\n}\n\nconst handleComposition = (event: CompositionEvent) => {\n  const text = (event.target as HTMLInputElement)?.value\n  if (event.type === 'compositionend') {\n    isOnComposition.value = false\n    nextTick(() => handleInput(text))\n  } else {\n    const lastCharacter = text[text.length - 1] || ''\n    isOnComposition.value = !isKorean(lastCharacter)\n  }\n}\n\nconst handleKeyDown = (e: KeyboardEvent) => {\n  if (isOnComposition.value) return\n\n  switch (e.code) {\n    case EVENT_CODE.enter:\n      togglePopperVisible()\n      break\n    case EVENT_CODE.down:\n      togglePopperVisible(true)\n      nextTick(focusFirstNode)\n      e.preventDefault()\n      break\n    case EVENT_CODE.esc:\n      if (popperVisible.value === true) {\n        e.preventDefault()\n        e.stopPropagation()\n        togglePopperVisible(false)\n      }\n      break\n    case EVENT_CODE.tab:\n      togglePopperVisible(false)\n      break\n  }\n}\n\nconst handleClear = () => {\n  cascaderPanelRef.value?.clearCheckedNodes()\n  if (!popperVisible.value && props.filterable) {\n    syncPresentTextValue()\n  }\n  togglePopperVisible(false)\n}\n\nconst syncPresentTextValue = () => {\n  const { value } = presentText\n  inputValue.value = value\n  searchInputValue.value = value\n}\n\nconst handleSuggestionClick = (node: CascaderNode) => {\n  const { checked } = node\n\n  if (multiple.value) {\n    cascaderPanelRef.value?.handleCheckChange(node, !checked, false)\n  } else {\n    !checked && cascaderPanelRef.value?.handleCheckChange(node, true, false)\n    togglePopperVisible(false)\n  }\n}\n\nconst handleSuggestionKeyDown = (e: KeyboardEvent) => {\n  const target = e.target as HTMLElement\n  const { code } = e\n\n  switch (code) {\n    case EVENT_CODE.up:\n    case EVENT_CODE.down: {\n      const distance = code === EVENT_CODE.up ? -1 : 1\n      focusNode(\n        getSibling(\n          target,\n          distance,\n          `.${nsCascader.e('suggestion-item')}[tabindex=\"-1\"]`\n        ) as HTMLElement\n      )\n      break\n    }\n    case EVENT_CODE.enter:\n      target.click()\n      break\n  }\n}\n\nconst handleDelete = () => {\n  const tags = presentTags.value\n  const lastTag = tags[tags.length - 1]\n  pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n  if (!lastTag || !pressDeleteCount || (props.collapseTags && tags.length > 1))\n    return\n\n  if (lastTag.hitState) {\n    deleteTag(lastTag)\n  } else {\n    lastTag.hitState = true\n  }\n}\n\nconst handleFocus = (e: FocusEvent) => {\n  const el = e.target as HTMLInputElement\n  const name = nsCascader.e('search-input')\n  if (el.className === name) {\n    filterFocus.value = true\n  }\n  emit('focus', e)\n}\n\nconst handleBlur = (e: FocusEvent) => {\n  filterFocus.value = false\n  emit('blur', e)\n}\n\nconst handleFilter = debounce(() => {\n  const { value } = searchKeyword\n\n  if (!value) return\n\n  const passed = props.beforeFilter(value)\n\n  if (isPromise(passed)) {\n    passed.then(calculateSuggestions).catch(() => {\n      /* prevent log error */\n    })\n  } else if (passed !== false) {\n    calculateSuggestions()\n  } else {\n    hideSuggestionPanel()\n  }\n}, props.debounce)\n\nconst handleInput = (val: string, e?: KeyboardEvent) => {\n  !popperVisible.value && togglePopperVisible(true)\n\n  if (e?.isComposing) return\n\n  val ? handleFilter() : hideSuggestionPanel()\n}\n\nconst getInputInnerHeight = (inputInner: HTMLElement): number =>\n  Number.parseFloat(\n    useCssVar(nsInput.cssVarName('input-height'), inputInner).value\n  ) - 2\n\nwatch(filtering, updatePopperPosition)\n\nwatch([checkedNodes, isDisabled], calculatePresentTags)\n\nwatch(presentTags, () => {\n  nextTick(() => updateStyle())\n})\n\nwatch(realSize, async () => {\n  await nextTick()\n  const inputInner = input.value!.input!\n  inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight\n  updateStyle()\n})\n\nwatch(presentText, syncPresentTextValue, { immediate: true })\n\nonMounted(() => {\n  const inputInner = input.value!.input!\n\n  const inputInnerHeight = getInputInnerHeight(inputInner)\n\n  inputInitialHeight = inputInner.offsetHeight || inputInnerHeight\n  useResizeObserver(inputInner, updateStyle)\n})\n\ndefineExpose({\n  /**\n   * @description get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false`\n   */\n  getCheckedNodes,\n  /**\n   * @description cascader panel ref\n   */\n  cascaderPanelRef,\n  /**\n   * @description toggle the visible of popper\n   */\n  togglePopperVisible,\n  /**\n   * @description cascader content ref\n   */\n  contentRef,\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}