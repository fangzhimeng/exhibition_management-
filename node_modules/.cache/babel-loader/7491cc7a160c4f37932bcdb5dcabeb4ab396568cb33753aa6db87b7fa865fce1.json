{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar util = require('../util.js');\nfunction useTree(watcherData) {\n  const expandRowKeys = vue.ref([]);\n  const treeData = vue.ref({});\n  const indent = vue.ref(16);\n  const lazy = vue.ref(false);\n  const lazyTreeNodeMap = vue.ref({});\n  const lazyColumnIdentifier = vue.ref(\"hasChildren\");\n  const childrenColumnName = vue.ref(\"children\");\n  const instance = vue.getCurrentInstance();\n  const normalizedData = vue.computed(() => {\n    if (!watcherData.rowKey.value) return {};\n    const data = watcherData.data.value || [];\n    return normalize(data);\n  });\n  const normalizedLazyNode = vue.computed(() => {\n    const rowKey = watcherData.rowKey.value;\n    const keys = Object.keys(lazyTreeNodeMap.value);\n    const res = {};\n    if (!keys.length) return res;\n    keys.forEach(key => {\n      if (lazyTreeNodeMap.value[key].length) {\n        const item = {\n          children: []\n        };\n        lazyTreeNodeMap.value[key].forEach(row => {\n          const currentRowKey = util.getRowIdentity(row, rowKey);\n          item.children.push(currentRowKey);\n          if (row[lazyColumnIdentifier.value] && !res[currentRowKey]) {\n            res[currentRowKey] = {\n              children: []\n            };\n          }\n        });\n        res[key] = item;\n      }\n    });\n    return res;\n  });\n  const normalize = data => {\n    const rowKey = watcherData.rowKey.value;\n    const res = {};\n    util.walkTreeNode(data, (parent, children, level) => {\n      const parentId = util.getRowIdentity(parent, rowKey);\n      if (Array.isArray(children)) {\n        res[parentId] = {\n          children: children.map(row => util.getRowIdentity(row, rowKey)),\n          level\n        };\n      } else if (lazy.value) {\n        res[parentId] = {\n          children: [],\n          lazy: true,\n          level\n        };\n      }\n    }, childrenColumnName.value, lazyColumnIdentifier.value);\n    return res;\n  };\n  const updateTreeData = (ifChangeExpandRowKeys = false, ifExpandAll = (_a => (_a = instance.store) == null ? void 0 : _a.states.defaultExpandAll.value)()) => {\n    var _a2;\n    const nested = normalizedData.value;\n    const normalizedLazyNode_ = normalizedLazyNode.value;\n    const keys = Object.keys(nested);\n    const newTreeData = {};\n    if (keys.length) {\n      const oldTreeData = vue.unref(treeData);\n      const rootLazyRowKeys = [];\n      const getExpanded = (oldValue, key) => {\n        if (ifChangeExpandRowKeys) {\n          if (expandRowKeys.value) {\n            return ifExpandAll || expandRowKeys.value.includes(key);\n          } else {\n            return !!(ifExpandAll || (oldValue == null ? void 0 : oldValue.expanded));\n          }\n        } else {\n          const included = ifExpandAll || expandRowKeys.value && expandRowKeys.value.includes(key);\n          return !!((oldValue == null ? void 0 : oldValue.expanded) || included);\n        }\n      };\n      keys.forEach(key => {\n        const oldValue = oldTreeData[key];\n        const newValue = {\n          ...nested[key]\n        };\n        newValue.expanded = getExpanded(oldValue, key);\n        if (newValue.lazy) {\n          const {\n            loaded = false,\n            loading = false\n          } = oldValue || {};\n          newValue.loaded = !!loaded;\n          newValue.loading = !!loading;\n          rootLazyRowKeys.push(key);\n        }\n        newTreeData[key] = newValue;\n      });\n      const lazyKeys = Object.keys(normalizedLazyNode_);\n      if (lazy.value && lazyKeys.length && rootLazyRowKeys.length) {\n        lazyKeys.forEach(key => {\n          const oldValue = oldTreeData[key];\n          const lazyNodeChildren = normalizedLazyNode_[key].children;\n          if (rootLazyRowKeys.includes(key)) {\n            if (newTreeData[key].children.length !== 0) {\n              throw new Error(\"[ElTable]children must be an empty array.\");\n            }\n            newTreeData[key].children = lazyNodeChildren;\n          } else {\n            const {\n              loaded = false,\n              loading = false\n            } = oldValue || {};\n            newTreeData[key] = {\n              lazy: true,\n              loaded: !!loaded,\n              loading: !!loading,\n              expanded: getExpanded(oldValue, key),\n              children: lazyNodeChildren,\n              level: \"\"\n            };\n          }\n        });\n      }\n    }\n    treeData.value = newTreeData;\n    (_a2 = instance.store) == null ? void 0 : _a2.updateTableScrollY();\n  };\n  vue.watch(() => expandRowKeys.value, () => {\n    updateTreeData(true);\n  });\n  vue.watch(() => normalizedData.value, () => {\n    updateTreeData();\n  });\n  vue.watch(() => normalizedLazyNode.value, () => {\n    updateTreeData();\n  });\n  const updateTreeExpandKeys = value => {\n    expandRowKeys.value = value;\n    updateTreeData();\n  };\n  const toggleTreeExpansion = (row, expanded) => {\n    instance.store.assertRowKey();\n    const rowKey = watcherData.rowKey.value;\n    const id = util.getRowIdentity(row, rowKey);\n    const data = id && treeData.value[id];\n    if (id && data && \"expanded\" in data) {\n      const oldExpanded = data.expanded;\n      expanded = typeof expanded === \"undefined\" ? !data.expanded : expanded;\n      treeData.value[id].expanded = expanded;\n      if (oldExpanded !== expanded) {\n        instance.emit(\"expand-change\", row, expanded);\n      }\n      instance.store.updateTableScrollY();\n    }\n  };\n  const loadOrToggle = row => {\n    instance.store.assertRowKey();\n    const rowKey = watcherData.rowKey.value;\n    const id = util.getRowIdentity(row, rowKey);\n    const data = treeData.value[id];\n    if (lazy.value && data && \"loaded\" in data && !data.loaded) {\n      loadData(row, id, data);\n    } else {\n      toggleTreeExpansion(row, void 0);\n    }\n  };\n  const loadData = (row, key, treeNode) => {\n    const {\n      load\n    } = instance.props;\n    if (load && !treeData.value[key].loaded) {\n      treeData.value[key].loading = true;\n      load(row, treeNode, data => {\n        if (!Array.isArray(data)) {\n          throw new TypeError(\"[ElTable] data must be an array\");\n        }\n        treeData.value[key].loading = false;\n        treeData.value[key].loaded = true;\n        treeData.value[key].expanded = true;\n        if (data.length) {\n          lazyTreeNodeMap.value[key] = data;\n        }\n        instance.emit(\"expand-change\", row, true);\n      });\n    }\n  };\n  return {\n    loadData,\n    loadOrToggle,\n    toggleTreeExpansion,\n    updateTreeExpandKeys,\n    updateTreeData,\n    normalize,\n    states: {\n      expandRowKeys,\n      treeData,\n      indent,\n      lazy,\n      lazyTreeNodeMap,\n      lazyColumnIdentifier,\n      childrenColumnName\n    }\n  };\n}\nexports[\"default\"] = useTree;","map":{"version":3,"names":["useTree","watcherData","expandRowKeys","vue","ref","treeData","indent","lazy","lazyTreeNodeMap","lazyColumnIdentifier","childrenColumnName","instance","getCurrentInstance","normalizedData","computed","rowKey","value","data","normalize","normalizedLazyNode","keys","Object","res","length","forEach","key","item","children","row","currentRowKey","util","getRowIdentity","push","walkTreeNode","parent","level","parentId","Array","isArray","map","updateTreeData","ifChangeExpandRowKeys","ifExpandAll","_a","store","states","defaultExpandAll","_a2","nested","normalizedLazyNode_","newTreeData","oldTreeData","unref","rootLazyRowKeys","getExpanded","oldValue","includes","expanded","included","newValue","loaded","loading","lazyKeys","lazyNodeChildren","Error","updateTableScrollY","watch","updateTreeExpandKeys","toggleTreeExpansion","assertRowKey","id","oldExpanded","emit","loadOrToggle","loadData","treeNode","load","props","TypeError"],"sources":["../../../../../../../packages/components/table/src/store/tree.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, getCurrentInstance, ref, unref, watch } from 'vue'\nimport { getRowIdentity, walkTreeNode } from '../util'\n\nimport type { WatcherPropsData } from '.'\nimport type { Table, TableProps } from '../table/defaults'\n\nfunction useTree<T>(watcherData: WatcherPropsData<T>) {\n  const expandRowKeys = ref<string[]>([])\n  const treeData = ref<unknown>({})\n  const indent = ref(16)\n  const lazy = ref(false)\n  const lazyTreeNodeMap = ref({})\n  const lazyColumnIdentifier = ref('hasChildren')\n  const childrenColumnName = ref('children')\n  const instance = getCurrentInstance() as Table<T>\n  const normalizedData = computed(() => {\n    if (!watcherData.rowKey.value) return {}\n    const data = watcherData.data.value || []\n    return normalize(data)\n  })\n  const normalizedLazyNode = computed(() => {\n    const rowKey = watcherData.rowKey.value\n    const keys = Object.keys(lazyTreeNodeMap.value)\n    const res = {}\n    if (!keys.length) return res\n    keys.forEach((key) => {\n      if (lazyTreeNodeMap.value[key].length) {\n        const item = { children: [] }\n        lazyTreeNodeMap.value[key].forEach((row) => {\n          const currentRowKey = getRowIdentity(row, rowKey)\n          item.children.push(currentRowKey)\n          if (row[lazyColumnIdentifier.value] && !res[currentRowKey]) {\n            res[currentRowKey] = { children: [] }\n          }\n        })\n        res[key] = item\n      }\n    })\n    return res\n  })\n\n  const normalize = (data) => {\n    const rowKey = watcherData.rowKey.value\n    const res = {}\n    walkTreeNode(\n      data,\n      (parent, children, level) => {\n        const parentId = getRowIdentity(parent, rowKey)\n        if (Array.isArray(children)) {\n          res[parentId] = {\n            children: children.map((row) => getRowIdentity(row, rowKey)),\n            level,\n          }\n        } else if (lazy.value) {\n          // 当 children 不存在且 lazy 为 true，该节点即为懒加载的节点\n          res[parentId] = {\n            children: [],\n            lazy: true,\n            level,\n          }\n        }\n      },\n      childrenColumnName.value,\n      lazyColumnIdentifier.value\n    )\n    return res\n  }\n\n  const updateTreeData = (\n    ifChangeExpandRowKeys = false,\n    ifExpandAll = instance.store?.states.defaultExpandAll.value\n  ) => {\n    const nested = normalizedData.value\n    const normalizedLazyNode_ = normalizedLazyNode.value\n    const keys = Object.keys(nested)\n    const newTreeData = {}\n    if (keys.length) {\n      const oldTreeData = unref(treeData)\n      const rootLazyRowKeys = []\n      const getExpanded = (oldValue, key) => {\n        if (ifChangeExpandRowKeys) {\n          if (expandRowKeys.value) {\n            return ifExpandAll || expandRowKeys.value.includes(key)\n          } else {\n            return !!(ifExpandAll || oldValue?.expanded)\n          }\n        } else {\n          const included =\n            ifExpandAll ||\n            (expandRowKeys.value && expandRowKeys.value.includes(key))\n          return !!(oldValue?.expanded || included)\n        }\n      }\n      // 合并 expanded 与 display，确保数据刷新后，状态不变\n      keys.forEach((key) => {\n        const oldValue = oldTreeData[key]\n        const newValue = { ...nested[key] }\n        newValue.expanded = getExpanded(oldValue, key)\n        if (newValue.lazy) {\n          const { loaded = false, loading = false } = oldValue || {}\n          newValue.loaded = !!loaded\n          newValue.loading = !!loading\n          rootLazyRowKeys.push(key)\n        }\n        newTreeData[key] = newValue\n      })\n      // 根据懒加载数据更新 treeData\n      const lazyKeys = Object.keys(normalizedLazyNode_)\n      if (lazy.value && lazyKeys.length && rootLazyRowKeys.length) {\n        lazyKeys.forEach((key) => {\n          const oldValue = oldTreeData[key]\n          const lazyNodeChildren = normalizedLazyNode_[key].children\n          if (rootLazyRowKeys.includes(key)) {\n            // 懒加载的 root 节点，更新一下原有的数据，原来的 children 一定是空数组\n            if (newTreeData[key].children.length !== 0) {\n              throw new Error('[ElTable]children must be an empty array.')\n            }\n            newTreeData[key].children = lazyNodeChildren\n          } else {\n            const { loaded = false, loading = false } = oldValue || {}\n            newTreeData[key] = {\n              lazy: true,\n              loaded: !!loaded,\n              loading: !!loading,\n              expanded: getExpanded(oldValue, key),\n              children: lazyNodeChildren,\n              level: '',\n            }\n          }\n        })\n      }\n    }\n    treeData.value = newTreeData\n    instance.store?.updateTableScrollY()\n  }\n\n  watch(\n    () => expandRowKeys.value,\n    () => {\n      updateTreeData(true)\n    }\n  )\n\n  watch(\n    () => normalizedData.value,\n    () => {\n      updateTreeData()\n    }\n  )\n  watch(\n    () => normalizedLazyNode.value,\n    () => {\n      updateTreeData()\n    }\n  )\n\n  const updateTreeExpandKeys = (value: string[]) => {\n    expandRowKeys.value = value\n    updateTreeData()\n  }\n\n  const toggleTreeExpansion = (row: T, expanded?: boolean) => {\n    instance.store.assertRowKey()\n\n    const rowKey = watcherData.rowKey.value\n    const id = getRowIdentity(row, rowKey)\n    const data = id && treeData.value[id]\n    if (id && data && 'expanded' in data) {\n      const oldExpanded = data.expanded\n      expanded = typeof expanded === 'undefined' ? !data.expanded : expanded\n      treeData.value[id].expanded = expanded\n      if (oldExpanded !== expanded) {\n        instance.emit('expand-change', row, expanded)\n      }\n      instance.store.updateTableScrollY()\n    }\n  }\n\n  const loadOrToggle = (row) => {\n    instance.store.assertRowKey()\n    const rowKey = watcherData.rowKey.value\n    const id = getRowIdentity(row, rowKey)\n    const data = treeData.value[id]\n    if (lazy.value && data && 'loaded' in data && !data.loaded) {\n      loadData(row, id, data)\n    } else {\n      toggleTreeExpansion(row, undefined)\n    }\n  }\n\n  const loadData = (row: T, key: string, treeNode) => {\n    const { load } = instance.props as unknown as TableProps<T>\n    if (load && !treeData.value[key].loaded) {\n      treeData.value[key].loading = true\n      load(row, treeNode, (data) => {\n        if (!Array.isArray(data)) {\n          throw new TypeError('[ElTable] data must be an array')\n        }\n        treeData.value[key].loading = false\n        treeData.value[key].loaded = true\n        treeData.value[key].expanded = true\n        if (data.length) {\n          lazyTreeNodeMap.value[key] = data\n        }\n        instance.emit('expand-change', row, true)\n      })\n    }\n  }\n\n  return {\n    loadData,\n    loadOrToggle,\n    toggleTreeExpansion,\n    updateTreeExpandKeys,\n    updateTreeData,\n    normalize,\n    states: {\n      expandRowKeys,\n      treeData,\n      indent,\n      lazy,\n      lazyTreeNodeMap,\n      lazyColumnIdentifier,\n      childrenColumnName,\n    },\n  }\n}\n\nexport default useTree\n"],"mappings":";;;;;;;;AAEA,SAASA,OAAOA,CAACC,WAAW,EAAE;EAC5B,MAAMC,aAAa,GAAGC,GAAA,CAAAC,GAAG,CAAC,EAAE,CAAC;EAC7B,MAAMC,QAAQ,GAAGF,GAAA,CAAAC,GAAG,CAAC,EAAE,CAAC;EACxB,MAAME,MAAM,GAAGH,GAAA,CAAAC,GAAG,CAAC,EAAE,CAAC;EACtB,MAAMG,IAAI,GAAGJ,GAAA,CAAAC,GAAG,CAAC,KAAK,CAAC;EACvB,MAAMI,eAAe,GAAGL,GAAA,CAAAC,GAAG,CAAC,EAAE,CAAC;EAC/B,MAAMK,oBAAoB,GAAGN,GAAA,CAAAC,GAAG,CAAC,aAAa,CAAC;EAC/C,MAAMM,kBAAkB,GAAGP,GAAA,CAAAC,GAAG,CAAC,UAAU,CAAC;EAC1C,MAAMO,QAAQ,GAAGR,GAAA,CAAAS,kBAAkB,EAAE;EACrC,MAAMC,cAAc,GAAGV,GAAA,CAAAW,QAAQ,CAAC,MAAM;IACpC,IAAI,CAACb,WAAW,CAACc,MAAM,CAACC,KAAK,EAC3B,OAAO,EAAE;IACX,MAAMC,IAAI,GAAGhB,WAAW,CAACgB,IAAI,CAACD,KAAK,IAAI,EAAE;IACzC,OAAOE,SAAS,CAACD,IAAI,CAAC;EAC1B,CAAG,CAAC;EACF,MAAME,kBAAkB,GAAGhB,GAAA,CAAAW,QAAQ,CAAC,MAAM;IACxC,MAAMC,MAAM,GAAGd,WAAW,CAACc,MAAM,CAACC,KAAK;IACvC,MAAMI,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACZ,eAAe,CAACQ,KAAK,CAAC;IAC/C,MAAMM,GAAG,GAAG,EAAE;IACd,IAAI,CAACF,IAAI,CAACG,MAAM,EACd,OAAOD,GAAG;IACZF,IAAI,CAACI,OAAO,CAAEC,GAAG,IAAK;MACpB,IAAIjB,eAAe,CAACQ,KAAK,CAACS,GAAG,CAAC,CAACF,MAAM,EAAE;QACrC,MAAMG,IAAI,GAAG;UAAEC,QAAQ,EAAE;QAAE,CAAE;QAC7BnB,eAAe,CAACQ,KAAK,CAACS,GAAG,CAAC,CAACD,OAAO,CAAEI,GAAG,IAAK;UAC1C,MAAMC,aAAa,GAAGC,IAAA,CAAAC,cAAc,CAACH,GAAG,EAAEb,MAAM,CAAC;UACjDW,IAAI,CAACC,QAAQ,CAACK,IAAI,CAACH,aAAa,CAAC;UACjC,IAAID,GAAG,CAACnB,oBAAoB,CAACO,KAAK,CAAC,IAAI,CAACM,GAAG,CAACO,aAAa,CAAC,EAAE;YAC1DP,GAAG,CAACO,aAAa,CAAC,GAAG;cAAEF,QAAQ,EAAE;YAAE,CAAE;UACjD;QACA,CAAS,CAAC;QACFL,GAAG,CAACG,GAAG,CAAC,GAAGC,IAAI;MACvB;IACA,CAAK,CAAC;IACF,OAAOJ,GAAG;EACd,CAAG,CAAC;EACF,MAAMJ,SAAS,GAAID,IAAI,IAAK;IAC1B,MAAMF,MAAM,GAAGd,WAAW,CAACc,MAAM,CAACC,KAAK;IACvC,MAAMM,GAAG,GAAG,EAAE;IACdQ,IAAA,CAAAG,YAAY,CAAChB,IAAI,EAAE,CAACiB,MAAM,EAAEP,QAAQ,EAAEQ,KAAK,KAAK;MAC9C,MAAMC,QAAQ,GAAGN,IAAA,CAAAC,cAAc,CAACG,MAAM,EAAEnB,MAAM,CAAC;MAC/C,IAAIsB,KAAK,CAACC,OAAO,CAACX,QAAQ,CAAC,EAAE;QAC3BL,GAAG,CAACc,QAAQ,CAAC,GAAG;UACdT,QAAQ,EAAEA,QAAQ,CAACY,GAAG,CAAEX,GAAG,IAAKE,IAAA,CAAAC,cAAc,CAACH,GAAG,EAAEb,MAAM,CAAC,CAAC;UAC5DoB;QACV,CAAS;MACT,CAAO,MAAM,IAAI5B,IAAI,CAACS,KAAK,EAAE;QACrBM,GAAG,CAACc,QAAQ,CAAC,GAAG;UACdT,QAAQ,EAAE,EAAE;UACZpB,IAAI,EAAE,IAAI;UACV4B;QACV,CAAS;MACT;IACA,CAAK,EAAEzB,kBAAkB,CAACM,KAAK,EAAEP,oBAAoB,CAACO,KAAK,CAAC;IACxD,OAAOM,GAAG;EACd,CAAG;EACD,MAAMkB,cAAc,GAAGA,CAACC,qBAAqB,GAAG,KAAK,EAAEC,WAAW,GAAG,CAAEC,EAAE,IAAK,CAACA,EAAE,GAAGhC,QAAQ,CAACiC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,EAAE,CAACE,MAAM,CAACC,gBAAgB,CAAC9B,KAAK,GAAG,KAAK;IAC7J,IAAI+B,GAAG;IACP,MAAMC,MAAM,GAAGnC,cAAc,CAACG,KAAK;IACnC,MAAMiC,mBAAmB,GAAG9B,kBAAkB,CAACH,KAAK;IACpD,MAAMI,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC4B,MAAM,CAAC;IAChC,MAAME,WAAW,GAAG,EAAE;IACtB,IAAI9B,IAAI,CAACG,MAAM,EAAE;MACf,MAAM4B,WAAW,GAAGhD,GAAA,CAAAiD,KAAK,CAAC/C,QAAQ,CAAC;MACnC,MAAMgD,eAAe,GAAG,EAAE;MAC1B,MAAMC,WAAW,GAAGA,CAACC,QAAQ,EAAE9B,GAAG,KAAK;QACrC,IAAIgB,qBAAqB,EAAE;UACzB,IAAIvC,aAAa,CAACc,KAAK,EAAE;YACvB,OAAO0B,WAAW,IAAIxC,aAAa,CAACc,KAAK,CAACwC,QAAQ,CAAC/B,GAAG,CAAC;UACnE,CAAW,MAAM;YACL,OAAO,CAAC,EAAEiB,WAAW,KAAKa,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACE,QAAQ,CAAC,CAAC;UACrF;QACA,CAAS,MAAM;UACL,MAAMC,QAAQ,GAAGhB,WAAW,IAAIxC,aAAa,CAACc,KAAK,IAAId,aAAa,CAACc,KAAK,CAACwC,QAAQ,CAAC/B,GAAG,CAAC;UACxF,OAAO,CAAC,EAAE,CAAC8B,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACE,QAAQ,KAAKC,QAAQ,CAAC;QAChF;MACA,CAAO;MACDtC,IAAI,CAACI,OAAO,CAAEC,GAAG,IAAK;QACpB,MAAM8B,QAAQ,GAAGJ,WAAW,CAAC1B,GAAG,CAAC;QACjC,MAAMkC,QAAQ,GAAG;UAAE,GAAGX,MAAM,CAACvB,GAAG;QAAC,CAAE;QACnCkC,QAAQ,CAACF,QAAQ,GAAGH,WAAW,CAACC,QAAQ,EAAE9B,GAAG,CAAC;QAC9C,IAAIkC,QAAQ,CAACpD,IAAI,EAAE;UACjB,MAAM;YAAEqD,MAAM,GAAG,KAAK;YAAEC,OAAO,GAAG;UAAK,CAAE,GAAGN,QAAQ,IAAI,EAAE;UAC1DI,QAAQ,CAACC,MAAM,GAAG,CAAC,CAACA,MAAM;UAC1BD,QAAQ,CAACE,OAAO,GAAG,CAAC,CAACA,OAAO;UAC5BR,eAAe,CAACrB,IAAI,CAACP,GAAG,CAAC;QACnC;QACQyB,WAAW,CAACzB,GAAG,CAAC,GAAGkC,QAAQ;MACnC,CAAO,CAAC;MACF,MAAMG,QAAQ,GAAGzC,MAAM,CAACD,IAAI,CAAC6B,mBAAmB,CAAC;MACjD,IAAI1C,IAAI,CAACS,KAAK,IAAI8C,QAAQ,CAACvC,MAAM,IAAI8B,eAAe,CAAC9B,MAAM,EAAE;QAC3DuC,QAAQ,CAACtC,OAAO,CAAEC,GAAG,IAAK;UACxB,MAAM8B,QAAQ,GAAGJ,WAAW,CAAC1B,GAAG,CAAC;UACjC,MAAMsC,gBAAgB,GAAGd,mBAAmB,CAACxB,GAAG,CAAC,CAACE,QAAQ;UAC1D,IAAI0B,eAAe,CAACG,QAAQ,CAAC/B,GAAG,CAAC,EAAE;YACjC,IAAIyB,WAAW,CAACzB,GAAG,CAAC,CAACE,QAAQ,CAACJ,MAAM,KAAK,CAAC,EAAE;cAC1C,MAAM,IAAIyC,KAAK,CAAC,2CAA2C,CAAC;YAC1E;YACYd,WAAW,CAACzB,GAAG,CAAC,CAACE,QAAQ,GAAGoC,gBAAgB;UACxD,CAAW,MAAM;YACL,MAAM;cAAEH,MAAM,GAAG,KAAK;cAAEC,OAAO,GAAG;YAAK,CAAE,GAAGN,QAAQ,IAAI,EAAE;YAC1DL,WAAW,CAACzB,GAAG,CAAC,GAAG;cACjBlB,IAAI,EAAE,IAAI;cACVqD,MAAM,EAAE,CAAC,CAACA,MAAM;cAChBC,OAAO,EAAE,CAAC,CAACA,OAAO;cAClBJ,QAAQ,EAAEH,WAAW,CAACC,QAAQ,EAAE9B,GAAG,CAAC;cACpCE,QAAQ,EAAEoC,gBAAgB;cAC1B5B,KAAK,EAAE;YACrB,CAAa;UACb;QACA,CAAS,CAAC;MACV;IACA;IACI9B,QAAQ,CAACW,KAAK,GAAGkC,WAAW;IAC5B,CAACH,GAAG,GAAGpC,QAAQ,CAACiC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGG,GAAG,CAACkB,kBAAkB,EAAE;EACtE,CAAG;EACD9D,GAAA,CAAA+D,KAAK,CAAC,MAAMhE,aAAa,CAACc,KAAK,EAAE,MAAM;IACrCwB,cAAc,CAAC,IAAI,CAAC;EACxB,CAAG,CAAC;EACFrC,GAAA,CAAA+D,KAAK,CAAC,MAAMrD,cAAc,CAACG,KAAK,EAAE,MAAM;IACtCwB,cAAc,EAAE;EACpB,CAAG,CAAC;EACFrC,GAAA,CAAA+D,KAAK,CAAC,MAAM/C,kBAAkB,CAACH,KAAK,EAAE,MAAM;IAC1CwB,cAAc,EAAE;EACpB,CAAG,CAAC;EACF,MAAM2B,oBAAoB,GAAInD,KAAK,IAAK;IACtCd,aAAa,CAACc,KAAK,GAAGA,KAAK;IAC3BwB,cAAc,EAAE;EACpB,CAAG;EACD,MAAM4B,mBAAmB,GAAGA,CAACxC,GAAG,EAAE6B,QAAQ,KAAK;IAC7C9C,QAAQ,CAACiC,KAAK,CAACyB,YAAY,EAAE;IAC7B,MAAMtD,MAAM,GAAGd,WAAW,CAACc,MAAM,CAACC,KAAK;IACvC,MAAMsD,EAAE,GAAGxC,IAAA,CAAAC,cAAc,CAACH,GAAG,EAAEb,MAAM,CAAC;IACtC,MAAME,IAAI,GAAGqD,EAAE,IAAIjE,QAAQ,CAACW,KAAK,CAACsD,EAAE,CAAC;IACrC,IAAIA,EAAE,IAAIrD,IAAI,IAAI,UAAU,IAAIA,IAAI,EAAE;MACpC,MAAMsD,WAAW,GAAGtD,IAAI,CAACwC,QAAQ;MACjCA,QAAQ,GAAG,OAAOA,QAAQ,KAAK,WAAW,GAAG,CAACxC,IAAI,CAACwC,QAAQ,GAAGA,QAAQ;MACtEpD,QAAQ,CAACW,KAAK,CAACsD,EAAE,CAAC,CAACb,QAAQ,GAAGA,QAAQ;MACtC,IAAIc,WAAW,KAAKd,QAAQ,EAAE;QAC5B9C,QAAQ,CAAC6D,IAAI,CAAC,eAAe,EAAE5C,GAAG,EAAE6B,QAAQ,CAAC;MACrD;MACM9C,QAAQ,CAACiC,KAAK,CAACqB,kBAAkB,EAAE;IACzC;EACA,CAAG;EACD,MAAMQ,YAAY,GAAI7C,GAAG,IAAK;IAC5BjB,QAAQ,CAACiC,KAAK,CAACyB,YAAY,EAAE;IAC7B,MAAMtD,MAAM,GAAGd,WAAW,CAACc,MAAM,CAACC,KAAK;IACvC,MAAMsD,EAAE,GAAGxC,IAAA,CAAAC,cAAc,CAACH,GAAG,EAAEb,MAAM,CAAC;IACtC,MAAME,IAAI,GAAGZ,QAAQ,CAACW,KAAK,CAACsD,EAAE,CAAC;IAC/B,IAAI/D,IAAI,CAACS,KAAK,IAAIC,IAAI,IAAI,QAAQ,IAAIA,IAAI,IAAI,CAACA,IAAI,CAAC2C,MAAM,EAAE;MAC1Dc,QAAQ,CAAC9C,GAAG,EAAE0C,EAAE,EAAErD,IAAI,CAAC;IAC7B,CAAK,MAAM;MACLmD,mBAAmB,CAACxC,GAAG,EAAE,KAAK,CAAC,CAAC;IACtC;EACA,CAAG;EACD,MAAM8C,QAAQ,GAAGA,CAAC9C,GAAG,EAAEH,GAAG,EAAEkD,QAAQ,KAAK;IACvC,MAAM;MAAEC;IAAI,CAAE,GAAGjE,QAAQ,CAACkE,KAAK;IAC/B,IAAID,IAAI,IAAI,CAACvE,QAAQ,CAACW,KAAK,CAACS,GAAG,CAAC,CAACmC,MAAM,EAAE;MACvCvD,QAAQ,CAACW,KAAK,CAACS,GAAG,CAAC,CAACoC,OAAO,GAAG,IAAI;MAClCe,IAAI,CAAChD,GAAG,EAAE+C,QAAQ,EAAG1D,IAAI,IAAK;QAC5B,IAAI,CAACoB,KAAK,CAACC,OAAO,CAACrB,IAAI,CAAC,EAAE;UACxB,MAAM,IAAI6D,SAAS,CAAC,iCAAiC,CAAC;QAChE;QACQzE,QAAQ,CAACW,KAAK,CAACS,GAAG,CAAC,CAACoC,OAAO,GAAG,KAAK;QACnCxD,QAAQ,CAACW,KAAK,CAACS,GAAG,CAAC,CAACmC,MAAM,GAAG,IAAI;QACjCvD,QAAQ,CAACW,KAAK,CAACS,GAAG,CAAC,CAACgC,QAAQ,GAAG,IAAI;QACnC,IAAIxC,IAAI,CAACM,MAAM,EAAE;UACff,eAAe,CAACQ,KAAK,CAACS,GAAG,CAAC,GAAGR,IAAI;QAC3C;QACQN,QAAQ,CAAC6D,IAAI,CAAC,eAAe,EAAE5C,GAAG,EAAE,IAAI,CAAC;MACjD,CAAO,CAAC;IACR;EACA,CAAG;EACD,OAAO;IACL8C,QAAQ;IACRD,YAAY;IACZL,mBAAmB;IACnBD,oBAAoB;IACpB3B,cAAc;IACdtB,SAAS;IACT2B,MAAM,EAAE;MACN3C,aAAa;MACbG,QAAQ;MACRC,MAAM;MACNC,IAAI;MACJC,eAAe;MACfC,oBAAoB;MACpBC;IACN;EACA,CAAG;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}