{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar core = require('@vueuse/core');\nvar lodashUnified = require('lodash-unified');\nvar dom = require('@floating-ui/dom');\nrequire('../../utils/index.js');\nvar runtime = require('../../utils/vue/props/runtime.js');\nvar objects = require('../../utils/objects.js');\nconst useFloatingProps = runtime.buildProps({});\nconst unrefReference = elRef => {\n  if (!core.isClient) return;\n  if (!elRef) return elRef;\n  const unrefEl = core.unrefElement(elRef);\n  if (unrefEl) return unrefEl;\n  return vue.isRef(elRef) ? unrefEl : elRef;\n};\nconst getPositionDataWithUnit = (record, key) => {\n  const value = record == null ? void 0 : record[key];\n  return lodashUnified.isNil(value) ? \"\" : `${value}px`;\n};\nconst useFloating = ({\n  middleware,\n  placement,\n  strategy\n}) => {\n  const referenceRef = vue.ref();\n  const contentRef = vue.ref();\n  const x = vue.ref();\n  const y = vue.ref();\n  const middlewareData = vue.ref({});\n  const states = {\n    x,\n    y,\n    placement,\n    strategy,\n    middlewareData\n  };\n  const update = async () => {\n    if (!core.isClient) return;\n    const referenceEl = unrefReference(referenceRef);\n    const contentEl = core.unrefElement(contentRef);\n    if (!referenceEl || !contentEl) return;\n    const data = await dom.computePosition(referenceEl, contentEl, {\n      placement: vue.unref(placement),\n      strategy: vue.unref(strategy),\n      middleware: vue.unref(middleware)\n    });\n    objects.keysOf(states).forEach(key => {\n      states[key].value = data[key];\n    });\n  };\n  vue.onMounted(() => {\n    vue.watchEffect(() => {\n      update();\n    });\n  });\n  return {\n    ...states,\n    update,\n    referenceRef,\n    contentRef\n  };\n};\nconst arrowMiddleware = ({\n  arrowRef,\n  padding\n}) => {\n  return {\n    name: \"arrow\",\n    options: {\n      element: arrowRef,\n      padding\n    },\n    fn(args) {\n      const arrowEl = vue.unref(arrowRef);\n      if (!arrowEl) return {};\n      return dom.arrow({\n        element: arrowEl,\n        padding\n      }).fn(args);\n    }\n  };\n};\nexports.arrowMiddleware = arrowMiddleware;\nexports.getPositionDataWithUnit = getPositionDataWithUnit;\nexports.useFloating = useFloating;\nexports.useFloatingProps = useFloatingProps;","map":{"version":3,"names":["useFloatingProps","runtime","buildProps","unrefReference","elRef","core","isClient","unrefEl","unrefElement","vue","isRef","getPositionDataWithUnit","record","key","value","lodashUnified","isNil","useFloating","middleware","placement","strategy","referenceRef","ref","contentRef","x","y","middlewareData","states","update","referenceEl","contentEl","data","dom","computePosition","unref","objects","keysOf","forEach","onMounted","watchEffect","arrowMiddleware","arrowRef","padding","name","options","element","fn","args","arrowEl","arrow"],"sources":["../../../../../packages/hooks/use-floating/index.ts"],"sourcesContent":["import { isRef, onMounted, ref, unref, watchEffect } from 'vue'\nimport { unrefElement } from '@vueuse/core'\nimport { isNil } from 'lodash-unified'\nimport { arrow as arrowCore, computePosition } from '@floating-ui/dom'\nimport { buildProps, isClient, keysOf } from '@element-plus/utils'\n\nimport type { Ref, ToRefs } from 'vue'\nimport type {\n  ComputePositionReturn,\n  Middleware,\n  Placement,\n  SideObject,\n  Strategy,\n  VirtualElement,\n} from '@floating-ui/dom'\n\nexport const useFloatingProps = buildProps({} as const)\n\nexport type UseFloatingProps = ToRefs<{\n  middleware: Array<Middleware>\n  placement: Placement\n  strategy: Strategy\n}>\n\ntype ElementRef = Parameters<typeof unrefElement>['0']\n\nconst unrefReference = (\n  elRef: ElementRef | Ref<VirtualElement | undefined>\n) => {\n  if (!isClient) return\n  if (!elRef) return elRef\n  const unrefEl = unrefElement(elRef as ElementRef)\n  if (unrefEl) return unrefEl\n  return isRef(elRef) ? unrefEl : (elRef as VirtualElement)\n}\n\nexport const getPositionDataWithUnit = <T extends Record<string, number>>(\n  record: T | undefined,\n  key: keyof T\n) => {\n  const value = record?.[key]\n  return isNil(value) ? '' : `${value}px`\n}\n\nexport const useFloating = ({\n  middleware,\n  placement,\n  strategy,\n}: UseFloatingProps) => {\n  const referenceRef = ref<HTMLElement | VirtualElement>()\n  const contentRef = ref<HTMLElement>()\n  const x = ref<number>()\n  const y = ref<number>()\n  const middlewareData = ref<ComputePositionReturn['middlewareData']>({})\n\n  const states = {\n    x,\n    y,\n    placement,\n    strategy,\n    middlewareData,\n  } as const\n\n  const update = async () => {\n    if (!isClient) return\n\n    const referenceEl = unrefReference(referenceRef)\n    const contentEl = unrefElement(contentRef)\n    if (!referenceEl || !contentEl) return\n\n    const data = await computePosition(referenceEl, contentEl, {\n      placement: unref(placement),\n      strategy: unref(strategy),\n      middleware: unref(middleware),\n    })\n\n    keysOf(states).forEach((key) => {\n      states[key].value = data[key]\n    })\n  }\n\n  onMounted(() => {\n    watchEffect(() => {\n      update()\n    })\n  })\n\n  return {\n    ...states,\n    update,\n    referenceRef,\n    contentRef,\n  }\n}\n\nexport type ArrowMiddlewareProps = {\n  arrowRef: Ref<HTMLElement | null | undefined>\n  padding?: number | SideObject\n}\n\nexport const arrowMiddleware = ({\n  arrowRef,\n  padding,\n}: ArrowMiddlewareProps): Middleware => {\n  return {\n    name: 'arrow',\n    options: {\n      element: arrowRef,\n      padding,\n    },\n\n    fn(args) {\n      const arrowEl = unref(arrowRef)\n      if (!arrowEl) return {}\n\n      return arrowCore({\n        element: arrowEl,\n        padding,\n      }).fn(args)\n    },\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}