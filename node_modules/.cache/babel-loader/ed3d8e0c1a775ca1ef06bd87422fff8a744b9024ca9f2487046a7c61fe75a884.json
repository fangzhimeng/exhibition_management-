{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar shared = require('@vue/shared');\nrequire('../../utils/index.js');\nvar core = require('@vueuse/core');\nvar globalNode = require('../../utils/vue/global-node.js');\nconst useTeleport = (contentRenderer, appendToBody) => {\n  const isTeleportVisible = vue.ref(false);\n  if (!core.isClient) {\n    return {\n      isTeleportVisible,\n      showTeleport: shared.NOOP,\n      hideTeleport: shared.NOOP,\n      renderTeleport: shared.NOOP\n    };\n  }\n  let $el = null;\n  const showTeleport = () => {\n    isTeleportVisible.value = true;\n    if ($el !== null) return;\n    $el = globalNode.createGlobalNode();\n  };\n  const hideTeleport = () => {\n    isTeleportVisible.value = false;\n    if ($el !== null) {\n      globalNode.removeGlobalNode($el);\n      $el = null;\n    }\n  };\n  const renderTeleport = () => {\n    return appendToBody.value !== true ? contentRenderer() : isTeleportVisible.value ? [vue.h(vue.Teleport, {\n      to: $el\n    }, contentRenderer())] : void 0;\n  };\n  vue.onUnmounted(hideTeleport);\n  return {\n    isTeleportVisible,\n    showTeleport,\n    hideTeleport,\n    renderTeleport\n  };\n};\nexports.useTeleport = useTeleport;","map":{"version":3,"names":["useTeleport","contentRenderer","appendToBody","isTeleportVisible","vue","ref","core","isClient","showTeleport","shared","NOOP","hideTeleport","renderTeleport","$el","value","globalNode","createGlobalNode","removeGlobalNode","h","Teleport","to","onUnmounted"],"sources":["../../../../../packages/hooks/use-teleport/index.ts"],"sourcesContent":["import { Teleport, h, onUnmounted, ref } from 'vue'\nimport { NOOP } from '@vue/shared'\nimport {\n  createGlobalNode,\n  isClient,\n  removeGlobalNode,\n} from '@element-plus/utils'\n\nimport type { Ref, VNode } from 'vue'\n\nexport const useTeleport = (\n  contentRenderer: () => VNode,\n  appendToBody: Ref<boolean>\n) => {\n  const isTeleportVisible = ref(false)\n\n  if (!isClient) {\n    return {\n      isTeleportVisible,\n      showTeleport: NOOP,\n      hideTeleport: NOOP,\n      renderTeleport: NOOP,\n    }\n  }\n\n  let $el: HTMLElement | null = null\n\n  const showTeleport = () => {\n    isTeleportVisible.value = true\n    // this allows the delayed showing strategy since the the content itself could be enterable\n    // e.g. el-popper\n    if ($el !== null) return\n\n    $el = createGlobalNode()\n  }\n\n  const hideTeleport = () => {\n    isTeleportVisible.value = false\n    if ($el !== null) {\n      removeGlobalNode($el)\n      $el = null\n    }\n  }\n\n  const renderTeleport = () => {\n    return appendToBody.value !== true\n      ? contentRenderer()\n      : isTeleportVisible.value\n      ? [h(Teleport, { to: $el }, contentRenderer())]\n      : undefined\n  }\n\n  onUnmounted(hideTeleport)\n\n  return {\n    isTeleportVisible,\n    showTeleport,\n    hideTeleport,\n    renderTeleport,\n  }\n}\n"],"mappings":";;;;;;;;;;AAOY,MAACA,WAAW,GAAGA,CAACC,eAAe,EAAEC,YAAY,KAAK;EAC5D,MAAMC,iBAAiB,GAAGC,GAAA,CAAAC,GAAG,CAAC,KAAK,CAAC;EACpC,IAAI,CAACC,IAAA,CAAAC,QAAQ,EAAE;IACb,OAAO;MACLJ,iBAAiB;MACjBK,YAAY,EAAEC,MAAA,CAAAC,IAAI;MAClBC,YAAY,EAAEF,MAAA,CAAAC,IAAI;MAClBE,cAAc,EAAEH,MAAA,CAAAC;IACtB,CAAK;EACL;EACE,IAAIG,GAAG,GAAG,IAAI;EACd,MAAML,YAAY,GAAGA,CAAA,KAAM;IACzBL,iBAAiB,CAACW,KAAK,GAAG,IAAI;IAC9B,IAAID,GAAG,KAAK,IAAI,EACd;IACFA,GAAG,GAAGE,UAAA,CAAAC,gBAAgB,EAAE;EAC5B,CAAG;EACD,MAAML,YAAY,GAAGA,CAAA,KAAM;IACzBR,iBAAiB,CAACW,KAAK,GAAG,KAAK;IAC/B,IAAID,GAAG,KAAK,IAAI,EAAE;MAChBE,UAAA,CAAAE,gBAAgB,CAACJ,GAAG,CAAC;MACrBA,GAAG,GAAG,IAAI;IAChB;EACA,CAAG;EACD,MAAMD,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAOV,YAAY,CAACY,KAAK,KAAK,IAAI,GAAGb,eAAe,EAAE,GAAGE,iBAAiB,CAACW,KAAK,GAAG,CAACV,GAAA,CAAAc,CAAC,CAACd,GAAA,CAAAe,QAAQ,EAAE;MAAEC,EAAE,EAAEP;IAAG,CAAE,EAAEZ,eAAe,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;EAC7I,CAAG;EACDG,GAAA,CAAAiB,WAAW,CAACV,YAAY,CAAC;EACzB,OAAO;IACLR,iBAAiB;IACjBK,YAAY;IACZG,YAAY;IACZC;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}