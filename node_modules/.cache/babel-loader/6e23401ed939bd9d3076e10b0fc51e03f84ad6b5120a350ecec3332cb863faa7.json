{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../utils/index.js');\nrequire('../../config-provider/index.js');\nvar message$2 = require('./message2.js');\nvar message$1 = require('./message.js');\nvar instance = require('./instance.js');\nvar shared = require('@vue/shared');\nvar types = require('../../../utils/types.js');\nvar error = require('../../../utils/error.js');\nvar core = require('@vueuse/core');\nvar configProvider = require('../../config-provider/src/config-provider.js');\nlet seed = 1;\nconst normalizeOptions = params => {\n  const options = !params || shared.isString(params) || vue.isVNode(params) || shared.isFunction(params) ? {\n    message: params\n  } : params;\n  const normalized = {\n    ...message$1.messageDefaults,\n    ...options\n  };\n  if (!normalized.appendTo) {\n    normalized.appendTo = document.body;\n  } else if (shared.isString(normalized.appendTo)) {\n    let appendTo = document.querySelector(normalized.appendTo);\n    if (!types.isElement(appendTo)) {\n      error.debugWarn(\"ElMessage\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n      appendTo = document.body;\n    }\n    normalized.appendTo = appendTo;\n  }\n  return normalized;\n};\nconst closeMessage = instance$1 => {\n  const idx = instance.instances.indexOf(instance$1);\n  if (idx === -1) return;\n  instance.instances.splice(idx, 1);\n  const {\n    handler\n  } = instance$1;\n  handler.close();\n};\nconst createMessage = ({\n  appendTo,\n  ...options\n}, context) => {\n  const id = `message_${seed++}`;\n  const userOnClose = options.onClose;\n  const container = document.createElement(\"div\");\n  const props = {\n    ...options,\n    id,\n    onClose: () => {\n      userOnClose == null ? void 0 : userOnClose();\n      closeMessage(instance);\n    },\n    onDestroy: () => {\n      vue.render(null, container);\n    }\n  };\n  const vnode = vue.createVNode(message$2[\"default\"], props, shared.isFunction(props.message) || vue.isVNode(props.message) ? {\n    default: shared.isFunction(props.message) ? props.message : () => props.message\n  } : null);\n  vnode.appContext = context || message._context;\n  vue.render(vnode, container);\n  appendTo.appendChild(container.firstElementChild);\n  const vm = vnode.component;\n  const handler = {\n    close: () => {\n      vm.exposed.visible.value = false;\n    }\n  };\n  const instance = {\n    id,\n    vnode,\n    vm,\n    handler,\n    props: vnode.component.props\n  };\n  return instance;\n};\nconst message = (options = {}, context) => {\n  if (!core.isClient) return {\n    close: () => void 0\n  };\n  if (types.isNumber(configProvider.messageConfig.max) && instance.instances.length >= configProvider.messageConfig.max) {\n    return {\n      close: () => void 0\n    };\n  }\n  const normalized = normalizeOptions(options);\n  if (normalized.grouping && instance.instances.length) {\n    const instance2 = instance.instances.find(({\n      vnode: vm\n    }) => {\n      var _a;\n      return ((_a = vm.props) == null ? void 0 : _a.message) === normalized.message;\n    });\n    if (instance2) {\n      instance2.props.repeatNum += 1;\n      instance2.props.type = normalized.type;\n      return instance2.handler;\n    }\n  }\n  const instance$1 = createMessage(normalized, context);\n  instance.instances.push(instance$1);\n  return instance$1.handler;\n};\nmessage$1.messageTypes.forEach(type => {\n  message[type] = (options = {}, appContext) => {\n    const normalized = normalizeOptions(options);\n    return message({\n      ...normalized,\n      type\n    }, appContext);\n  };\n});\nfunction closeAll(type) {\n  for (const instance$1 of instance.instances) {\n    if (!type || type === instance$1.props.type) {\n      instance$1.handler.close();\n    }\n  }\n}\nmessage.closeAll = closeAll;\nmessage._context = null;\nexports.closeAll = closeAll;\nexports[\"default\"] = message;","map":{"version":3,"names":["seed","normalizeOptions","params","options","shared","isString","vue","isVNode","isFunction","message","normalized","message$1","messageDefaults","appendTo","document","body","querySelector","types","isElement","error","debugWarn","closeMessage","instance$1","idx","instance","instances","indexOf","splice","handler","close","createMessage","context","id","userOnClose","onClose","container","createElement","props","onDestroy","render","vnode","createVNode","message$2","default","appContext","_context","appendChild","firstElementChild","vm","component","exposed","visible","value","core","isClient","isNumber","configProvider","messageConfig","max","length","grouping","instance2","find","_a","repeatNum","type","push","messageTypes","forEach","closeAll"],"sources":["../../../../../../packages/components/message/src/method.ts"],"sourcesContent":["import { createVNode, render } from 'vue'\nimport {\n  debugWarn,\n  isClient,\n  isElement,\n  isFunction,\n  isNumber,\n  isString,\n  isVNode,\n} from '@element-plus/utils'\nimport { messageConfig } from '@element-plus/components/config-provider'\nimport MessageConstructor from './message.vue'\nimport { messageDefaults, messageTypes } from './message'\nimport { instances } from './instance'\n\nimport type { MessageContext } from './instance'\nimport type { AppContext } from 'vue'\nimport type {\n  Message,\n  MessageFn,\n  MessageHandler,\n  MessageOptions,\n  MessageParams,\n  MessageParamsNormalized,\n  messageType,\n} from './message'\n\nlet seed = 1\n\n// TODO: Since Notify.ts is basically the same like this file. So we could do some encapsulation against them to reduce code duplication.\n\nconst normalizeOptions = (params?: MessageParams) => {\n  const options: MessageOptions =\n    !params || isString(params) || isVNode(params) || isFunction(params)\n      ? { message: params }\n      : params\n\n  const normalized = {\n    ...messageDefaults,\n    ...options,\n  }\n\n  if (!normalized.appendTo) {\n    normalized.appendTo = document.body\n  } else if (isString(normalized.appendTo)) {\n    let appendTo = document.querySelector<HTMLElement>(normalized.appendTo)\n\n    // should fallback to default value with a warning\n    if (!isElement(appendTo)) {\n      debugWarn(\n        'ElMessage',\n        'the appendTo option is not an HTMLElement. Falling back to document.body.'\n      )\n      appendTo = document.body\n    }\n\n    normalized.appendTo = appendTo\n  }\n\n  return normalized as MessageParamsNormalized\n}\n\nconst closeMessage = (instance: MessageContext) => {\n  const idx = instances.indexOf(instance)\n  if (idx === -1) return\n\n  instances.splice(idx, 1)\n  const { handler } = instance\n  handler.close()\n}\n\nconst createMessage = (\n  { appendTo, ...options }: MessageParamsNormalized,\n  context?: AppContext | null\n): MessageContext => {\n  const id = `message_${seed++}`\n  const userOnClose = options.onClose\n\n  const container = document.createElement('div')\n\n  const props = {\n    ...options,\n    // now the zIndex will be used inside the message.vue component instead of here.\n    // zIndex: nextIndex() + options.zIndex\n    id,\n    onClose: () => {\n      userOnClose?.()\n      closeMessage(instance)\n    },\n\n    // clean message element preventing mem leak\n    onDestroy: () => {\n      // since the element is destroy, then the VNode should be collected by GC as well\n      // we do not want cause any mem leak because we have returned vm as a reference to users\n      // so that we manually set it to false.\n      render(null, container)\n    },\n  }\n  const vnode = createVNode(\n    MessageConstructor,\n    props,\n    isFunction(props.message) || isVNode(props.message)\n      ? {\n          default: isFunction(props.message)\n            ? props.message\n            : () => props.message,\n        }\n      : null\n  )\n  vnode.appContext = context || message._context\n\n  render(vnode, container)\n  // instances will remove this item when close function gets called. So we do not need to worry about it.\n  appendTo.appendChild(container.firstElementChild!)\n\n  const vm = vnode.component!\n\n  const handler: MessageHandler = {\n    // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n    // for out component, so that all closing steps will not be skipped.\n    close: () => {\n      vm.exposed!.visible.value = false\n    },\n  }\n\n  const instance: MessageContext = {\n    id,\n    vnode,\n    vm,\n    handler,\n    props: (vnode.component as any).props,\n  }\n\n  return instance\n}\n\nconst message: MessageFn &\n  Partial<Message> & { _context: AppContext | null } = (\n  options = {},\n  context\n) => {\n  if (!isClient) return { close: () => undefined }\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return { close: () => undefined }\n  }\n\n  const normalized = normalizeOptions(options)\n\n  if (normalized.grouping && instances.length) {\n    const instance = instances.find(\n      ({ vnode: vm }) => vm.props?.message === normalized.message\n    )\n    if (instance) {\n      instance.props.repeatNum += 1\n      instance.props.type = normalized.type\n      return instance.handler\n    }\n  }\n\n  const instance = createMessage(normalized, context)\n\n  instances.push(instance)\n  return instance.handler\n}\n\nmessageTypes.forEach((type) => {\n  message[type] = (options = {}, appContext) => {\n    const normalized = normalizeOptions(options)\n    return message({ ...normalized, type }, appContext)\n  }\n})\n\nexport function closeAll(type?: messageType): void {\n  for (const instance of instances) {\n    if (!type || type === instance.props.type) {\n      instance.handler.close()\n    }\n  }\n}\n\nmessage.closeAll = closeAll\nmessage._context = null\n\nexport default message as Message\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}