{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../../utils/index.js');\nrequire('../../../../hooks/index.js');\nvar constants = require('../constants.js');\nvar index = require('../../../../hooks/use-namespace/index.js');\nvar index$1 = require('../../../../hooks/use-locale/index.js');\nvar index$2 = require('../../../../hooks/use-z-index/index.js');\nvar error = require('../../../../utils/error.js');\nvar index$3 = require('../../../../hooks/use-size/index.js');\nvar objects = require('../../../../utils/objects.js');\nconst globalConfig = vue.ref();\nfunction useGlobalConfig(key, defaultValue = void 0) {\n  const config = vue.getCurrentInstance() ? vue.inject(constants.configProviderContextKey, globalConfig) : globalConfig;\n  if (key) {\n    return vue.computed(() => {\n      var _a, _b;\n      return (_b = (_a = config.value) == null ? void 0 : _a[key]) != null ? _b : defaultValue;\n    });\n  } else {\n    return config;\n  }\n}\nfunction useGlobalComponentSettings(block, sizeFallback) {\n  const config = useGlobalConfig();\n  const ns = index.useNamespace(block, vue.computed(() => {\n    var _a;\n    return ((_a = config.value) == null ? void 0 : _a.namespace) || index.defaultNamespace;\n  }));\n  const locale = index$1.useLocale(vue.computed(() => {\n    var _a;\n    return (_a = config.value) == null ? void 0 : _a.locale;\n  }));\n  const zIndex = index$2.useZIndex(vue.computed(() => {\n    var _a;\n    return ((_a = config.value) == null ? void 0 : _a.zIndex) || index$2.defaultInitialZIndex;\n  }));\n  const size = vue.computed(() => {\n    var _a;\n    return vue.unref(sizeFallback) || ((_a = config.value) == null ? void 0 : _a.size) || \"\";\n  });\n  provideGlobalConfig(vue.computed(() => vue.unref(config) || {}));\n  return {\n    ns,\n    locale,\n    zIndex,\n    size\n  };\n}\nconst provideGlobalConfig = (config, app, global = false) => {\n  var _a;\n  const inSetup = !!vue.getCurrentInstance();\n  const oldConfig = inSetup ? useGlobalConfig() : void 0;\n  const provideFn = (_a = app == null ? void 0 : app.provide) != null ? _a : inSetup ? vue.provide : void 0;\n  if (!provideFn) {\n    error.debugWarn(\"provideGlobalConfig\", \"provideGlobalConfig() can only be used inside setup().\");\n    return;\n  }\n  const context = vue.computed(() => {\n    const cfg = vue.unref(config);\n    if (!(oldConfig == null ? void 0 : oldConfig.value)) return cfg;\n    return mergeConfig(oldConfig.value, cfg);\n  });\n  provideFn(constants.configProviderContextKey, context);\n  provideFn(index$1.localeContextKey, vue.computed(() => context.value.locale));\n  provideFn(index.namespaceContextKey, vue.computed(() => context.value.namespace));\n  provideFn(index$2.zIndexContextKey, vue.computed(() => context.value.zIndex));\n  provideFn(index$3.SIZE_INJECTION_KEY, {\n    size: vue.computed(() => context.value.size || \"\")\n  });\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value;\n  }\n  return context;\n};\nconst mergeConfig = (a, b) => {\n  var _a;\n  const keys = [... /* @__PURE__ */new Set([...objects.keysOf(a), ...objects.keysOf(b)])];\n  const obj = {};\n  for (const key of keys) {\n    obj[key] = (_a = b[key]) != null ? _a : a[key];\n  }\n  return obj;\n};\nexports.provideGlobalConfig = provideGlobalConfig;\nexports.useGlobalComponentSettings = useGlobalComponentSettings;\nexports.useGlobalConfig = useGlobalConfig;","map":{"version":3,"names":["globalConfig","vue","ref","useGlobalConfig","key","defaultValue","config","getCurrentInstance","inject","constants","configProviderContextKey","computed","_a","_b","value","useGlobalComponentSettings","block","sizeFallback","ns","index","useNamespace","namespace","defaultNamespace","locale","index$1","useLocale","zIndex","index$2","useZIndex","defaultInitialZIndex","size","unref","provideGlobalConfig","app","global","inSetup","oldConfig","provideFn","provide","error","debugWarn","context","cfg","mergeConfig","localeContextKey","namespaceContextKey","zIndexContextKey","index$3","SIZE_INJECTION_KEY","a","b","keys","Set","objects","keysOf","obj"],"sources":["../../../../../../../packages/components/config-provider/src/hooks/use-global-config.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, provide, ref, unref } from 'vue'\nimport { debugWarn, keysOf } from '@element-plus/utils'\nimport {\n  SIZE_INJECTION_KEY,\n  defaultInitialZIndex,\n  defaultNamespace,\n  localeContextKey,\n  namespaceContextKey,\n  useLocale,\n  useNamespace,\n  useZIndex,\n  zIndexContextKey,\n} from '@element-plus/hooks'\nimport { configProviderContextKey } from '../constants'\n\nimport type { MaybeRef } from '@vueuse/core'\nimport type { App, Ref } from 'vue'\nimport type { ConfigProviderContext } from '../constants'\n\n// this is meant to fix global methods like `ElMessage(opts)`, this way we can inject current locale\n// into the component as default injection value.\n// refer to: https://github.com/element-plus/element-plus/issues/2610#issuecomment-887965266\nconst globalConfig = ref<ConfigProviderContext>()\n\nexport function useGlobalConfig<\n  K extends keyof ConfigProviderContext,\n  D extends ConfigProviderContext[K]\n>(\n  key: K,\n  defaultValue?: D\n): Ref<Exclude<ConfigProviderContext[K], undefined> | D>\nexport function useGlobalConfig(): Ref<ConfigProviderContext>\nexport function useGlobalConfig(\n  key?: keyof ConfigProviderContext,\n  defaultValue = undefined\n) {\n  const config = getCurrentInstance()\n    ? inject(configProviderContextKey, globalConfig)\n    : globalConfig\n  if (key) {\n    return computed(() => config.value?.[key] ?? defaultValue)\n  } else {\n    return config\n  }\n}\n\n// for components like `ElMessage` `ElNotification` `ElMessageBox`.\nexport function useGlobalComponentSettings(\n  block: string,\n  sizeFallback?: MaybeRef<ConfigProviderContext['size']>\n) {\n  const config = useGlobalConfig()\n\n  const ns = useNamespace(\n    block,\n    computed(() => config.value?.namespace || defaultNamespace)\n  )\n\n  const locale = useLocale(computed(() => config.value?.locale))\n  const zIndex = useZIndex(\n    computed(() => config.value?.zIndex || defaultInitialZIndex)\n  )\n  const size = computed(() => unref(sizeFallback) || config.value?.size || '')\n  provideGlobalConfig(computed(() => unref(config) || {}))\n\n  return {\n    ns,\n    locale,\n    zIndex,\n    size,\n  }\n}\n\nexport const provideGlobalConfig = (\n  config: MaybeRef<ConfigProviderContext>,\n  app?: App,\n  global = false\n) => {\n  const inSetup = !!getCurrentInstance()\n  const oldConfig = inSetup ? useGlobalConfig() : undefined\n\n  const provideFn = app?.provide ?? (inSetup ? provide : undefined)\n  if (!provideFn) {\n    debugWarn(\n      'provideGlobalConfig',\n      'provideGlobalConfig() can only be used inside setup().'\n    )\n    return\n  }\n\n  const context = computed(() => {\n    const cfg = unref(config)\n    if (!oldConfig?.value) return cfg\n    return mergeConfig(oldConfig.value, cfg)\n  })\n  provideFn(configProviderContextKey, context)\n  provideFn(\n    localeContextKey,\n    computed(() => context.value.locale)\n  )\n  provideFn(\n    namespaceContextKey,\n    computed(() => context.value.namespace)\n  )\n  provideFn(\n    zIndexContextKey,\n    computed(() => context.value.zIndex)\n  )\n\n  provideFn(SIZE_INJECTION_KEY, {\n    size: computed(() => context.value.size || ''),\n  })\n\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value\n  }\n  return context\n}\n\nconst mergeConfig = (\n  a: ConfigProviderContext,\n  b: ConfigProviderContext\n): ConfigProviderContext => {\n  const keys = [...new Set([...keysOf(a), ...keysOf(b)])]\n  const obj: Record<string, any> = {}\n  for (const key of keys) {\n    obj[key] = b[key] ?? a[key]\n  }\n  return obj\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}