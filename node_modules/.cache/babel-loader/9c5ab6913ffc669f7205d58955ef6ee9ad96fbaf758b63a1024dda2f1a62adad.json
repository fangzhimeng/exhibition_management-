{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nrequire('../../../../utils/index.js');\nvar buildList = require('../builders/build-list.js');\nvar utils = require('../utils.js');\nvar defaults = require('../defaults.js');\nvar shared = require('@vue/shared');\nvar error = require('../../../../utils/error.js');\nconst FixedSizeList = buildList[\"default\"]({\n  name: \"ElFixedSizeList\",\n  getItemOffset: ({\n    itemSize\n  }, index) => index * itemSize,\n  getItemSize: ({\n    itemSize\n  }) => itemSize,\n  getEstimatedTotalSize: ({\n    total,\n    itemSize\n  }) => itemSize * total,\n  getOffset: ({\n    height,\n    total,\n    itemSize,\n    layout,\n    width\n  }, index, alignment, scrollOffset) => {\n    const size = utils.isHorizontal(layout) ? width : height;\n    if (process.env.NODE_ENV !== \"production\" && shared.isString(size)) {\n      error.throwError(\"[ElVirtualList]\", `\n        You should set\n          width/height\n        to number when your layout is\n          horizontal/vertical\n      `);\n    }\n    const lastItemOffset = Math.max(0, total * itemSize - size);\n    const maxOffset = Math.min(lastItemOffset, index * itemSize);\n    const minOffset = Math.max(0, (index + 1) * itemSize - size);\n    if (alignment === defaults.SMART_ALIGNMENT) {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        alignment = defaults.AUTO_ALIGNMENT;\n      } else {\n        alignment = defaults.CENTERED_ALIGNMENT;\n      }\n    }\n    switch (alignment) {\n      case defaults.START_ALIGNMENT:\n        {\n          return maxOffset;\n        }\n      case defaults.END_ALIGNMENT:\n        {\n          return minOffset;\n        }\n      case defaults.CENTERED_ALIGNMENT:\n        {\n          const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0;\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case defaults.AUTO_ALIGNMENT:\n      default:\n        {\n          if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n            return scrollOffset;\n          } else if (scrollOffset < minOffset) {\n            return minOffset;\n          } else {\n            return maxOffset;\n          }\n        }\n    }\n  },\n  getStartIndexForOffset: ({\n    total,\n    itemSize\n  }, offset) => Math.max(0, Math.min(total - 1, Math.floor(offset / itemSize))),\n  getStopIndexForStartIndex: ({\n    height,\n    total,\n    itemSize,\n    layout,\n    width\n  }, startIndex, scrollOffset) => {\n    const offset = startIndex * itemSize;\n    const size = utils.isHorizontal(layout) ? width : height;\n    const numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(total - 1, startIndex + numVisibleItems - 1));\n  },\n  initCache() {\n    return void 0;\n  },\n  clearCache: true,\n  validateProps() {}\n});\nexports[\"default\"] = FixedSizeList;","map":{"version":3,"names":["FixedSizeList","buildList","name","getItemOffset","itemSize","index","getItemSize","getEstimatedTotalSize","total","getOffset","height","layout","width","alignment","scrollOffset","size","utils","isHorizontal","process","env","NODE_ENV","shared","isString","error","throwError","lastItemOffset","Math","max","maxOffset","min","minOffset","defaults","SMART_ALIGNMENT","AUTO_ALIGNMENT","CENTERED_ALIGNMENT","START_ALIGNMENT","END_ALIGNMENT","middleOffset","round","ceil","floor","getStartIndexForOffset","offset","getStopIndexForStartIndex","startIndex","numVisibleItems","initCache","clearCache","validateProps"],"sources":["../../../../../../../packages/components/virtual-list/src/components/fixed-size-list.ts"],"sourcesContent":["import { isString, throwError } from '@element-plus/utils'\nimport buildList from '../builders/build-list'\nimport { isHorizontal } from '../utils'\nimport {\n  AUTO_ALIGNMENT,\n  CENTERED_ALIGNMENT,\n  END_ALIGNMENT,\n  SMART_ALIGNMENT,\n  START_ALIGNMENT,\n} from '../defaults'\n\nimport type { VirtualizedListProps } from '../props'\n\ntype Props = VirtualizedListProps\n\nconst FixedSizeList = buildList({\n  name: 'ElFixedSizeList',\n  getItemOffset: ({ itemSize }, index) => index * (itemSize as number),\n\n  getItemSize: ({ itemSize }) => itemSize as number,\n\n  getEstimatedTotalSize: ({ total, itemSize }) => (itemSize as number) * total,\n\n  getOffset: (\n    { height, total, itemSize, layout, width },\n    index,\n    alignment,\n    scrollOffset\n  ) => {\n    const size = (isHorizontal(layout) ? width : height) as number\n    if (process.env.NODE_ENV !== 'production' && isString(size)) {\n      throwError(\n        '[ElVirtualList]',\n        `\n        You should set\n          width/height\n        to number when your layout is\n          horizontal/vertical\n      `\n      )\n    }\n    const lastItemOffset = Math.max(0, total * (itemSize as number) - size)\n    const maxOffset = Math.min(lastItemOffset, index * (itemSize as number))\n    const minOffset = Math.max(0, (index + 1) * (itemSize as number) - size)\n\n    if (alignment === SMART_ALIGNMENT) {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        alignment = AUTO_ALIGNMENT\n      } else {\n        alignment = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (alignment) {\n      case START_ALIGNMENT: {\n        return maxOffset\n      }\n      case END_ALIGNMENT: {\n        return minOffset\n      }\n      case CENTERED_ALIGNMENT: {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0 // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset // near the end\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default: {\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset\n        } else if (scrollOffset < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n      }\n    }\n  },\n\n  getStartIndexForOffset: ({ total, itemSize }, offset) =>\n    Math.max(0, Math.min(total - 1, Math.floor(offset / (itemSize as number)))),\n\n  getStopIndexForStartIndex: (\n    { height, total, itemSize, layout, width }: Props,\n    startIndex: number,\n    scrollOffset: number\n  ) => {\n    const offset = startIndex * (itemSize as number)\n    const size = isHorizontal(layout) ? width : height\n    const numVisibleItems = Math.ceil(\n      ((size as number) + scrollOffset - offset) / (itemSize as number)\n    )\n    return Math.max(\n      0,\n      Math.min(\n        total - 1,\n        // because startIndex is inclusive, so in order to prevent array outbound indexing\n        // we need to - 1 to prevent outbound behavior\n        startIndex + numVisibleItems - 1\n      )\n    )\n  },\n\n  /**\n   * Fixed size list does not need this cache\n   * Using any to bypass it, TODO: Using type inference to fix this.\n   */\n  initCache() {\n    return undefined as any\n  },\n\n  clearCache: true,\n\n  validateProps() {\n    //\n  },\n})\n\nexport default FixedSizeList\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}