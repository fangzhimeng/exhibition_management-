{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../hooks/index.js');\nvar constants = require('./constants.js');\nrequire('./composables/index.js');\nvar checkbox = require('./checkbox.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar useCheckbox = require('./composables/use-checkbox.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst _hoisted_1 = [\"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nconst _hoisted_2 = [\"name\", \"tabindex\", \"disabled\", \"value\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElCheckboxButton\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: checkbox.checkboxProps,\n  emits: checkbox.checkboxEmits,\n  setup(__props) {\n    const props = __props;\n    const slots = vue.useSlots();\n    const {\n      isFocused,\n      isChecked,\n      isDisabled,\n      checkboxButtonSize,\n      model,\n      handleChange\n    } = useCheckbox.useCheckbox(props, slots);\n    const checkboxGroup = vue.inject(constants.checkboxGroupContextKey, void 0);\n    const ns = index.useNamespace(\"checkbox\");\n    const activeStyle = vue.computed(() => {\n      var _a, _b, _c, _d;\n      const fillValue = (_b = (_a = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a.value) != null ? _b : \"\";\n      return {\n        backgroundColor: fillValue,\n        borderColor: fillValue,\n        color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : \"\",\n        boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : void 0\n      };\n    });\n    const labelKls = vue.computed(() => {\n      return [ns.b(\"button\"), ns.bm(\"button\", checkboxButtonSize.value), ns.is(\"disabled\", isDisabled.value), ns.is(\"checked\", isChecked.value), ns.is(\"focus\", isFocused.value)];\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"label\", {\n        class: vue.normalizeClass(vue.unref(labelKls))\n      }, [_ctx.trueLabel || _ctx.falseLabel ? vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"input\", {\n        key: 0,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => vue.isRef(model) ? model.value = $event : null),\n        class: vue.normalizeClass(vue.unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: vue.unref(isDisabled),\n        \"true-value\": _ctx.trueLabel,\n        \"false-value\": _ctx.falseLabel,\n        onChange: _cache[1] || (_cache[1] = (...args) => vue.unref(handleChange) && vue.unref(handleChange)(...args)),\n        onFocus: _cache[2] || (_cache[2] = $event => isFocused.value = true),\n        onBlur: _cache[3] || (_cache[3] = $event => isFocused.value = false),\n        onClick: _cache[4] || (_cache[4] = vue.withModifiers(() => {}, [\"stop\"]))\n      }, null, 42, _hoisted_1)), [[vue.vModelCheckbox, vue.unref(model)]]) : vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"input\", {\n        key: 1,\n        \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => vue.isRef(model) ? model.value = $event : null),\n        class: vue.normalizeClass(vue.unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: vue.unref(isDisabled),\n        value: _ctx.label,\n        onChange: _cache[6] || (_cache[6] = (...args) => vue.unref(handleChange) && vue.unref(handleChange)(...args)),\n        onFocus: _cache[7] || (_cache[7] = $event => isFocused.value = true),\n        onBlur: _cache[8] || (_cache[8] = $event => isFocused.value = false),\n        onClick: _cache[9] || (_cache[9] = vue.withModifiers(() => {}, [\"stop\"]))\n      }, null, 42, _hoisted_2)), [[vue.vModelCheckbox, vue.unref(model)]]), _ctx.$slots.default || _ctx.label ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 2,\n        class: vue.normalizeClass(vue.unref(ns).be(\"button\", \"inner\")),\n        style: vue.normalizeStyle(vue.unref(isChecked) ? vue.unref(activeStyle) : void 0)\n      }, [vue.renderSlot(_ctx.$slots, \"default\", {}, () => [vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)])], 6)) : vue.createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\nvar CheckboxButton = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue\"]]);\nexports[\"default\"] = CheckboxButton;","map":{"version":3,"names":["name","slots","vue","useSlots","isFocused","isChecked","isDisabled","checkboxButtonSize","model","handleChange","useCheckbox","props","checkboxGroup","inject","constants","checkboxGroupContextKey","ns","index","useNamespace","activeStyle","computed","_a","_b","_c","_d","fillValue","fill","value","backgroundColor","borderColor","color","textColor","boxShadow","labelKls","b","bm","is"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-button.vue"],"sourcesContent":["<template>\n  <label :class=\"labelKls\">\n    <input\n      v-if=\"trueLabel || falseLabel\"\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :true-value=\"trueLabel\"\n      :false-value=\"falseLabel\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n    <input\n      v-else\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :value=\"label\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n\n    <span\n      v-if=\"$slots.default || label\"\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"isChecked ? activeStyle : undefined\"\n    >\n      <slot>{{ label }}</slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxGroupContextKey } from './constants'\nimport { useCheckbox } from './composables'\nimport { checkboxEmits, checkboxProps } from './checkbox'\n\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElCheckboxButton',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  isFocused,\n  isChecked,\n  isDisabled,\n  checkboxButtonSize,\n  model,\n  handleChange,\n} = useCheckbox(props, slots)\nconst checkboxGroup = inject(checkboxGroupContextKey, undefined)\nconst ns = useNamespace('checkbox')\n\nconst activeStyle = computed<CSSProperties>(() => {\n  const fillValue = checkboxGroup?.fill?.value ?? ''\n  return {\n    backgroundColor: fillValue,\n    borderColor: fillValue,\n    color: checkboxGroup?.textColor?.value ?? '',\n    boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : undefined,\n  }\n})\n\nconst labelKls = computed(() => {\n  return [\n    ns.b('button'),\n    ns.bm('button', checkboxButtonSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;uCAmDc;EACZA,IAAM;AACR;;;;;;;IAIA,MAAMC,KAAA,GAAQC,GAAA,CAAAC,QAAS;IAEjB;MACJC,SAAA;MACAC,SAAA;MACAC,UAAA;MACAC,kBAAA;MACAC,KAAA;MACAC;IAAA,CACE,GAAAC,WAAA,CAAAA,WAAA,CAAYC,KAAA,EAAOV,KAAK;IACtB,MAAAW,aAAA,GAAgBV,GAAA,CAAAW,MAAO,CAAAC,SAAA,CAAAC,uBAAA,EAAyB,KAAS;IACzD,MAAAC,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,UAAU;IAE5B,MAAAC,WAAA,GAAcjB,GAAA,CAAAkB,QAAA,CAAwB,MAAM;MAC1C,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAY;MACX,MAAAC,SAAA,IAAAH,EAAA,IAAAD,EAAA,GAAAT,aAAA,oBAAAA,aAAA,CAAAc,IAAA,qBAAAL,EAAA,CAAAM,KAAA,YAAAL,EAAA;MAAA,OACY;QACjBM,eAAa,EAAAH,SAAA;QACbI,WAAsB,EAAAJ,SAAA;QACtBK,KAAA,GAAAN,EAAA,GAAuB,CAAAD,EAAA,GAAAX,aAAA,QAA4B,YAAAA,aAAA,CAAAmB,SAAA,qBAAAR,EAAA,CAAAI,KAAA,YAAAH,EAAA;QACrDQ,SAAA,EAAAP,SAAA,iBAAAA,SAAA;MAAA,CACD;IAED,CAAM;IACG,MAAAQ,QAAA,GAAA/B,GAAA,CAAAkB,QAAA;MACL,OAAK,CACLJ,EAAG,CAAAkB,CAAA,SAAa,GAChBlB,EAAG,CAAAmB,EAAA,CAAG,QAAY,EAAA5B,kBAAgB,CAAAoB,KAAA,GAClCX,EAAG,CAAAoB,EAAA,CAAG,UAAW,EAAA9B,UAAe,CAAAqB,KAAA,GAChCX,EAAG,CAAAoB,EAAA,CAAG,SAAS,EAAA/B,SAAe,CAAAsB,KAAA,GAChCX,EAAA,CAAAoB,EAAA,UAAAhC,SAAA,CAAAuB,KAAA,EACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}