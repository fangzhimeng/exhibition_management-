{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar shared = require('@vue/shared');\nrequire('../../utils/index.js');\nvar runtime = require('../../utils/vue/props/runtime.js');\nvar core = require('@vueuse/core');\nvar types = require('../../utils/types.js');\nconst _prop = runtime.buildProp({\n  type: runtime.definePropType(Boolean),\n  default: null\n});\nconst _event = runtime.buildProp({\n  type: runtime.definePropType(Function)\n});\nconst createModelToggleComposable = name => {\n  const updateEventKey = `update:${name}`;\n  const updateEventKeyRaw = `onUpdate:${name}`;\n  const useModelToggleEmits2 = [updateEventKey];\n  const useModelToggleProps2 = {\n    [name]: _prop,\n    [updateEventKeyRaw]: _event\n  };\n  const useModelToggle2 = ({\n    indicator,\n    toggleReason,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    onShow,\n    onHide\n  }) => {\n    const instance = vue.getCurrentInstance();\n    const {\n      emit\n    } = instance;\n    const props = instance.props;\n    const hasUpdateHandler = vue.computed(() => shared.isFunction(props[updateEventKeyRaw]));\n    const isModelBindingAbsent = vue.computed(() => props[name] === null);\n    const doShow = event => {\n      if (indicator.value === true) {\n        return;\n      }\n      indicator.value = true;\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n      if (shared.isFunction(onShow)) {\n        onShow(event);\n      }\n    };\n    const doHide = event => {\n      if (indicator.value === false) {\n        return;\n      }\n      indicator.value = false;\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n      if (shared.isFunction(onHide)) {\n        onHide(event);\n      }\n    };\n    const show = event => {\n      if (props.disabled === true || shared.isFunction(shouldProceed) && !shouldProceed()) return;\n      const shouldEmit = hasUpdateHandler.value && core.isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, true);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow(event);\n      }\n    };\n    const hide = event => {\n      if (props.disabled === true || !core.isClient) return;\n      const shouldEmit = hasUpdateHandler.value && core.isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, false);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide(event);\n      }\n    };\n    const onChange = val => {\n      if (!types.isBoolean(val)) return;\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false);\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow();\n        } else {\n          doHide();\n        }\n      }\n    };\n    const toggle = () => {\n      if (indicator.value) {\n        hide();\n      } else {\n        show();\n      }\n    };\n    vue.watch(() => props[name], onChange);\n    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {\n      vue.watch(() => ({\n        ...instance.proxy.$route\n      }), () => {\n        if (shouldHideWhenRouteChanges.value && indicator.value) {\n          hide();\n        }\n      });\n    }\n    vue.onMounted(() => {\n      onChange(props[name]);\n    });\n    return {\n      hide,\n      show,\n      toggle,\n      hasUpdateHandler\n    };\n  };\n  return {\n    useModelToggle: useModelToggle2,\n    useModelToggleProps: useModelToggleProps2,\n    useModelToggleEmits: useModelToggleEmits2\n  };\n};\nconst {\n  useModelToggle,\n  useModelToggleProps,\n  useModelToggleEmits\n} = createModelToggleComposable(\"modelValue\");\nexports.createModelToggleComposable = createModelToggleComposable;\nexports.useModelToggle = useModelToggle;\nexports.useModelToggleEmits = useModelToggleEmits;\nexports.useModelToggleProps = useModelToggleProps;","map":{"version":3,"names":["_prop","runtime","buildProp","type","definePropType","Boolean","default","_event","Function","createModelToggleComposable","name","updateEventKey","updateEventKeyRaw","useModelToggleEmits2","useModelToggleProps2","useModelToggle2","indicator","toggleReason","shouldHideWhenRouteChanges","shouldProceed","onShow","onHide","instance","vue","getCurrentInstance","emit","props","hasUpdateHandler","computed","shared","isFunction","isModelBindingAbsent","doShow","event","value","doHide","show","disabled","shouldEmit","core","isClient","hide","onChange","val","types","isBoolean","toggle","watch","appContext","config","globalProperties","$route","proxy","onMounted","useModelToggle","useModelToggleProps","useModelToggleEmits"],"sources":["../../../../../packages/hooks/use-model-toggle/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, onMounted, watch } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport {\n  buildProp,\n  definePropType,\n  isBoolean,\n  isClient,\n} from '@element-plus/utils'\nimport type { ExtractPropType } from '@element-plus/utils'\nimport type { RouteLocationNormalizedLoaded } from 'vue-router'\n\nimport type { ComponentPublicInstance, ExtractPropTypes, Ref } from 'vue'\n\nconst _prop = buildProp({\n  type: definePropType<boolean | null>(Boolean),\n  default: null,\n} as const)\nconst _event = buildProp({\n  type: definePropType<(val: boolean) => void>(Function),\n} as const)\n\nexport type UseModelTogglePropsRaw<T extends string> = {\n  [K in T]: typeof _prop\n} & {\n  [K in `onUpdate:${T}`]: typeof _event\n}\n\nexport type UseModelTogglePropsGeneric<T extends string> = {\n  [K in T]: ExtractPropType<typeof _prop>\n} & {\n  [K in `onUpdate:${T}`]: ExtractPropType<typeof _event>\n}\n\nexport const createModelToggleComposable = <T extends string>(name: T) => {\n  const updateEventKey = `update:${name}` as const\n  const updateEventKeyRaw = `onUpdate:${name}` as const\n  const useModelToggleEmits = [updateEventKey]\n\n  const useModelToggleProps = {\n    [name]: _prop,\n    [updateEventKeyRaw]: _event,\n  } as UseModelTogglePropsRaw<T>\n\n  const useModelToggle = ({\n    indicator,\n    toggleReason,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    onShow,\n    onHide,\n  }: ModelToggleParams) => {\n    const instance = getCurrentInstance()!\n    const { emit } = instance\n    const props = instance.props as UseModelTogglePropsGeneric<T> & {\n      disabled: boolean\n    }\n    const hasUpdateHandler = computed(() =>\n      isFunction(props[updateEventKeyRaw])\n    )\n    // when it matches the default value we say this is absent\n    // though this could be mistakenly passed from the user but we need to rule out that\n    // condition\n    const isModelBindingAbsent = computed(() => props[name] === null)\n\n    const doShow = (event?: Event) => {\n      if (indicator.value === true) {\n        return\n      }\n\n      indicator.value = true\n      if (toggleReason) {\n        toggleReason.value = event\n      }\n      if (isFunction(onShow)) {\n        onShow(event)\n      }\n    }\n\n    const doHide = (event?: Event) => {\n      if (indicator.value === false) {\n        return\n      }\n\n      indicator.value = false\n      if (toggleReason) {\n        toggleReason.value = event\n      }\n      if (isFunction(onHide)) {\n        onHide(event)\n      }\n    }\n\n    const show = (event?: Event) => {\n      if (\n        props.disabled === true ||\n        (isFunction(shouldProceed) && !shouldProceed())\n      )\n        return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, true)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow(event)\n      }\n    }\n\n    const hide = (event?: Event) => {\n      if (props.disabled === true || !isClient) return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, false)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide(event)\n      }\n    }\n\n    const onChange = (val: boolean) => {\n      if (!isBoolean(val)) return\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false)\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow()\n        } else {\n          doHide()\n        }\n      }\n    }\n\n    const toggle = () => {\n      if (indicator.value) {\n        hide()\n      } else {\n        show()\n      }\n    }\n\n    watch(() => props[name], onChange)\n\n    if (\n      shouldHideWhenRouteChanges &&\n      instance.appContext.config.globalProperties.$route !== undefined\n    ) {\n      watch(\n        () => ({\n          ...(\n            instance.proxy as ComponentPublicInstance<{\n              $route: RouteLocationNormalizedLoaded\n            }>\n          ).$route,\n        }),\n        () => {\n          if (shouldHideWhenRouteChanges.value && indicator.value) {\n            hide()\n          }\n        }\n      )\n    }\n\n    onMounted(() => {\n      onChange(props[name])\n    })\n\n    return {\n      hide,\n      show,\n      toggle,\n      hasUpdateHandler,\n    }\n  }\n\n  return {\n    useModelToggle,\n    useModelToggleProps,\n    useModelToggleEmits,\n  }\n}\n\nconst { useModelToggle, useModelToggleProps, useModelToggleEmits } =\n  createModelToggleComposable('modelValue')\n\nexport { useModelToggle, useModelToggleEmits, useModelToggleProps }\n\nexport type UseModelToggleProps = ExtractPropTypes<typeof useModelToggleProps>\n\nexport type ModelToggleParams = {\n  indicator: Ref<boolean>\n  toggleReason?: Ref<Event | undefined>\n  shouldHideWhenRouteChanges?: Ref<boolean>\n  shouldProceed?: () => boolean\n  onShow?: (event?: Event) => void\n  onHide?: (event?: Event) => void\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}