{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar core = require('@vueuse/core');\nvar lodashUnified = require('lodash-unified');\nvar index$4 = require('../../icon/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nrequire('../../form/index.js');\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../../constants/index.js');\nvar utils = require('./utils.js');\nvar input = require('./input.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-attrs/index.js');\nvar useFormItem = require('../../form/src/hooks/use-form-item.js');\nvar useFormCommonProps = require('../../form/src/hooks/use-form-common-props.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar index$2 = require('../../../hooks/use-focus-controller/index.js');\nvar error = require('../../../utils/error.js');\nvar icon = require('../../../utils/vue/icon.js');\nvar index$3 = require('../../../hooks/use-cursor/index.js');\nvar shared = require('@vue/shared');\nvar event = require('../../../constants/event.js');\nvar i18n = require('../../../utils/i18n.js');\nconst _hoisted_1 = [\"role\"];\nconst _hoisted_2 = [\"id\", \"type\", \"disabled\", \"formatter\", \"parser\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\", \"form\", \"autofocus\"];\nconst _hoisted_3 = [\"id\", \"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\", \"form\", \"autofocus\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElInput\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: input.inputProps,\n  emits: input.inputEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const rawAttrs = vue.useAttrs();\n    const slots = vue.useSlots();\n    const containerAttrs = vue.computed(() => {\n      const comboBoxAttrs = {};\n      if (props.containerRole === \"combobox\") {\n        comboBoxAttrs[\"aria-haspopup\"] = rawAttrs[\"aria-haspopup\"];\n        comboBoxAttrs[\"aria-owns\"] = rawAttrs[\"aria-owns\"];\n        comboBoxAttrs[\"aria-expanded\"] = rawAttrs[\"aria-expanded\"];\n      }\n      return comboBoxAttrs;\n    });\n    const containerKls = vue.computed(() => [props.type === \"textarea\" ? nsTextarea.b() : nsInput.b(), nsInput.m(inputSize.value), nsInput.is(\"disabled\", inputDisabled.value), nsInput.is(\"exceed\", inputExceed.value), {\n      [nsInput.b(\"group\")]: slots.prepend || slots.append,\n      [nsInput.bm(\"group\", \"append\")]: slots.append,\n      [nsInput.bm(\"group\", \"prepend\")]: slots.prepend,\n      [nsInput.m(\"prefix\")]: slots.prefix || props.prefixIcon,\n      [nsInput.m(\"suffix\")]: slots.suffix || props.suffixIcon || props.clearable || props.showPassword,\n      [nsInput.bm(\"suffix\", \"password-clear\")]: showClear.value && showPwdVisible.value\n    }, rawAttrs.class]);\n    const wrapperKls = vue.computed(() => [nsInput.e(\"wrapper\"), nsInput.is(\"focus\", isFocused.value)]);\n    const attrs = index.useAttrs({\n      excludeKeys: vue.computed(() => {\n        return Object.keys(containerAttrs.value);\n      })\n    });\n    const {\n      form,\n      formItem\n    } = useFormItem.useFormItem();\n    const {\n      inputId\n    } = useFormItem.useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const inputSize = useFormCommonProps.useFormSize();\n    const inputDisabled = useFormCommonProps.useFormDisabled();\n    const nsInput = index$1.useNamespace(\"input\");\n    const nsTextarea = index$1.useNamespace(\"textarea\");\n    const input = vue.shallowRef();\n    const textarea = vue.shallowRef();\n    const hovering = vue.ref(false);\n    const isComposing = vue.ref(false);\n    const passwordVisible = vue.ref(false);\n    const countStyle = vue.ref();\n    const textareaCalcStyle = vue.shallowRef(props.inputStyle);\n    const _ref = vue.computed(() => input.value || textarea.value);\n    const {\n      wrapperRef,\n      isFocused,\n      handleFocus,\n      handleBlur\n    } = index$2.useFocusController(_ref, {\n      afterBlur() {\n        var _a;\n        if (props.validateEvent) {\n          (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => error.debugWarn(err));\n        }\n      }\n    });\n    const needStatusIcon = vue.computed(() => {\n      var _a;\n      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n    });\n    const validateState = vue.computed(() => (formItem == null ? void 0 : formItem.validateState) || \"\");\n    const validateIcon = vue.computed(() => validateState.value && icon.ValidateComponentsMap[validateState.value]);\n    const passwordIcon = vue.computed(() => passwordVisible.value ? iconsVue.View : iconsVue.Hide);\n    const containerStyle = vue.computed(() => [rawAttrs.style, props.inputStyle]);\n    const textareaStyle = vue.computed(() => [props.inputStyle, textareaCalcStyle.value, {\n      resize: props.resize\n    }]);\n    const nativeInputValue = vue.computed(() => lodashUnified.isNil(props.modelValue) ? \"\" : String(props.modelValue));\n    const showClear = vue.computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (isFocused.value || hovering.value));\n    const showPwdVisible = vue.computed(() => props.showPassword && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (!!nativeInputValue.value || isFocused.value));\n    const isWordLimitVisible = vue.computed(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword);\n    const textLength = vue.computed(() => nativeInputValue.value.length);\n    const inputExceed = vue.computed(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));\n    const suffixVisible = vue.computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);\n    const [recordCursor, setCursor] = index$3.useCursor(input);\n    core.useResizeObserver(textarea, entries => {\n      onceInitSizeTextarea();\n      if (!isWordLimitVisible.value || props.resize !== \"both\") return;\n      const entry = entries[0];\n      const {\n        width\n      } = entry.contentRect;\n      countStyle.value = {\n        right: `calc(100% - ${width + 15 + 6}px)`\n      };\n    });\n    const resizeTextarea = () => {\n      const {\n        type,\n        autosize\n      } = props;\n      if (!core.isClient || type !== \"textarea\" || !textarea.value) return;\n      if (autosize) {\n        const minRows = shared.isObject(autosize) ? autosize.minRows : void 0;\n        const maxRows = shared.isObject(autosize) ? autosize.maxRows : void 0;\n        const textareaStyle2 = utils.calcTextareaHeight(textarea.value, minRows, maxRows);\n        textareaCalcStyle.value = {\n          overflowY: \"hidden\",\n          ...textareaStyle2\n        };\n        vue.nextTick(() => {\n          textarea.value.offsetHeight;\n          textareaCalcStyle.value = textareaStyle2;\n        });\n      } else {\n        textareaCalcStyle.value = {\n          minHeight: utils.calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n    const createOnceInitResize = resizeTextarea2 => {\n      let isInit = false;\n      return () => {\n        var _a;\n        if (isInit || !props.autosize) return;\n        const isElHidden = ((_a = textarea.value) == null ? void 0 : _a.offsetParent) === null;\n        if (!isElHidden) {\n          resizeTextarea2();\n          isInit = true;\n        }\n      };\n    };\n    const onceInitSizeTextarea = createOnceInitResize(resizeTextarea);\n    const setNativeInputValue = () => {\n      const input2 = _ref.value;\n      const formatterValue = props.formatter ? props.formatter(nativeInputValue.value) : nativeInputValue.value;\n      if (!input2 || input2.value === formatterValue) return;\n      input2.value = formatterValue;\n    };\n    const handleInput = async event$1 => {\n      recordCursor();\n      let {\n        value\n      } = event$1.target;\n      if (props.formatter) {\n        value = props.parser ? props.parser(value) : value;\n      }\n      if (isComposing.value) return;\n      if (value === nativeInputValue.value) {\n        setNativeInputValue();\n        return;\n      }\n      emit(event.UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      await vue.nextTick();\n      setNativeInputValue();\n      setCursor();\n    };\n    const handleChange = event => {\n      emit(\"change\", event.target.value);\n    };\n    const handleCompositionStart = event => {\n      emit(\"compositionstart\", event);\n      isComposing.value = true;\n    };\n    const handleCompositionUpdate = event => {\n      var _a;\n      emit(\"compositionupdate\", event);\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      const lastCharacter = text[text.length - 1] || \"\";\n      isComposing.value = !i18n.isKorean(lastCharacter);\n    };\n    const handleCompositionEnd = event => {\n      emit(\"compositionend\", event);\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n    const focus = async () => {\n      var _a;\n      await vue.nextTick();\n      (_a = _ref.value) == null ? void 0 : _a.focus();\n    };\n    const blur = () => {\n      var _a;\n      return (_a = _ref.value) == null ? void 0 : _a.blur();\n    };\n    const handleMouseLeave = evt => {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n    const handleMouseEnter = evt => {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n    const handleKeydown = evt => {\n      emit(\"keydown\", evt);\n    };\n    const select = () => {\n      var _a;\n      (_a = _ref.value) == null ? void 0 : _a.select();\n    };\n    const clear = () => {\n      emit(event.UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n    vue.watch(() => props.modelValue, () => {\n      var _a;\n      vue.nextTick(() => resizeTextarea());\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => error.debugWarn(err));\n      }\n    });\n    vue.watch(nativeInputValue, () => setNativeInputValue());\n    vue.watch(() => props.type, async () => {\n      await vue.nextTick();\n      setNativeInputValue();\n      resizeTextarea();\n    });\n    vue.onMounted(() => {\n      if (!props.formatter && props.parser) {\n        error.debugWarn(\"ElInput\", \"If you set the parser, you also need to set the formatter.\");\n      }\n      setNativeInputValue();\n      vue.nextTick(resizeTextarea);\n    });\n    expose({\n      input,\n      textarea,\n      ref: _ref,\n      textareaStyle,\n      autosize: vue.toRef(props, \"autosize\"),\n      focus,\n      blur,\n      select,\n      clear,\n      resizeTextarea\n    });\n    return (_ctx, _cache) => {\n      return vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"div\", vue.mergeProps(vue.unref(containerAttrs), {\n        class: vue.unref(containerKls),\n        style: vue.unref(containerStyle),\n        role: _ctx.containerRole,\n        onMouseenter: handleMouseEnter,\n        onMouseleave: handleMouseLeave\n      }), [vue.createCommentVNode(\" input \"), _ctx.type !== \"textarea\" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n        key: 0\n      }, [vue.createCommentVNode(\" prepend slot \"), _ctx.$slots.prepend ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(nsInput).be(\"group\", \"prepend\"))\n      }, [vue.renderSlot(_ctx.$slots, \"prepend\")], 2)) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n        ref_key: \"wrapperRef\",\n        ref: wrapperRef,\n        class: vue.normalizeClass(vue.unref(wrapperKls))\n      }, [vue.createCommentVNode(\" prefix slot \"), _ctx.$slots.prefix || _ctx.prefixIcon ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(nsInput).e(\"prefix\"))\n      }, [vue.createElementVNode(\"span\", {\n        class: vue.normalizeClass(vue.unref(nsInput).e(\"prefix-inner\"))\n      }, [vue.renderSlot(_ctx.$slots, \"prefix\"), _ctx.prefixIcon ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(nsInput).e(\"icon\"))\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.prefixIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true)], 2)], 2)) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"input\", vue.mergeProps({\n        id: vue.unref(inputId),\n        ref_key: \"input\",\n        ref: input,\n        class: vue.unref(nsInput).e(\"inner\")\n      }, vue.unref(attrs), {\n        type: _ctx.showPassword ? passwordVisible.value ? \"text\" : \"password\" : _ctx.type,\n        disabled: vue.unref(inputDisabled),\n        formatter: _ctx.formatter,\n        parser: _ctx.parser,\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        tabindex: _ctx.tabindex,\n        \"aria-label\": _ctx.label,\n        placeholder: _ctx.placeholder,\n        style: _ctx.inputStyle,\n        form: props.form,\n        autofocus: props.autofocus,\n        onCompositionstart: handleCompositionStart,\n        onCompositionupdate: handleCompositionUpdate,\n        onCompositionend: handleCompositionEnd,\n        onInput: handleInput,\n        onFocus: _cache[0] || (_cache[0] = (...args) => vue.unref(handleFocus) && vue.unref(handleFocus)(...args)),\n        onBlur: _cache[1] || (_cache[1] = (...args) => vue.unref(handleBlur) && vue.unref(handleBlur)(...args)),\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, _hoisted_2), vue.createCommentVNode(\" suffix slot \"), vue.unref(suffixVisible) ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 1,\n        class: vue.normalizeClass(vue.unref(nsInput).e(\"suffix\"))\n      }, [vue.createElementVNode(\"span\", {\n        class: vue.normalizeClass(vue.unref(nsInput).e(\"suffix-inner\"))\n      }, [!vue.unref(showClear) || !vue.unref(showPwdVisible) || !vue.unref(isWordLimitVisible) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n        key: 0\n      }, [vue.renderSlot(_ctx.$slots, \"suffix\"), _ctx.suffixIcon ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(nsInput).e(\"icon\"))\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.suffixIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true)], 64)) : vue.createCommentVNode(\"v-if\", true), vue.unref(showClear) ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n        key: 1,\n        class: vue.normalizeClass([vue.unref(nsInput).e(\"icon\"), vue.unref(nsInput).e(\"clear\")]),\n        onMousedown: vue.withModifiers(vue.unref(shared.NOOP), [\"prevent\"]),\n        onClick: clear\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.CircleClose))]),\n        _: 1\n      }, 8, [\"class\", \"onMousedown\"])) : vue.createCommentVNode(\"v-if\", true), vue.unref(showPwdVisible) ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n        key: 2,\n        class: vue.normalizeClass([vue.unref(nsInput).e(\"icon\"), vue.unref(nsInput).e(\"password\")]),\n        onClick: handlePasswordVisible\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(passwordIcon))))]),\n        _: 1\n      }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true), vue.unref(isWordLimitVisible) ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 3,\n        class: vue.normalizeClass(vue.unref(nsInput).e(\"count\"))\n      }, [vue.createElementVNode(\"span\", {\n        class: vue.normalizeClass(vue.unref(nsInput).e(\"count-inner\"))\n      }, vue.toDisplayString(vue.unref(textLength)) + \" / \" + vue.toDisplayString(vue.unref(attrs).maxlength), 3)], 2)) : vue.createCommentVNode(\"v-if\", true), vue.unref(validateState) && vue.unref(validateIcon) && vue.unref(needStatusIcon) ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n        key: 4,\n        class: vue.normalizeClass([vue.unref(nsInput).e(\"icon\"), vue.unref(nsInput).e(\"validateIcon\"), vue.unref(nsInput).is(\"loading\", vue.unref(validateState) === \"validating\")])\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(validateIcon))))]),\n        _: 1\n      }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true)], 2)], 2)) : vue.createCommentVNode(\"v-if\", true)], 2), vue.createCommentVNode(\" append slot \"), _ctx.$slots.append ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 1,\n        class: vue.normalizeClass(vue.unref(nsInput).be(\"group\", \"append\"))\n      }, [vue.renderSlot(_ctx.$slots, \"append\")], 2)) : vue.createCommentVNode(\"v-if\", true)], 64)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n        key: 1\n      }, [vue.createCommentVNode(\" textarea \"), vue.createElementVNode(\"textarea\", vue.mergeProps({\n        id: vue.unref(inputId),\n        ref_key: \"textarea\",\n        ref: textarea,\n        class: vue.unref(nsTextarea).e(\"inner\")\n      }, vue.unref(attrs), {\n        tabindex: _ctx.tabindex,\n        disabled: vue.unref(inputDisabled),\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        style: vue.unref(textareaStyle),\n        \"aria-label\": _ctx.label,\n        placeholder: _ctx.placeholder,\n        form: props.form,\n        autofocus: props.autofocus,\n        onCompositionstart: handleCompositionStart,\n        onCompositionupdate: handleCompositionUpdate,\n        onCompositionend: handleCompositionEnd,\n        onInput: handleInput,\n        onFocus: _cache[2] || (_cache[2] = (...args) => vue.unref(handleFocus) && vue.unref(handleFocus)(...args)),\n        onBlur: _cache[3] || (_cache[3] = (...args) => vue.unref(handleBlur) && vue.unref(handleBlur)(...args)),\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, _hoisted_3), vue.unref(isWordLimitVisible) ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 0,\n        style: vue.normalizeStyle(countStyle.value),\n        class: vue.normalizeClass(vue.unref(nsInput).e(\"count\"))\n      }, vue.toDisplayString(vue.unref(textLength)) + \" / \" + vue.toDisplayString(vue.unref(attrs).maxlength), 7)) : vue.createCommentVNode(\"v-if\", true)], 64))], 16, _hoisted_1)), [[vue.vShow, _ctx.type !== \"hidden\"]]);\n    };\n  }\n});\nvar Input = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/input/src/input.vue\"]]);\nexports[\"default\"] = Input;","map":{"version":3,"names":["name","inheritAttrs","rawAttrs","vue","useAttrs","slots","useSlots","containerAttrs","computed","comboBoxAttrs","props","containerRole","containerKls","type","nsTextarea","b","nsInput","m","inputSize","value","is","inputDisabled","inputExceed","prepend","append","bm","prefix","prefixIcon","suffix","suffixIcon","clearable","showPassword","showClear","showPwdVisible","class","wrapperKls","e","isFocused","attrs","index","excludeKeys","Object","keys","form","formItem","useFormItem","inputId","useFormItemInputId","formItemContext","useFormCommonProps","useFormSize","useFormDisabled","index$1","useNamespace","input","shallowRef","textarea","hovering","ref","isComposing","passwordVisible","countStyle","textareaCalcStyle","inputStyle","_ref","wrapperRef","handleFocus","handleBlur","index$2","useFocusController","afterBlur","_a","validateEvent","validate","call","catch","err","error","debugWarn","needStatusIcon","statusIcon","validateState","validateIcon","icon","ValidateComponentsMap","passwordIcon","iconsVue","View","Hide","containerStyle","style","textareaStyle","resize","nativeInputValue","lodashUnified","isNil","modelValue","String","readonly","isWordLimitVisible","showWordLimit","maxlength","textLength","length","Number","suffixVisible","recordCursor","setCursor","index$3","useCursor","core","useResizeObserver","entries","onceInitSizeTextarea","entry","width","contentRect","right","resizeTextarea","autosize","isClient","minRows","shared","isObject","maxRows","textareaStyle2","utils","calcTextareaHeight","overflowY","nextTick","offsetHeight","minHeight","createOnceInitResize","resizeTextarea2","isInit","isElHidden","offsetParent","setNativeInputValue","input2","formatterValue","formatter","handleInput","event$1","target","parser","emit","event","UPDATE_MODEL_EVENT","handleChange","handleCompositionStart","handleCompositionUpdate","text","lastCharacter","i18n","isKorean","handleCompositionEnd","handlePasswordVisible","focus","blur","handleMouseLeave","evt","handleMouseEnter","handleKeydown","select","clear","watch","onMounted"],"sources":["../../../../../../packages/components/input/src/input.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"type !== 'hidden'\"\n    v-bind=\"containerAttrs\"\n    :class=\"containerKls\"\n    :style=\"containerStyle\"\n    :role=\"containerRole\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" :class=\"nsInput.be('group', 'prepend')\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <div ref=\"wrapperRef\" :class=\"wrapperKls\">\n        <!-- prefix slot -->\n        <span v-if=\"$slots.prefix || prefixIcon\" :class=\"nsInput.e('prefix')\">\n          <span :class=\"nsInput.e('prefix-inner')\">\n            <slot name=\"prefix\" />\n            <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('icon')\">\n              <component :is=\"prefixIcon\" />\n            </el-icon>\n          </span>\n        </span>\n\n        <input\n          :id=\"inputId\"\n          ref=\"input\"\n          :class=\"nsInput.e('inner')\"\n          v-bind=\"attrs\"\n          :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n          :disabled=\"inputDisabled\"\n          :formatter=\"formatter\"\n          :parser=\"parser\"\n          :readonly=\"readonly\"\n          :autocomplete=\"autocomplete\"\n          :tabindex=\"tabindex\"\n          :aria-label=\"label\"\n          :placeholder=\"placeholder\"\n          :style=\"inputStyle\"\n          :form=\"props.form\"\n          :autofocus=\"props.autofocus\"\n          @compositionstart=\"handleCompositionStart\"\n          @compositionupdate=\"handleCompositionUpdate\"\n          @compositionend=\"handleCompositionEnd\"\n          @input=\"handleInput\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @change=\"handleChange\"\n          @keydown=\"handleKeydown\"\n        />\n\n        <!-- suffix slot -->\n        <span v-if=\"suffixVisible\" :class=\"nsInput.e('suffix')\">\n          <span :class=\"nsInput.e('suffix-inner')\">\n            <template\n              v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\"\n            >\n              <slot name=\"suffix\" />\n              <el-icon v-if=\"suffixIcon\" :class=\"nsInput.e('icon')\">\n                <component :is=\"suffixIcon\" />\n              </el-icon>\n            </template>\n            <el-icon\n              v-if=\"showClear\"\n              :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n              @mousedown.prevent=\"NOOP\"\n              @click=\"clear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-if=\"showPwdVisible\"\n              :class=\"[nsInput.e('icon'), nsInput.e('password')]\"\n              @click=\"handlePasswordVisible\"\n            >\n              <component :is=\"passwordIcon\" />\n            </el-icon>\n            <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n              <span :class=\"nsInput.e('count-inner')\">\n                {{ textLength }} / {{ attrs.maxlength }}\n              </span>\n            </span>\n            <el-icon\n              v-if=\"validateState && validateIcon && needStatusIcon\"\n              :class=\"[\n                nsInput.e('icon'),\n                nsInput.e('validateIcon'),\n                nsInput.is('loading', validateState === 'validating'),\n              ]\"\n            >\n              <component :is=\"validateIcon\" />\n            </el-icon>\n          </span>\n        </span>\n      </div>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" :class=\"nsInput.be('group', 'append')\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        :id=\"inputId\"\n        ref=\"textarea\"\n        :class=\"nsTextarea.e('inner')\"\n        v-bind=\"attrs\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"textareaStyle\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        :form=\"props.form\"\n        :autofocus=\"props.autofocus\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span\n        v-if=\"isWordLimitVisible\"\n        :style=\"countStyle\"\n        :class=\"nsInput.e('count')\"\n      >\n        {{ textLength }} / {{ attrs.maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  shallowRef,\n  toRef,\n  useAttrs as useRawAttrs,\n  useSlots,\n  watch,\n} from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\nimport { isNil } from 'lodash-unified'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  CircleClose,\n  Hide as IconHide,\n  View as IconView,\n} from '@element-plus/icons-vue'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useFormSize,\n} from '@element-plus/components/form'\nimport {\n  NOOP,\n  ValidateComponentsMap,\n  debugWarn,\n  isClient,\n  isKorean,\n  isObject,\n} from '@element-plus/utils'\nimport {\n  useAttrs,\n  useCursor,\n  useFocusController,\n  useNamespace,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { calcTextareaHeight } from './utils'\nimport { inputEmits, inputProps } from './input'\nimport type { StyleValue } from 'vue'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\ndefineOptions({\n  name: 'ElInput',\n  inheritAttrs: false,\n})\nconst props = defineProps(inputProps)\nconst emit = defineEmits(inputEmits)\n\nconst rawAttrs = useRawAttrs()\nconst slots = useSlots()\n\nconst containerAttrs = computed(() => {\n  const comboBoxAttrs: Record<string, unknown> = {}\n  if (props.containerRole === 'combobox') {\n    comboBoxAttrs['aria-haspopup'] = rawAttrs['aria-haspopup']\n    comboBoxAttrs['aria-owns'] = rawAttrs['aria-owns']\n    comboBoxAttrs['aria-expanded'] = rawAttrs['aria-expanded']\n  }\n  return comboBoxAttrs\n})\n\nconst containerKls = computed(() => [\n  props.type === 'textarea' ? nsTextarea.b() : nsInput.b(),\n  nsInput.m(inputSize.value),\n  nsInput.is('disabled', inputDisabled.value),\n  nsInput.is('exceed', inputExceed.value),\n  {\n    [nsInput.b('group')]: slots.prepend || slots.append,\n    [nsInput.bm('group', 'append')]: slots.append,\n    [nsInput.bm('group', 'prepend')]: slots.prepend,\n    [nsInput.m('prefix')]: slots.prefix || props.prefixIcon,\n    [nsInput.m('suffix')]:\n      slots.suffix || props.suffixIcon || props.clearable || props.showPassword,\n    [nsInput.bm('suffix', 'password-clear')]:\n      showClear.value && showPwdVisible.value,\n  },\n  rawAttrs.class,\n])\n\nconst wrapperKls = computed(() => [\n  nsInput.e('wrapper'),\n  nsInput.is('focus', isFocused.value),\n])\n\nconst attrs = useAttrs({\n  excludeKeys: computed<string[]>(() => {\n    return Object.keys(containerAttrs.value)\n  }),\n})\nconst { form, formItem } = useFormItem()\nconst { inputId } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\nconst inputSize = useFormSize()\nconst inputDisabled = useFormDisabled()\nconst nsInput = useNamespace('input')\nconst nsTextarea = useNamespace('textarea')\n\nconst input = shallowRef<HTMLInputElement>()\nconst textarea = shallowRef<HTMLTextAreaElement>()\n\nconst hovering = ref(false)\nconst isComposing = ref(false)\nconst passwordVisible = ref(false)\nconst countStyle = ref<StyleValue>()\nconst textareaCalcStyle = shallowRef(props.inputStyle)\n\nconst _ref = computed(() => input.value || textarea.value)\n\nconst { wrapperRef, isFocused, handleFocus, handleBlur } = useFocusController(\n  _ref,\n  {\n    afterBlur() {\n      if (props.validateEvent) {\n        formItem?.validate?.('blur').catch((err) => debugWarn(err))\n      }\n    },\n  }\n)\n\nconst needStatusIcon = computed(() => form?.statusIcon ?? false)\nconst validateState = computed(() => formItem?.validateState || '')\nconst validateIcon = computed(\n  () => validateState.value && ValidateComponentsMap[validateState.value]\n)\nconst passwordIcon = computed(() =>\n  passwordVisible.value ? IconView : IconHide\n)\nconst containerStyle = computed<StyleValue>(() => [\n  rawAttrs.style as StyleValue,\n  props.inputStyle,\n])\nconst textareaStyle = computed<StyleValue>(() => [\n  props.inputStyle,\n  textareaCalcStyle.value,\n  { resize: props.resize },\n])\nconst nativeInputValue = computed(() =>\n  isNil(props.modelValue) ? '' : String(props.modelValue)\n)\nconst showClear = computed(\n  () =>\n    props.clearable &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !!nativeInputValue.value &&\n    (isFocused.value || hovering.value)\n)\nconst showPwdVisible = computed(\n  () =>\n    props.showPassword &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !!nativeInputValue.value &&\n    (!!nativeInputValue.value || isFocused.value)\n)\nconst isWordLimitVisible = computed(\n  () =>\n    props.showWordLimit &&\n    !!attrs.value.maxlength &&\n    (props.type === 'text' || props.type === 'textarea') &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !props.showPassword\n)\nconst textLength = computed(() => nativeInputValue.value.length)\nconst inputExceed = computed(\n  () =>\n    // show exceed style if length of initial value greater then maxlength\n    !!isWordLimitVisible.value &&\n    textLength.value > Number(attrs.value.maxlength)\n)\nconst suffixVisible = computed(\n  () =>\n    !!slots.suffix ||\n    !!props.suffixIcon ||\n    showClear.value ||\n    props.showPassword ||\n    isWordLimitVisible.value ||\n    (!!validateState.value && needStatusIcon.value)\n)\n\nconst [recordCursor, setCursor] = useCursor(input)\n\nuseResizeObserver(textarea, (entries) => {\n  onceInitSizeTextarea()\n  if (!isWordLimitVisible.value || props.resize !== 'both') return\n  const entry = entries[0]\n  const { width } = entry.contentRect\n  countStyle.value = {\n    /** right: 100% - width + padding(15) + right(6) */\n    right: `calc(100% - ${width + 15 + 6}px)`,\n  }\n})\n\nconst resizeTextarea = () => {\n  const { type, autosize } = props\n\n  if (!isClient || type !== 'textarea' || !textarea.value) return\n\n  if (autosize) {\n    const minRows = isObject(autosize) ? autosize.minRows : undefined\n    const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n    const textareaStyle = calcTextareaHeight(textarea.value, minRows, maxRows)\n\n    // If the scrollbar is displayed, the height of the textarea needs more space than the calculated height.\n    // If set textarea height in this case, the scrollbar will not hide.\n    // So we need to hide scrollbar first, and reset it in next tick.\n    // see https://github.com/element-plus/element-plus/issues/8825\n    textareaCalcStyle.value = {\n      overflowY: 'hidden',\n      ...textareaStyle,\n    }\n\n    nextTick(() => {\n      // NOTE: Force repaint to make sure the style set above is applied.\n      textarea.value!.offsetHeight\n      textareaCalcStyle.value = textareaStyle\n    })\n  } else {\n    textareaCalcStyle.value = {\n      minHeight: calcTextareaHeight(textarea.value).minHeight,\n    }\n  }\n}\n\nconst createOnceInitResize = (resizeTextarea: () => void) => {\n  let isInit = false\n  return () => {\n    if (isInit || !props.autosize) return\n    const isElHidden = textarea.value?.offsetParent === null\n    if (!isElHidden) {\n      resizeTextarea()\n      isInit = true\n    }\n  }\n}\n// fix: https://github.com/element-plus/element-plus/issues/12074\nconst onceInitSizeTextarea = createOnceInitResize(resizeTextarea)\n\nconst setNativeInputValue = () => {\n  const input = _ref.value\n  const formatterValue = props.formatter\n    ? props.formatter(nativeInputValue.value)\n    : nativeInputValue.value\n  if (!input || input.value === formatterValue) return\n  input.value = formatterValue\n}\n\nconst handleInput = async (event: Event) => {\n  recordCursor()\n\n  let { value } = event.target as TargetElement\n\n  if (props.formatter) {\n    value = props.parser ? props.parser(value) : value\n  }\n\n  // should not emit input during composition\n  // see: https://github.com/ElemeFE/element/issues/10516\n  if (isComposing.value) return\n\n  // hack for https://github.com/ElemeFE/element/issues/8548\n  // should remove the following line when we don't support IE\n  if (value === nativeInputValue.value) {\n    setNativeInputValue()\n    return\n  }\n\n  emit(UPDATE_MODEL_EVENT, value)\n  emit('input', value)\n\n  // ensure native input value is controlled\n  // see: https://github.com/ElemeFE/element/issues/12850\n  await nextTick()\n  setNativeInputValue()\n  setCursor()\n}\n\nconst handleChange = (event: Event) => {\n  emit('change', (event.target as TargetElement).value)\n}\n\nconst handleCompositionStart = (event: CompositionEvent) => {\n  emit('compositionstart', event)\n  isComposing.value = true\n}\n\nconst handleCompositionUpdate = (event: CompositionEvent) => {\n  emit('compositionupdate', event)\n  const text = (event.target as HTMLInputElement)?.value\n  const lastCharacter = text[text.length - 1] || ''\n  isComposing.value = !isKorean(lastCharacter)\n}\n\nconst handleCompositionEnd = (event: CompositionEvent) => {\n  emit('compositionend', event)\n  if (isComposing.value) {\n    isComposing.value = false\n    handleInput(event)\n  }\n}\n\nconst handlePasswordVisible = () => {\n  passwordVisible.value = !passwordVisible.value\n  focus()\n}\n\nconst focus = async () => {\n  // see: https://github.com/ElemeFE/element/issues/18573\n  await nextTick()\n  _ref.value?.focus()\n}\n\nconst blur = () => _ref.value?.blur()\n\nconst handleMouseLeave = (evt: MouseEvent) => {\n  hovering.value = false\n  emit('mouseleave', evt)\n}\n\nconst handleMouseEnter = (evt: MouseEvent) => {\n  hovering.value = true\n  emit('mouseenter', evt)\n}\n\nconst handleKeydown = (evt: KeyboardEvent) => {\n  emit('keydown', evt)\n}\n\nconst select = () => {\n  _ref.value?.select()\n}\n\nconst clear = () => {\n  emit(UPDATE_MODEL_EVENT, '')\n  emit('change', '')\n  emit('clear')\n  emit('input', '')\n}\n\nwatch(\n  () => props.modelValue,\n  () => {\n    nextTick(() => resizeTextarea())\n    if (props.validateEvent) {\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n\n// native input value is set explicitly\n// do not use v-model / :value in template\n// see: https://github.com/ElemeFE/element/issues/14521\nwatch(nativeInputValue, () => setNativeInputValue())\n\n// when change between <input> and <textarea>,\n// update DOM dependent value and styles\n// https://github.com/ElemeFE/element/issues/14857\nwatch(\n  () => props.type,\n  async () => {\n    await nextTick()\n    setNativeInputValue()\n    resizeTextarea()\n  }\n)\n\nonMounted(() => {\n  if (!props.formatter && props.parser) {\n    debugWarn(\n      'ElInput',\n      'If you set the parser, you also need to set the formatter.'\n    )\n  }\n  setNativeInputValue()\n  nextTick(resizeTextarea)\n})\n\ndefineExpose({\n  /** @description HTML input element */\n  input,\n  /** @description HTML textarea element */\n  textarea,\n  /** @description HTML element, input or textarea */\n  ref: _ref,\n  /** @description style of textarea. */\n  textareaStyle,\n\n  /** @description from props (used on unit test) */\n  autosize: toRef(props, 'autosize'),\n\n  /** @description HTML input element native method */\n  focus,\n  /** @description HTML input element native method */\n  blur,\n  /** @description HTML input element native method */\n  select,\n  /** @description clear input value */\n  clear,\n  /** @description resize textarea. */\n  resizeTextarea,\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}