{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index = require('../../statistic/index.js');\nrequire('../../../utils/index.js');\nvar countdown = require('./countdown.js');\nvar utils = require('./utils.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar raf = require('../../../utils/raf.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElCountdown\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: countdown.countdownProps,\n  emits: countdown.countdownEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    let timer;\n    const rawValue = vue.ref(utils.getTime(props.value) - Date.now());\n    const displayValue = vue.computed(() => utils.formatTime(rawValue.value, props.format));\n    const formatter = val => utils.formatTime(val, props.format);\n    const stopTimer = () => {\n      if (timer) {\n        raf.cAF(timer);\n        timer = void 0;\n      }\n    };\n    const startTimer = () => {\n      const timestamp = utils.getTime(props.value);\n      const frameFunc = () => {\n        let diff = timestamp - Date.now();\n        emit(\"change\", diff);\n        if (diff <= 0) {\n          diff = 0;\n          stopTimer();\n          emit(\"finish\");\n        } else {\n          timer = raf.rAF(frameFunc);\n        }\n        rawValue.value = diff;\n      };\n      timer = raf.rAF(frameFunc);\n    };\n    vue.watch(() => [props.value, props.format], () => {\n      stopTimer();\n      startTimer();\n    }, {\n      immediate: true\n    });\n    vue.onBeforeUnmount(() => {\n      stopTimer();\n    });\n    expose({\n      displayValue\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.unref(index.ElStatistic), {\n        value: rawValue.value,\n        title: _ctx.title,\n        prefix: _ctx.prefix,\n        suffix: _ctx.suffix,\n        \"value-style\": _ctx.valueStyle,\n        formatter\n      }, vue.createSlots({\n        _: 2\n      }, [vue.renderList(_ctx.$slots, (_, name) => {\n        return {\n          name,\n          fn: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, name)])\n        };\n      })]), 1032, [\"value\", \"title\", \"prefix\", \"suffix\", \"value-style\"]);\n    };\n  }\n});\nvar Countdown = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/countdown/src/countdown.vue\"]]);\nexports[\"default\"] = Countdown;","map":{"version":3,"names":["name","timer","rawValue","vue","ref","utils","getTime","props","value","Date","now","displayValue","computed","formatTime","format","formatter","val","stopTimer","raf","cAF","startTimer","timestamp","frameFunc","diff","emit","rAF","watch","immediate","onBeforeUnmount","expose"],"sources":["../../../../../../packages/components/countdown/src/countdown.vue"],"sourcesContent":["<template>\n  <el-statistic\n    :value=\"rawValue\"\n    :title=\"title\"\n    :prefix=\"prefix\"\n    :suffix=\"suffix\"\n    :value-style=\"valueStyle\"\n    :formatter=\"formatter\"\n  >\n    <template v-for=\"(_, name) in $slots\" #[name]>\n      <slot :name=\"name\" />\n    </template>\n  </el-statistic>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, onBeforeUnmount, ref, watch } from 'vue'\nimport { ElStatistic } from '@element-plus/components/statistic'\nimport { cAF, rAF } from '@element-plus/utils'\nimport { countdownEmits, countdownProps } from './countdown'\nimport { formatTime, getTime } from './utils'\n\ndefineOptions({\n  name: 'ElCountdown',\n})\n\nconst props = defineProps(countdownProps)\nconst emit = defineEmits(countdownEmits)\n\nlet timer: ReturnType<typeof rAF> | undefined\nconst rawValue = ref(getTime(props.value) - Date.now())\nconst displayValue = computed(() => formatTime(rawValue.value, props.format))\n\nconst formatter = (val: number) => formatTime(val, props.format)\n\nconst stopTimer = () => {\n  if (timer) {\n    cAF(timer)\n    timer = undefined\n  }\n}\n\nconst startTimer = () => {\n  const timestamp = getTime(props.value)\n  const frameFunc = () => {\n    let diff = timestamp - Date.now()\n    emit('change', diff)\n    if (diff <= 0) {\n      diff = 0\n      stopTimer()\n      emit('finish')\n    } else {\n      timer = rAF(frameFunc)\n    }\n    rawValue.value = diff\n  }\n  timer = rAF(frameFunc)\n}\n\nwatch(\n  () => [props.value, props.format],\n  () => {\n    stopTimer()\n    startTimer()\n  },\n  {\n    immediate: true,\n  }\n)\n\nonBeforeUnmount(() => {\n  stopTimer()\n})\n\ndefineExpose({\n  /**\n   * @description current display value\n   */\n  displayValue,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;uCAqBc;EACZA,IAAM;AACR;;;;;;;;;;IAKI,IAAAC,KAAA;IACE,MAAAC,QAAA,GAAWC,GAAA,CAAAC,GAAA,CAAIC,KAAA,CAAAC,OAAQ,CAAAC,KAAA,CAAMC,KAAK,CAAI,GAAAC,IAAA,CAAKC,GAAA,EAAK;IAChD,MAAAC,YAAA,GAAeR,GAAA,CAAAS,QAAA,CAAS,MAAMP,KAAA,CAAAQ,UAAA,CAAWX,QAAA,CAASM,KAAO,EAAAD,KAAA,CAAMO,MAAM,CAAC;IAE5E,MAAMC,SAAA,GAAaC,GAAA,IAAgBX,KAAA,CAAAQ,UAAW,CAAAG,GAAA,EAAKT,KAAA,CAAMO,MAAM;IAE/D,MAAMG,SAAA,GAAYA,CAAA,KAAM;MACtB,IAAIhB,KAAO;QACTiB,GAAA,CAAAC,GAAA,CAAIlB,KAAK;QACDA,KAAA;MAAA;IACV,CACF;IAEA,MAAMmB,UAAA,GAAaA,CAAA,KAAM;MACjB,MAAAC,SAAA,GAAYhB,KAAA,CAAAC,OAAQ,CAAAC,KAAA,CAAMC,KAAK;MACrC,MAAMc,SAAA,GAAYA,CAAA,KAAM;QAClB,IAAAC,IAAA,GAAOF,SAAY,GAAAZ,IAAA,CAAKC,GAAI;QAChCc,IAAA,CAAK,UAAUD,IAAI;QACnB,IAAIA,IAAA,IAAQ,CAAG;UACNA,IAAA;UACGN,SAAA;UACVO,IAAA,CAAK,QAAQ;QAAA,CACR;UACLvB,KAAA,GAAQiB,GAAA,CAAAO,GAAA,CAAIH,SAAS;QAAA;QAEvBpB,QAAA,CAASM,KAAQ,GAAAe,IAAA;MAAA,CACnB;MACAtB,KAAA,GAAQiB,GAAA,CAAAO,GAAA,CAAIH,SAAS;IAAA,CACvB;IAEAnB,GAAA,CAAAuB,KAAA,CACE,MAAM,CAACnB,KAAA,CAAMC,KAAA,EAAOD,KAAM,CAAAO,MAAM,GAChC,MAAM;MACMG,SAAA;MACCG,UAAA;IAAA,CAEb;MACEO,SAAW;IAAA,CAEf;IAEAxB,GAAA,CAAAyB,eAAA,CAAgB,MAAM;MACVX,SAAA;IAAA,CACX;IAEYY,MAAA;MAIXlB;IAAA,CACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}