{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nrequire('../../../form/index.js');\nrequire('../../../../utils/index.js');\nvar constants = require('../constants.js');\nvar types = require('../../../../utils/types.js');\nvar shared = require('@vue/shared');\nvar useFormCommonProps = require('../../../form/src/hooks/use-form-common-props.js');\nconst useCheckboxStatus = (props, slots, {\n  model\n}) => {\n  const checkboxGroup = vue.inject(constants.checkboxGroupContextKey, void 0);\n  const isFocused = vue.ref(false);\n  const isChecked = vue.computed(() => {\n    const value = model.value;\n    if (types.isBoolean(value)) {\n      return value;\n    } else if (shared.isArray(value)) {\n      if (shared.isObject(props.label)) {\n        return value.map(vue.toRaw).some(o => lodashUnified.isEqual(o, props.label));\n      } else {\n        return value.map(vue.toRaw).includes(props.label);\n      }\n    } else if (value !== null && value !== void 0) {\n      return value === props.trueLabel;\n    } else {\n      return !!value;\n    }\n  });\n  const checkboxButtonSize = useFormCommonProps.useFormSize(vue.computed(() => {\n    var _a;\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }), {\n    prop: true\n  });\n  const checkboxSize = useFormCommonProps.useFormSize(vue.computed(() => {\n    var _a;\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }));\n  const hasOwnLabel = vue.computed(() => {\n    return !!slots.default || !lodashUnified.isNil(props.label);\n  });\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel\n  };\n};\nexports.useCheckboxStatus = useCheckboxStatus;","map":{"version":3,"names":["useCheckboxStatus","props","slots","model","checkboxGroup","vue","inject","constants","checkboxGroupContextKey","isFocused","ref","isChecked","computed","value","types","isBoolean","shared","isArray","isObject","label","map","toRaw","some","o","lodashUnified","isEqual","includes","trueLabel","checkboxButtonSize","useFormCommonProps","useFormSize","_a","size","prop","checkboxSize","hasOwnLabel","default","isNil"],"sources":["../../../../../../../packages/components/checkbox/src/composables/use-checkbox-status.ts"],"sourcesContent":["import { computed, inject, ref, toRaw } from 'vue'\nimport { isEqual, isNil } from 'lodash-unified'\nimport { useFormSize } from '@element-plus/components/form'\nimport { isArray, isBoolean, isObject } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { ComponentInternalInstance } from 'vue'\nimport type { CheckboxProps } from '../checkbox'\nimport type { CheckboxModel } from '../composables'\n\nexport const useCheckboxStatus = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots'],\n  { model }: Pick<CheckboxModel, 'model'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const isFocused = ref(false)\n  const isChecked = computed<boolean>(() => {\n    const value = model.value\n    if (isBoolean(value)) {\n      return value\n    } else if (isArray(value)) {\n      if (isObject(props.label)) {\n        return value.map(toRaw).some((o) => isEqual(o, props.label))\n      } else {\n        return value.map(toRaw).includes(props.label)\n      }\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxButtonSize = useFormSize(\n    computed(() => checkboxGroup?.size?.value),\n    {\n      prop: true,\n    }\n  )\n  const checkboxSize = useFormSize(computed(() => checkboxGroup?.size?.value))\n\n  const hasOwnLabel = computed<boolean>(() => {\n    return !!slots.default || !isNil(props.label)\n  })\n\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel,\n  }\n}\n\nexport type CheckboxStatus = ReturnType<typeof useCheckboxStatus>\n"],"mappings":";;;;;;;;;;;;;AAKY,MAACA,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAAEC;AAAK,CAAE,KAAK;EAC5D,MAAMC,aAAa,GAAGC,GAAA,CAAAC,MAAM,CAACC,SAAA,CAAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;EAC7D,MAAMC,SAAS,GAAGJ,GAAA,CAAAK,GAAG,CAAC,KAAK,CAAC;EAC5B,MAAMC,SAAS,GAAGN,GAAA,CAAAO,QAAQ,CAAC,MAAM;IAC/B,MAAMC,KAAK,GAAGV,KAAK,CAACU,KAAK;IACzB,IAAIC,KAAA,CAAAC,SAAS,CAACF,KAAK,CAAC,EAAE;MACpB,OAAOA,KAAK;IAClB,CAAK,MAAM,IAAIG,MAAA,CAAAC,OAAO,CAACJ,KAAK,CAAC,EAAE;MACzB,IAAIG,MAAA,CAAAE,QAAQ,CAACjB,KAAK,CAACkB,KAAK,CAAC,EAAE;QACzB,OAAON,KAAK,CAACO,GAAG,CAACf,GAAA,CAAAgB,KAAK,CAAC,CAACC,IAAI,CAAEC,CAAC,IAAKC,aAAA,CAAAC,OAAO,CAACF,CAAC,EAAEtB,KAAK,CAACkB,KAAK,CAAC,CAAC;MACpE,CAAO,MAAM;QACL,OAAON,KAAK,CAACO,GAAG,CAACf,GAAA,CAAAgB,KAAK,CAAC,CAACK,QAAQ,CAACzB,KAAK,CAACkB,KAAK,CAAC;MACrD;IACA,CAAK,MAAM,IAAIN,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;MAC7C,OAAOA,KAAK,KAAKZ,KAAK,CAAC0B,SAAS;IACtC,CAAK,MAAM;MACL,OAAO,CAAC,CAACd,KAAK;IACpB;EACA,CAAG,CAAC;EACF,MAAMe,kBAAkB,GAAGC,kBAAA,CAAAC,WAAW,CAACzB,GAAA,CAAAO,QAAQ,CAAC,MAAM;IACpD,IAAImB,EAAE;IACN,OAAO,CAACA,EAAE,GAAG3B,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAAC4B,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,EAAE,CAAClB,KAAK;EACjG,CAAG,CAAC,EAAE;IACFoB,IAAI,EAAE;EACV,CAAG,CAAC;EACF,MAAMC,YAAY,GAAGL,kBAAA,CAAAC,WAAW,CAACzB,GAAA,CAAAO,QAAQ,CAAC,MAAM;IAC9C,IAAImB,EAAE;IACN,OAAO,CAACA,EAAE,GAAG3B,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAAC4B,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,EAAE,CAAClB,KAAK;EACjG,CAAG,CAAC,CAAC;EACH,MAAMsB,WAAW,GAAG9B,GAAA,CAAAO,QAAQ,CAAC,MAAM;IACjC,OAAO,CAAC,CAACV,KAAK,CAACkC,OAAO,IAAI,CAACZ,aAAA,CAAAa,KAAK,CAACpC,KAAK,CAACkB,KAAK,CAAC;EACjD,CAAG,CAAC;EACF,OAAO;IACLS,kBAAkB;IAClBjB,SAAS;IACTF,SAAS;IACTyB,YAAY;IACZC;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}