"use strict";

export default {
    install(Vue){
        Vue.prototype.$radio = (function () {
            //定义 list    对象
            //定义 remove  删除方法
            //定义 listen  订阅方法
            //定义 trigger 发布方法
            let list = {},
                listen,
                trigger,
                remove;
        
        
            //定义listen方法
            listen = function (key, fn) {
                if (!key) {
                    //如果key不存在
                    console.error("listen缺少一个key作为时间的监听对象")
                } else if (!fn) {
                    //如果fn不是一个function
                    console.error("listen的",fn,"不是一个function对象")
                }else if (!list[key]){
                    //如果这个key不存在则创建这个key的监听数组
                    list[key] = [];
                    console.info("一个新的监听事件对象",key)
                }
                list[key].push(fn);
                console.info("有一个新的对象监听了",key)
            };
        
        
            //定义trigger发布方法
            trigger = function () {
                //定义一个key 
                 //获取订阅着的function
                let key = Array.prototype.shift.call(arguments),fns = list[key];
        
                //如果当前key没有对象进行监听
                if (!fns || fns.length === 0) {
                    return false;
                }
                //依次执行该key的监听
                for (let i = 0, fn; fn = fns[i++];) {
                    fn.apply(this, arguments);
                }
            };
             //定义remove删除订阅的方法
            remove = function (key, fn) {
                let fns = list[key];
                if (!fns) {
                    return false;
                }
                if (!fn) {
                    fns && (fns.length = 0);
                } else {
                    for (let i = fns.length - 1; i >= 0; i--) {
                        let _fn = fns[i];
                        if (_fn === fn) {
                            fns.splice(i, 1);
                        }
                    }
                }
            };
        
        
            //返回对象
            return {
                listen: listen,
                trigger: trigger,
                remove: remove
            }
        })();
    }
}
    